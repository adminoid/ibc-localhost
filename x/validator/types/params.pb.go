// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/validator/v1/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// max_validators defines the maximum number of validators can be bounded at the same time.
	MaxValidators uint32 `protobuf:"varint,1,opt,name=max_validators,json=maxValidators,proto3" json:"max_validators,omitempty"`
	// max_delegations defines the maximum number of delegations per validator at be bounded at the same time.
	MaxDelegations uint32 `protobuf:"varint,2,opt,name=max_delegations,json=maxDelegations,proto3" json:"max_delegations,omitempty"`
	// max_entries defines the max entries for single undelegation/redelegation (per pair/trio).
	MaxEntries uint32 `protobuf:"varint,3,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries,omitempty"`
	// historical_entries defines the number of historical entries to persist.
	HistoricalEntries uint32 `protobuf:"varint,4,opt,name=historical_entries,json=historicalEntries,proto3" json:"historical_entries,omitempty"`
	// redelegation_time defines the time duration of redelegation a stake (moving to the other validator).
	RedelegationTime time.Duration `protobuf:"bytes,5,opt,name=redelegation_time,json=redelegationTime,proto3,stdduration" json:"redelegation_time"`
	// undelegation_time defines the time duration of undelegation a stake (unbonding from the validator).
	UndelegationTime time.Duration `protobuf:"bytes,6,opt,name=undelegation_time,json=undelegationTime,proto3,stdduration" json:"undelegation_time"`
	// width of sliding window for downtime slashing
	SignedBlocksWindow int64 `protobuf:"varint,10,opt,name=signed_blocks_window,json=signedBlocksWindow,proto3" json:"signed_blocks_window,omitempty"`
	// minimum blocks signed per window
	MinSignedPerWindow github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=min_signed_per_window,json=minSignedPerWindow,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_signed_per_window"`
	// downtime jail duration
	DowntimeJailDuration time.Duration `protobuf:"bytes,12,opt,name=downtime_jail_duration,json=downtimeJailDuration,proto3,stdduration" json:"downtime_jail_duration"`
	// fraction of power slashed in case of double sign
	SlashFractionDoubleSign github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=slash_fraction_double_sign,json=slashFractionDoubleSign,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_double_sign"`
	// fraction of power slashed for downtime
	SlashFractionDowntime github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=slash_fraction_downtime,json=slashFractionDowntime,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_downtime"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_3180e3eded1f75a1, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "decimal.validator.v1.Params")
}

func init() { proto.RegisterFile("decimal/validator/v1/params.proto", fileDescriptor_3180e3eded1f75a1) }

var fileDescriptor_3180e3eded1f75a1 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x31, 0x8f, 0xd3, 0x30,
	0x1c, 0xc5, 0x63, 0x0e, 0x2a, 0xe4, 0x6b, 0x0f, 0xce, 0xea, 0x71, 0xa1, 0x43, 0x52, 0x90, 0x80,
	0x2e, 0x8d, 0x39, 0x98, 0x60, 0xac, 0x0a, 0x03, 0x53, 0xd5, 0x43, 0x20, 0x58, 0x22, 0x27, 0x71,
	0x53, 0xd3, 0x38, 0xae, 0x6c, 0xa7, 0x2d, 0xdf, 0x80, 0x91, 0xf1, 0x36, 0xfa, 0x71, 0x6e, 0xbc,
	0x11, 0x31, 0x1c, 0xa8, 0x5d, 0xf8, 0x18, 0x28, 0x4e, 0xd2, 0x56, 0xc7, 0x02, 0x37, 0xb5, 0xf9,
	0xbf, 0xf7, 0xff, 0xbd, 0x3c, 0x2b, 0x86, 0x0f, 0x22, 0x1a, 0x32, 0x4e, 0x12, 0x3c, 0x23, 0x09,
	0x8b, 0x88, 0x16, 0x12, 0xcf, 0x4e, 0xf0, 0x94, 0x48, 0xc2, 0x95, 0x37, 0x95, 0x42, 0x0b, 0xd4,
	0x2c, 0x2d, 0xde, 0xc6, 0xe2, 0xcd, 0x4e, 0x5a, 0xcd, 0x58, 0xc4, 0xc2, 0x18, 0x70, 0xfe, 0xaf,
	0xf0, 0xb6, 0x9c, 0x58, 0x88, 0x38, 0xa1, 0xd8, 0x3c, 0x05, 0xd9, 0x08, 0x47, 0x99, 0x24, 0x9a,
	0x89, 0xb4, 0xd0, 0x1f, 0x7e, 0xab, 0xc1, 0xda, 0xc0, 0xc0, 0xd1, 0x23, 0x78, 0xc0, 0xc9, 0xc2,
	0xdf, 0x40, 0x95, 0x0d, 0xda, 0xa0, 0xd3, 0x18, 0x36, 0x38, 0x59, 0xbc, 0xdb, 0x0c, 0xd1, 0x13,
	0x78, 0x27, 0xb7, 0x45, 0x34, 0xa1, 0xb1, 0x21, 0x29, 0xfb, 0x86, 0xf1, 0xe5, 0xdb, 0xfd, 0xed,
	0x14, 0xb9, 0x70, 0x3f, 0x37, 0xd2, 0x54, 0x4b, 0x46, 0x95, 0xbd, 0x67, 0x4c, 0x90, 0x93, 0xc5,
	0xab, 0x62, 0x82, 0xba, 0x10, 0x8d, 0x99, 0xd2, 0x42, 0xb2, 0x90, 0x24, 0x1b, 0xdf, 0x4d, 0xe3,
	0x3b, 0xdc, 0x2a, 0x95, 0x7d, 0x00, 0x0f, 0x25, 0xdd, 0xc6, 0xfa, 0x9a, 0x71, 0x6a, 0xdf, 0x6a,
	0x83, 0xce, 0xfe, 0xb3, 0xfb, 0x5e, 0x51, 0xd3, 0xab, 0x6a, 0x7a, 0xfd, 0xb2, 0x66, 0xef, 0xf6,
	0xf9, 0xa5, 0x6b, 0x9d, 0xfd, 0x74, 0xc1, 0xf0, 0xee, 0xee, 0xf6, 0x5b, 0xc6, 0x69, 0x4e, 0xcc,
	0xd2, 0xab, 0xc4, 0xda, 0x7f, 0x10, 0x77, 0xb7, 0x0d, 0xf1, 0x29, 0x6c, 0x2a, 0x16, 0xa7, 0x34,
	0xf2, 0x83, 0x44, 0x84, 0x13, 0xe5, 0xcf, 0x59, 0x1a, 0x89, 0xb9, 0x0d, 0xdb, 0xa0, 0xb3, 0x37,
	0x44, 0x85, 0xd6, 0x33, 0xd2, 0x7b, 0xa3, 0x20, 0x02, 0x8f, 0x38, 0x4b, 0xfd, 0x72, 0x6b, 0x4a,
	0x65, 0xb5, 0xb2, 0xdf, 0x06, 0x9d, 0x7a, 0xcf, 0xcb, 0xc3, 0x7e, 0x5c, 0xba, 0x8f, 0x63, 0xa6,
	0xc7, 0x59, 0xe0, 0x85, 0x82, 0xe3, 0x50, 0x28, 0x2e, 0x54, 0xf9, 0xd3, 0x55, 0xd1, 0x04, 0xeb,
	0xcf, 0x53, 0xaa, 0xbc, 0x3e, 0x0d, 0x87, 0x88, 0xb3, 0xf4, 0xd4, 0xb0, 0x06, 0x54, 0x96, 0x11,
	0x1f, 0xe0, 0xbd, 0x48, 0xcc, 0xd3, 0xbc, 0x9d, 0xff, 0x89, 0xb0, 0xc4, 0xaf, 0xbe, 0x01, 0xbb,
	0xfe, 0xef, 0x5d, 0x9b, 0x15, 0xe2, 0x0d, 0x61, 0x49, 0xa5, 0xa3, 0x09, 0x6c, 0xa9, 0x84, 0xa8,
	0xb1, 0x3f, 0x92, 0x24, 0x34, 0x67, 0x18, 0x89, 0x2c, 0x48, 0xa8, 0xe9, 0x63, 0x37, 0xae, 0x55,
	0xe1, 0xd8, 0x10, 0x5f, 0x97, 0xc0, 0xbe, 0xe1, 0xe5, 0x95, 0xd0, 0x08, 0x1e, 0xff, 0x15, 0x56,
	0xbc, 0x93, 0x7d, 0x70, 0xad, 0xa4, 0xa3, 0x2b, 0x49, 0x05, 0xec, 0x65, 0xfd, 0xcb, 0xd2, 0xb5,
	0xce, 0x96, 0x2e, 0xf8, 0xbd, 0x74, 0x41, 0xef, 0xf4, 0x7c, 0xe5, 0x80, 0x8b, 0x95, 0x03, 0x7e,
	0xad, 0x1c, 0xf0, 0x75, 0xed, 0x58, 0x17, 0x6b, 0xc7, 0xfa, 0xbe, 0x76, 0xac, 0x8f, 0x2f, 0x02,
	0xa6, 0x83, 0x2c, 0x9c, 0x50, 0xed, 0x09, 0x19, 0xe3, 0xf2, 0x56, 0x6a, 0x4a, 0x38, 0x8e, 0x45,
	0x57, 0x71, 0x22, 0x75, 0x37, 0x15, 0x11, 0xc5, 0x8b, 0x9d, 0xcb, 0x6c, 0xd2, 0x83, 0x9a, 0x39,
	0xea, 0xe7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x11, 0xdb, 0x8d, 0x17, 0xee, 0x03, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxValidators != that1.MaxValidators {
		return false
	}
	if this.MaxDelegations != that1.MaxDelegations {
		return false
	}
	if this.MaxEntries != that1.MaxEntries {
		return false
	}
	if this.HistoricalEntries != that1.HistoricalEntries {
		return false
	}
	if this.RedelegationTime != that1.RedelegationTime {
		return false
	}
	if this.UndelegationTime != that1.UndelegationTime {
		return false
	}
	if this.SignedBlocksWindow != that1.SignedBlocksWindow {
		return false
	}
	if !this.MinSignedPerWindow.Equal(that1.MinSignedPerWindow) {
		return false
	}
	if this.DowntimeJailDuration != that1.DowntimeJailDuration {
		return false
	}
	if !this.SlashFractionDoubleSign.Equal(that1.SlashFractionDoubleSign) {
		return false
	}
	if !this.SlashFractionDowntime.Equal(that1.SlashFractionDowntime) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SlashFractionDowntime.Size()
		i -= size
		if _, err := m.SlashFractionDowntime.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.SlashFractionDoubleSign.Size()
		i -= size
		if _, err := m.SlashFractionDoubleSign.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.DowntimeJailDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.DowntimeJailDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintParams(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x62
	{
		size := m.MinSignedPerWindow.Size()
		i -= size
		if _, err := m.MinSignedPerWindow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.SignedBlocksWindow != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SignedBlocksWindow))
		i--
		dAtA[i] = 0x50
	}
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.UndelegationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.UndelegationTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintParams(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.RedelegationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.RedelegationTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintParams(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	if m.HistoricalEntries != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.HistoricalEntries))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxEntries != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxEntries))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxDelegations != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxDelegations))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxValidators != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxValidators))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxValidators != 0 {
		n += 1 + sovParams(uint64(m.MaxValidators))
	}
	if m.MaxDelegations != 0 {
		n += 1 + sovParams(uint64(m.MaxDelegations))
	}
	if m.MaxEntries != 0 {
		n += 1 + sovParams(uint64(m.MaxEntries))
	}
	if m.HistoricalEntries != 0 {
		n += 1 + sovParams(uint64(m.HistoricalEntries))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RedelegationTime)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.UndelegationTime)
	n += 1 + l + sovParams(uint64(l))
	if m.SignedBlocksWindow != 0 {
		n += 1 + sovParams(uint64(m.SignedBlocksWindow))
	}
	l = m.MinSignedPerWindow.Size()
	n += 1 + l + sovParams(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.DowntimeJailDuration)
	n += 1 + l + sovParams(uint64(l))
	l = m.SlashFractionDoubleSign.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.SlashFractionDowntime.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidators", wireType)
			}
			m.MaxValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelegations", wireType)
			}
			m.MaxDelegations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDelegations |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEntries", wireType)
			}
			m.MaxEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalEntries", wireType)
			}
			m.HistoricalEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoricalEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedelegationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.RedelegationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.UndelegationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedBlocksWindow", wireType)
			}
			m.SignedBlocksWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedBlocksWindow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSignedPerWindow", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSignedPerWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DowntimeJailDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.DowntimeJailDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionDoubleSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionDoubleSign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionDowntime", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionDowntime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
