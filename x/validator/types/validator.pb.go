// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/validator/v1/validator.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BondStatus int32

const (
	// UNSPECIFIED defines an invalid validator status.
	Unspecified BondStatus = 0
	// UNBONDED defines a validator that is not bonded.
	Unbonded BondStatus = 1
	// UNBONDING defines a validator that is unbonding.
	Unbonding BondStatus = 2
	// BONDED defines a validator that is bonded.
	Bonded BondStatus = 3
)

var BondStatus_name = map[int32]string{
	0: "BOND_STATUS_UNSPECIFIED",
	1: "BOND_STATUS_UNBONDED",
	2: "BOND_STATUS_UNBONDING",
	3: "BOND_STATUS_BONDED",
}

var BondStatus_value = map[string]int32{
	"BOND_STATUS_UNSPECIFIED": 0,
	"BOND_STATUS_UNBONDED":    1,
	"BOND_STATUS_UNBONDING":   2,
	"BOND_STATUS_BONDED":      3,
}

func (x BondStatus) String() string {
	return proto.EnumName(BondStatus_name, int32(x))
}

func (BondStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ae746e987c590f4, []int{0}
}

type Params struct {
	// unbonding_time is the time duration of unbonding.
	UnbondingTime time.Duration `protobuf:"bytes,1,opt,name=unbonding_time,json=unbondingTime,proto3,stdduration" json:"unbonding_time" yaml:"unbonding_time"`
	// max_validators is the maximum number of validators.
	MaxValidators uint32 `protobuf:"varint,2,opt,name=max_validators,json=maxValidators,proto3" json:"max_validators,omitempty" yaml:"max_validators"`
	// max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
	MaxEntries uint32 `protobuf:"varint,3,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries,omitempty" yaml:"max_entries"`
	// historical_entries is the number of historical entries to persist.
	HistoricalEntries uint32 `protobuf:"varint,4,opt,name=historical_entries,json=historicalEntries,proto3" json:"historical_entries,omitempty" yaml:"historical_entries"`
	// max_delegations is the number of max delegations count of validator
	MaxDelegations uint32 `protobuf:"varint,5,opt,name=max_delegations,json=maxDelegations,proto3" json:"max_delegations,omitempty" yaml:"max_delegations"`
	// bond_denom defines the bondable coin denomination.
	BondDenom string `protobuf:"bytes,6,opt,name=bond_denom,json=bondDenom,proto3" json:"bond_denom,omitempty" yaml:"bond_denom"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ae746e987c590f4, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetUnbondingTime() time.Duration {
	if m != nil {
		return m.UnbondingTime
	}
	return 0
}

func (m *Params) GetMaxValidators() uint32 {
	if m != nil {
		return m.MaxValidators
	}
	return 0
}

func (m *Params) GetMaxEntries() uint32 {
	if m != nil {
		return m.MaxEntries
	}
	return 0
}

func (m *Params) GetHistoricalEntries() uint32 {
	if m != nil {
		return m.HistoricalEntries
	}
	return 0
}

func (m *Params) GetMaxDelegations() uint32 {
	if m != nil {
		return m.MaxDelegations
	}
	return 0
}

func (m *Params) GetBondDenom() string {
	if m != nil {
		return m.BondDenom
	}
	return ""
}

type Validator struct {
	// operator_address defines the address of the validator's operator; bech encoded in JSON.
	ValAddress string `protobuf:"bytes,1,opt,name=val_address,json=valAddress,proto3" json:"val_address,omitempty" yaml:"val_address"`
	// consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
	PubKey *types.Any `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty" yaml:"pub_key"`
	// tokens define the delegated tokens (incl. self-delegation).
	Tokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens"`
	// status is the validator status (bonded/unbonding/unbonded).
	Status BondStatus `protobuf:"varint,4,opt,name=status,proto3,enum=decimal.validator.v1.BondStatus" json:"status,omitempty"`
	// commission defines the commission parameters.
	Commission github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=commission,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission" yaml:"comission"`
	// jailed defined whether the validator has been jailed from bonded status or not.
	Jailed bool `protobuf:"varint,6,opt,name=jailed,proto3" json:"jailed,omitempty"`
	// unbonding_completion_time defines, if unbonding, the min time for the validator to complete unbonding.
	UnbondingCompletionTime time.Time `protobuf:"bytes,7,opt,name=unbonding_completion_time,json=unbondingCompletionTime,proto3,stdtime" json:"unbonding_completion_time" yaml:"unbonding_completion_time"`
	// unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
	UnbondingHeight int64 `protobuf:"varint,8,opt,name=unbonding_height,json=unbondingHeight,proto3" json:"unbonding_height,omitempty" yaml:"unbonding_height"`
	// description defines the description terms for the validator.
	Description Description `protobuf:"bytes,9,opt,name=description,proto3" json:"description" yaml:"description"`
	// accum_rewards is a pool of all collected rewards
	AccumRewards github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=accum_rewards,json=accumRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"accum_rewards" yaml:"accum_rewards"`
	// reward_address is the account for withdrawing rewards
	RewardAddress string `protobuf:"bytes,11,opt,name=reward_address,json=rewardAddress,proto3" json:"reward_address,omitempty" yaml:"reward_address"`
	// whether the validator participates in the consensus
	Online bool `protobuf:"varint,12,opt,name=online,proto3" json:"online,omitempty" yaml:"online"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ae746e987c590f4, []int{1}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetValAddress() string {
	if m != nil {
		return m.ValAddress
	}
	return ""
}

func (m *Validator) GetPubKey() *types.Any {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Validator) GetStatus() BondStatus {
	if m != nil {
		return m.Status
	}
	return Unspecified
}

func (m *Validator) GetJailed() bool {
	if m != nil {
		return m.Jailed
	}
	return false
}

func (m *Validator) GetUnbondingCompletionTime() time.Time {
	if m != nil {
		return m.UnbondingCompletionTime
	}
	return time.Time{}
}

func (m *Validator) GetUnbondingHeight() int64 {
	if m != nil {
		return m.UnbondingHeight
	}
	return 0
}

func (m *Validator) GetDescription() Description {
	if m != nil {
		return m.Description
	}
	return Description{}
}

func (m *Validator) GetRewardAddress() string {
	if m != nil {
		return m.RewardAddress
	}
	return ""
}

func (m *Validator) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

type Description struct {
	// moniker defines a human-readable name for the validator.
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty" yaml:"moniker"`
	// identity defines an optional identity signature (ex. UPort or Keybase).
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty" yaml:"identity"`
	// website defines an optional website link.
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty" yaml:"website"`
	// security_contact defines an optional email for security contact.
	SecurityContact string `protobuf:"bytes,4,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty" yaml:"security_contact"`
	// details define other optional details.
	Details string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty" yaml:"details"`
}

func (m *Description) Reset()         { *m = Description{} }
func (m *Description) String() string { return proto.CompactTextString(m) }
func (*Description) ProtoMessage()    {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ae746e987c590f4, []int{2}
}
func (m *Description) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Description.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(m, src)
}
func (m *Description) XXX_Size() int {
	return m.Size()
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

func (m *Description) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Description) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Description) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Description) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *Description) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func init() {
	proto.RegisterEnum("decimal.validator.v1.BondStatus", BondStatus_name, BondStatus_value)
	proto.RegisterType((*Params)(nil), "decimal.validator.v1.Params")
	proto.RegisterType((*Validator)(nil), "decimal.validator.v1.Validator")
	proto.RegisterType((*Description)(nil), "decimal.validator.v1.Description")
}

func init() {
	proto.RegisterFile("decimal/validator/v1/validator.proto", fileDescriptor_3ae746e987c590f4)
}

var fileDescriptor_3ae746e987c590f4 = []byte{
	// 1081 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0xdb, 0x92, 0x36, 0x93, 0xa6, 0x3f, 0x86, 0xb4, 0x4d, 0x83, 0x88, 0xb3, 0x23, 0xb4,
	0x2a, 0xab, 0xd6, 0xd1, 0x16, 0x24, 0xa0, 0x27, 0xea, 0xa6, 0x85, 0x0a, 0x54, 0xaa, 0x69, 0x8b,
	0x04, 0x97, 0x68, 0x62, 0xcf, 0xa6, 0x43, 0x6c, 0x4f, 0x64, 0x4f, 0xba, 0xcd, 0x9d, 0x03, 0xea,
	0x69, 0x4f, 0x88, 0x4b, 0xa5, 0x95, 0xf8, 0x17, 0x56, 0x70, 0xe0, 0x1f, 0x58, 0x71, 0x5a, 0x71,
	0x42, 0x1c, 0x0c, 0x6a, 0x2f, 0x7b, 0xce, 0x5f, 0x80, 0x3c, 0x33, 0x89, 0xdd, 0x74, 0x2f, 0x7b,
	0x8a, 0xdf, 0xfb, 0xbe, 0xf7, 0x8d, 0xfd, 0xde, 0xfb, 0x46, 0x01, 0x1f, 0xb8, 0xd4, 0x61, 0x3e,
	0xf1, 0x1a, 0x17, 0xc4, 0x63, 0x2e, 0x11, 0x3c, 0x6c, 0x5c, 0x3c, 0x4e, 0x03, 0xab, 0x17, 0x72,
	0xc1, 0x61, 0x59, 0xb3, 0xac, 0x14, 0xb8, 0x78, 0x5c, 0x2d, 0x77, 0x78, 0x87, 0x4b, 0x42, 0x23,
	0x79, 0x52, 0xdc, 0xea, 0x7a, 0x87, 0xf3, 0x8e, 0x47, 0x1b, 0x32, 0x6a, 0xf7, 0x9f, 0x34, 0x48,
	0x30, 0xd0, 0x50, 0x6d, 0x12, 0x72, 0xfb, 0x21, 0x11, 0x8c, 0x07, 0x1a, 0x37, 0x27, 0x71, 0xc1,
	0x7c, 0x1a, 0x09, 0xe2, 0xf7, 0x46, 0xda, 0x0e, 0x8f, 0x7c, 0x1e, 0xb5, 0xd4, 0xa1, 0x2a, 0x50,
	0x10, 0xfa, 0x7d, 0x1a, 0xe4, 0x8f, 0x49, 0x48, 0xfc, 0x08, 0x3a, 0x60, 0xa1, 0x1f, 0xb4, 0x79,
	0xe0, 0xb2, 0xa0, 0xd3, 0x4a, 0x24, 0x2a, 0x46, 0xdd, 0xd8, 0x28, 0x6e, 0xaf, 0x5b, 0x4a, 0xdf,
	0x1a, 0xe9, 0x5b, 0x4d, 0x7d, 0xbe, 0xfd, 0xe0, 0x65, 0x6c, 0xe6, 0x86, 0xb1, 0xb9, 0x32, 0x20,
	0xbe, 0xb7, 0x83, 0xee, 0x96, 0xa3, 0x5f, 0xfe, 0x35, 0x0d, 0x5c, 0x1a, 0x27, 0x4f, 0x99, 0x4f,
	0xe1, 0xe7, 0x60, 0xc1, 0x27, 0x97, 0xad, 0x71, 0x43, 0xa2, 0xca, 0x54, 0xdd, 0xd8, 0x28, 0xd9,
	0xeb, 0xa9, 0xca, 0x5d, 0x1c, 0xe1, 0x92, 0x4f, 0x2e, 0xbf, 0x1d, 0xc7, 0xf0, 0x13, 0x50, 0x4c,
	0x18, 0x34, 0x10, 0x21, 0xa3, 0x51, 0x65, 0x5a, 0x96, 0xaf, 0x0e, 0x63, 0x13, 0xa6, 0xe5, 0x1a,
	0x44, 0x18, 0xf8, 0xe4, 0x72, 0x5f, 0x05, 0xf0, 0x6b, 0x00, 0xcf, 0x59, 0x24, 0x78, 0xc8, 0x1c,
	0xe2, 0x8d, 0xeb, 0x67, 0x64, 0xfd, 0xfb, 0xc3, 0xd8, 0x5c, 0x57, 0xf5, 0xf7, 0x39, 0x08, 0x2f,
	0xa7, 0xc9, 0x91, 0xda, 0x1e, 0x58, 0x4c, 0x4e, 0x72, 0xa9, 0x47, 0x3b, 0xb2, 0x19, 0x51, 0xe5,
	0x1d, 0x29, 0x55, 0x1d, 0xc6, 0xe6, 0x6a, 0xfa, 0x2a, 0x19, 0x02, 0xc2, 0xc9, 0xb7, 0x37, 0xd3,
	0x04, 0xfc, 0x18, 0x80, 0xa4, 0x39, 0x2d, 0x97, 0x06, 0xdc, 0xaf, 0xe4, 0xeb, 0xc6, 0x46, 0xc1,
	0x5e, 0x19, 0xc6, 0xe6, 0xb2, 0xaa, 0x4f, 0x31, 0x84, 0x0b, 0x49, 0xd0, 0x4c, 0x9e, 0x77, 0x66,
	0x5e, 0x3f, 0x37, 0x0d, 0xf4, 0xc7, 0x2c, 0x28, 0x8c, 0xdb, 0x92, 0x74, 0xe5, 0x82, 0x78, 0x2d,
	0xe2, 0xba, 0x21, 0x8d, 0x22, 0x39, 0xb9, 0x42, 0xb6, 0x2b, 0x19, 0x10, 0x61, 0x70, 0x41, 0xbc,
	0x5d, 0x15, 0xc0, 0xef, 0xc0, 0x6c, 0xaf, 0xdf, 0x6e, 0x75, 0xe9, 0x40, 0x4e, 0xa2, 0xb8, 0x5d,
	0xbe, 0x37, 0xee, 0xdd, 0x60, 0x60, 0x3f, 0x1a, 0xc6, 0xe6, 0x82, 0x92, 0xd2, 0x74, 0xf4, 0xe7,
	0x8b, 0xad, 0xb2, 0xde, 0x25, 0x27, 0x1c, 0xf4, 0x04, 0xb7, 0x8e, 0xfb, 0xed, 0xaf, 0xe8, 0x00,
	0xe7, 0x7b, 0xf2, 0x17, 0x1e, 0x80, 0xbc, 0xe0, 0x5d, 0x1a, 0xa8, 0x21, 0x15, 0x6c, 0x2b, 0xd9,
	0x96, 0x7f, 0x62, 0xf3, 0x61, 0x87, 0x89, 0xf3, 0x7e, 0xdb, 0x72, 0xb8, 0xaf, 0x97, 0x51, 0xff,
	0x6c, 0x45, 0x6e, 0xb7, 0x21, 0x06, 0x3d, 0x1a, 0x59, 0x87, 0x81, 0xc0, 0xba, 0x1a, 0x7e, 0x0a,
	0xf2, 0x91, 0x20, 0xa2, 0xaf, 0x86, 0xb5, 0xb0, 0x5d, 0xb7, 0xde, 0xe4, 0x2b, 0xcb, 0xe6, 0x81,
	0x7b, 0x22, 0x79, 0x58, 0xf3, 0x61, 0x1b, 0x00, 0x87, 0xfb, 0x3e, 0x8b, 0x22, 0xc6, 0x03, 0x39,
	0x9f, 0x82, 0x6d, 0xbf, 0xc5, 0x5b, 0x34, 0xa9, 0x33, 0x8c, 0xcd, 0x25, 0xf5, 0xdd, 0x0e, 0xd7,
	0x42, 0x08, 0x67, 0x54, 0xe1, 0x2a, 0xc8, 0xff, 0x40, 0x98, 0x47, 0x5d, 0x39, 0xbf, 0x39, 0xac,
	0x23, 0xf8, 0xa3, 0x01, 0xd6, 0x53, 0x43, 0x38, 0xdc, 0xef, 0x79, 0x34, 0x99, 0xba, 0xb2, 0xd6,
	0xac, 0xec, 0x75, 0xf5, 0x5e, 0xaf, 0x4f, 0x47, 0xd6, 0xb5, 0x37, 0xb5, 0xb7, 0xea, 0x93, 0xde,
	0x9a, 0x90, 0x42, 0xcf, 0x12, 0x9b, 0xad, 0x8d, 0xf1, 0xbd, 0x31, 0x2c, 0x0d, 0x77, 0x00, 0x96,
	0xd2, 0xd2, 0x73, 0xca, 0x3a, 0xe7, 0xa2, 0x32, 0x57, 0x37, 0x36, 0xa6, 0xed, 0xf7, 0x86, 0xb1,
	0xb9, 0x36, 0x29, 0xae, 0x18, 0x08, 0x2f, 0x8e, 0x53, 0x5f, 0xca, 0x0c, 0x6c, 0x81, 0xa2, 0x4b,
	0x23, 0x27, 0x64, 0xbd, 0x44, 0xba, 0x52, 0x90, 0xef, 0xff, 0xe0, 0xcd, 0x93, 0x68, 0xa6, 0x44,
	0xbb, 0xaa, 0x3f, 0x43, 0xef, 0x61, 0x46, 0x03, 0xe1, 0xac, 0x22, 0xec, 0x82, 0x12, 0x71, 0x9c,
	0xbe, 0xdf, 0x0a, 0xe9, 0x53, 0x12, 0xba, 0x51, 0x05, 0xc8, 0x71, 0x1d, 0xbc, 0xdd, 0xd2, 0x0c,
	0x63, 0xb3, 0xac, 0x4e, 0xba, 0x23, 0x86, 0xf0, 0xbc, 0x8c, 0xb1, 0x0a, 0x93, 0x6b, 0x48, 0x21,
	0x63, 0xc7, 0x14, 0xe5, 0x69, 0x99, 0x6b, 0xe8, 0x2e, 0x8e, 0x70, 0x49, 0x25, 0x46, 0xbe, 0xf9,
	0x10, 0xe4, 0x79, 0xe0, 0xb1, 0x80, 0x56, 0xe6, 0x93, 0xb1, 0xdb, 0xcb, 0xc3, 0xd8, 0x2c, 0xa9,
	0x4a, 0x95, 0x47, 0x58, 0x13, 0x76, 0xe0, 0xeb, 0xe7, 0x66, 0xee, 0xaf, 0x17, 0x5b, 0x60, 0x6c,
	0xd7, 0x43, 0xf4, 0xf3, 0x14, 0x28, 0x66, 0xda, 0x04, 0x37, 0xc1, 0xac, 0xcf, 0x03, 0xd6, 0xa5,
	0xa1, 0xf6, 0x2e, 0x4c, 0x0d, 0xa7, 0x01, 0x84, 0x47, 0x14, 0xd8, 0x00, 0x73, 0xcc, 0xa5, 0x81,
	0x60, 0x42, 0xb9, 0xb6, 0x60, 0xbf, 0x3b, 0x8c, 0xcd, 0x45, 0x45, 0x1f, 0x21, 0x08, 0x8f, 0x49,
	0x89, 0xfc, 0x53, 0xda, 0x8e, 0x98, 0xa0, 0xda, 0x8b, 0x19, 0x79, 0x0d, 0x20, 0x3c, 0xa2, 0x24,
	0x3b, 0x13, 0x51, 0xa7, 0x1f, 0x32, 0x31, 0x68, 0x39, 0x3c, 0x10, 0xc4, 0x11, 0xd2, 0x7a, 0x85,
	0xec, 0xce, 0x4c, 0x32, 0x10, 0x5e, 0x1c, 0xa5, 0xf6, 0x54, 0x26, 0x39, 0xd5, 0xa5, 0x82, 0x30,
	0x2f, 0xd2, 0xde, 0xcb, 0x9c, 0xaa, 0x01, 0x84, 0x47, 0x14, 0x75, 0xad, 0x3d, 0xfa, 0xcd, 0x00,
	0x20, 0x75, 0x32, 0xdc, 0x04, 0x6b, 0xf6, 0x37, 0x47, 0xcd, 0xd6, 0xc9, 0xe9, 0xee, 0xe9, 0xd9,
	0x49, 0xeb, 0xec, 0xe8, 0xe4, 0x78, 0x7f, 0xef, 0xf0, 0xe0, 0x70, 0xbf, 0xb9, 0x94, 0xab, 0x2e,
	0x5e, 0x5d, 0xd7, 0x8b, 0x67, 0x41, 0xd4, 0xa3, 0x0e, 0x7b, 0xc2, 0xa8, 0x0b, 0x1f, 0x82, 0xf2,
	0x5d, 0x76, 0x12, 0xed, 0x37, 0x97, 0x8c, 0xea, 0xfc, 0xd5, 0x75, 0x7d, 0xee, 0x4c, 0xee, 0x34,
	0x75, 0xe1, 0x06, 0x58, 0xb9, 0xcf, 0x3b, 0x3c, 0xfa, 0x62, 0x69, 0xaa, 0x5a, 0xba, 0xba, 0xae,
	0x17, 0xce, 0x46, 0xcb, 0x0f, 0x11, 0x80, 0x59, 0xa6, 0xd6, 0x9b, 0xae, 0x82, 0xab, 0xeb, 0x7a,
	0xde, 0x96, 0x6a, 0xd5, 0x99, 0x9f, 0x7e, 0xad, 0xe5, 0xec, 0x93, 0x97, 0x37, 0x35, 0xe3, 0xd5,
	0x4d, 0xcd, 0xf8, 0xef, 0xa6, 0x66, 0x3c, 0xbb, 0xad, 0xe5, 0x5e, 0xdd, 0xd6, 0x72, 0x7f, 0xdf,
	0xd6, 0x72, 0xdf, 0x7f, 0xd6, 0x66, 0xa2, 0xdd, 0x77, 0xba, 0x54, 0x58, 0x3c, 0xec, 0x34, 0xb4,
	0x65, 0x04, 0x25, 0x7e, 0xa3, 0xc3, 0xb7, 0x22, 0x9f, 0x84, 0x62, 0x2b, 0xe0, 0x2e, 0x6d, 0x5c,
	0x66, 0xfe, 0x4e, 0xc8, 0x8d, 0x6e, 0xe7, 0xe5, 0xc5, 0xf0, 0xd1, 0xff, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x2f, 0x53, 0x3e, 0xd5, 0x70, 0x08, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UnbondingTime != that1.UnbondingTime {
		return false
	}
	if this.MaxValidators != that1.MaxValidators {
		return false
	}
	if this.MaxEntries != that1.MaxEntries {
		return false
	}
	if this.HistoricalEntries != that1.HistoricalEntries {
		return false
	}
	if this.MaxDelegations != that1.MaxDelegations {
		return false
	}
	if this.BondDenom != that1.BondDenom {
		return false
	}
	return true
}
func (this *Description) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Description)
	if !ok {
		that2, ok := that.(Description)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Moniker != that1.Moniker {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.Website != that1.Website {
		return false
	}
	if this.SecurityContact != that1.SecurityContact {
		return false
	}
	if this.Details != that1.Details {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondDenom) > 0 {
		i -= len(m.BondDenom)
		copy(dAtA[i:], m.BondDenom)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.BondDenom)))
		i--
		dAtA[i] = 0x32
	}
	if m.MaxDelegations != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.MaxDelegations))
		i--
		dAtA[i] = 0x28
	}
	if m.HistoricalEntries != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.HistoricalEntries))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxEntries != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.MaxEntries))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxValidators != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.MaxValidators))
		i--
		dAtA[i] = 0x10
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.UnbondingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintValidator(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Online {
		i--
		if m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x5a
	}
	{
		size := m.AccumRewards.Size()
		i -= size
		if _, err := m.AccumRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.UnbondingHeight != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.UnbondingHeight))
		i--
		dAtA[i] = 0x40
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UnbondingCompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UnbondingCompletionTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintValidator(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Commission.Size()
		i -= size
		if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Status != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValAddress) > 0 {
		i -= len(m.ValAddress)
		copy(dAtA[i:], m.ValAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.ValAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Description) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingTime)
	n += 1 + l + sovValidator(uint64(l))
	if m.MaxValidators != 0 {
		n += 1 + sovValidator(uint64(m.MaxValidators))
	}
	if m.MaxEntries != 0 {
		n += 1 + sovValidator(uint64(m.MaxEntries))
	}
	if m.HistoricalEntries != 0 {
		n += 1 + sovValidator(uint64(m.HistoricalEntries))
	}
	if m.MaxDelegations != 0 {
		n += 1 + sovValidator(uint64(m.MaxDelegations))
	}
	l = len(m.BondDenom)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovValidator(uint64(l))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovValidator(uint64(l))
	if m.Status != 0 {
		n += 1 + sovValidator(uint64(m.Status))
	}
	l = m.Commission.Size()
	n += 1 + l + sovValidator(uint64(l))
	if m.Jailed {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UnbondingCompletionTime)
	n += 1 + l + sovValidator(uint64(l))
	if m.UnbondingHeight != 0 {
		n += 1 + sovValidator(uint64(m.UnbondingHeight))
	}
	l = m.Description.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.AccumRewards.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.Online {
		n += 2
	}
	return n
}

func (m *Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	return n
}

func sovValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidators", wireType)
			}
			m.MaxValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEntries", wireType)
			}
			m.MaxEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalEntries", wireType)
			}
			m.HistoricalEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoricalEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelegations", wireType)
			}
			m.MaxDelegations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDelegations |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &types.Any{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingCompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UnbondingCompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingHeight", wireType)
			}
			m.UnbondingHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccumRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Description) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Description: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Description: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidator = fmt.Errorf("proto: unexpected end of group")
)
