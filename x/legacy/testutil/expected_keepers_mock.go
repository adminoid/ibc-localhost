// Code generated by MockGen. DO NOT EDIT.
// Source: ./x/legacy/types/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "bitbucket.org/decimalteam/go-smart-node/x/multisig/types"
	types0 "bitbucket.org/decimalteam/go-smart-node/x/nft/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// SendCoinsFromModuleToAccount mocks base method.
func (m *MockBankKeeper) SendCoinsFromModuleToAccount(ctx types1.Context, senderModule string, recipientAddr types1.AccAddress, amt types1.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromModuleToAccount", ctx, senderModule, recipientAddr, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromModuleToAccount indicates an expected call of SendCoinsFromModuleToAccount.
func (mr *MockBankKeeperMockRecorder) SendCoinsFromModuleToAccount(ctx, senderModule, recipientAddr, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromModuleToAccount", reflect.TypeOf((*MockBankKeeper)(nil).SendCoinsFromModuleToAccount), ctx, senderModule, recipientAddr, amt)
}

// MockNftKeeper is a mock of NftKeeper interface.
type MockNftKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockNftKeeperMockRecorder
}

// MockNftKeeperMockRecorder is the mock recorder for MockNftKeeper.
type MockNftKeeperMockRecorder struct {
	mock *MockNftKeeper
}

// NewMockNftKeeper creates a new mock instance.
func NewMockNftKeeper(ctrl *gomock.Controller) *MockNftKeeper {
	mock := &MockNftKeeper{ctrl: ctrl}
	mock.recorder = &MockNftKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNftKeeper) EXPECT() *MockNftKeeperMockRecorder {
	return m.recorder
}

// GetSubTokens mocks base method.
func (m *MockNftKeeper) GetSubTokens(ctx types1.Context, id string) []types0.SubToken {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubTokens", ctx, id)
	ret0, _ := ret[0].([]types0.SubToken)
	return ret0
}

// GetSubTokens indicates an expected call of GetSubTokens.
func (mr *MockNftKeeperMockRecorder) GetSubTokens(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubTokens", reflect.TypeOf((*MockNftKeeper)(nil).GetSubTokens), ctx, id)
}

// GetToken mocks base method.
func (m *MockNftKeeper) GetToken(ctx types1.Context, id string) (types0.Token, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, id)
	ret0, _ := ret[0].(types0.Token)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockNftKeeperMockRecorder) GetToken(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockNftKeeper)(nil).GetToken), ctx, id)
}

// SetSubToken mocks base method.
func (m *MockNftKeeper) SetSubToken(ctx types1.Context, id string, subToken types0.SubToken) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSubToken", ctx, id, subToken)
}

// SetSubToken indicates an expected call of SetSubToken.
func (mr *MockNftKeeperMockRecorder) SetSubToken(ctx, id, subToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubToken", reflect.TypeOf((*MockNftKeeper)(nil).SetSubToken), ctx, id, subToken)
}

// MockMultisigKeeper is a mock of MultisigKeeper interface.
type MockMultisigKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockMultisigKeeperMockRecorder
}

// MockMultisigKeeperMockRecorder is the mock recorder for MockMultisigKeeper.
type MockMultisigKeeperMockRecorder struct {
	mock *MockMultisigKeeper
}

// NewMockMultisigKeeper creates a new mock instance.
func NewMockMultisigKeeper(ctrl *gomock.Controller) *MockMultisigKeeper {
	mock := &MockMultisigKeeper{ctrl: ctrl}
	mock.recorder = &MockMultisigKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultisigKeeper) EXPECT() *MockMultisigKeeperMockRecorder {
	return m.recorder
}

// GetWallet mocks base method.
func (m *MockMultisigKeeper) GetWallet(ctx types1.Context, address string) (types.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, address)
	ret0, _ := ret[0].(types.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockMultisigKeeperMockRecorder) GetWallet(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockMultisigKeeper)(nil).GetWallet), ctx, address)
}

// SetWallet mocks base method.
func (m *MockMultisigKeeper) SetWallet(ctx types1.Context, wallet types.Wallet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWallet", ctx, wallet)
}

// SetWallet indicates an expected call of SetWallet.
func (mr *MockMultisigKeeperMockRecorder) SetWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWallet", reflect.TypeOf((*MockMultisigKeeper)(nil).SetWallet), ctx, wallet)
}
