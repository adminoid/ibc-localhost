// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/legacy/v1/legacy.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Record defines the legacy record containing set of values that should be returned to the actual owner.
type Record struct {
	// legacy_address defines legacy address which is not valid anymore so cannot be used.
	LegacyAddress string `protobuf:"bytes,1,opt,name=legacy_address,json=legacyAddress,proto3" json:"legacy_address,omitempty"`
	// coins defines complete list of tokens to be returned.
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
	// wallets defines complete list of multisig wallets to be returned.
	Wallets []string `protobuf:"bytes,3,rep,name=wallets,proto3" json:"wallets,omitempty"`
	// nfts defines list of token ids to be returned
	NFTs []string `protobuf:"bytes,4,rep,name=nfts,proto3" json:"nfts,omitempty"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_fece5b3848118a62, []int{0}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Record)(nil), "decimal.legacy.v1.Record")
}

func init() { proto.RegisterFile("decimal/legacy/v1/legacy.proto", fileDescriptor_fece5b3848118a62) }

var fileDescriptor_fece5b3848118a62 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x91, 0x3f, 0x4f, 0xf3, 0x30,
	0x10, 0xc6, 0x93, 0xb7, 0x7d, 0x0b, 0x0d, 0x7f, 0x24, 0xa2, 0x0e, 0x69, 0x85, 0x9c, 0x8a, 0x29,
	0x4b, 0x62, 0x02, 0x12, 0x03, 0x0b, 0x22, 0x48, 0x8c, 0x08, 0x05, 0x26, 0x96, 0xca, 0x71, 0x8c,
	0x89, 0x9a, 0xc4, 0x55, 0xec, 0x16, 0xfa, 0x0d, 0x18, 0x19, 0x19, 0x3b, 0x33, 0xf3, 0x21, 0x3a,
	0x56, 0x4c, 0x4c, 0x05, 0xa5, 0x0b, 0x33, 0x9f, 0x00, 0x25, 0x76, 0x27, 0xdf, 0x3d, 0xbf, 0xbb,
	0x7b, 0x4e, 0x3e, 0x03, 0xc4, 0x04, 0x27, 0x19, 0x4a, 0x61, 0x4a, 0x28, 0xc2, 0x53, 0x38, 0xf1,
	0x55, 0xe4, 0x8d, 0x0a, 0x26, 0x98, 0xb9, 0xa7, 0xb8, 0xa7, 0xd4, 0x89, 0xdf, 0xeb, 0x50, 0x46,
	0x59, 0x4d, 0x61, 0x15, 0xc9, 0xc2, 0x5e, 0x17, 0x33, 0x9e, 0x31, 0x3e, 0x90, 0x40, 0x26, 0x0a,
	0x01, 0x99, 0xc1, 0x08, 0x71, 0x02, 0x27, 0x7e, 0x44, 0x04, 0xf2, 0x21, 0x66, 0x49, 0x2e, 0xf9,
	0xc1, 0xaf, 0x6e, 0xb4, 0x42, 0x82, 0x59, 0x11, 0x9b, 0x67, 0xc6, 0xae, 0x34, 0x1a, 0xa0, 0x38,
	0x2e, 0x08, 0xe7, 0x96, 0xde, 0xd7, 0x9d, 0x76, 0x60, 0x7d, 0xbc, 0xbb, 0x1d, 0x35, 0xf4, 0x5c,
	0x92, 0x1b, 0x51, 0x24, 0x39, 0x0d, 0x77, 0x64, 0xbd, 0x12, 0x4d, 0x64, 0xfc, 0xaf, 0x26, 0x73,
	0xeb, 0x5f, 0xbf, 0xe1, 0x6c, 0x1d, 0x75, 0x3d, 0xd5, 0x54, 0x79, 0x7b, 0xca, 0xdb, 0xbb, 0x60,
	0x49, 0x1e, 0x1c, 0xce, 0x97, 0xb6, 0xf6, 0xf6, 0x65, 0x3b, 0x34, 0x11, 0x0f, 0xe3, 0xc8, 0xc3,
	0x2c, 0x53, 0x6b, 0xab, 0xc7, 0xe5, 0xf1, 0x10, 0x8a, 0xe9, 0x88, 0xf0, 0xba, 0x81, 0x87, 0x72,
	0xb2, 0x69, 0x19, 0x1b, 0x8f, 0x28, 0x4d, 0x89, 0xe0, 0x56, 0xa3, 0xdf, 0x70, 0xda, 0xe1, 0x3a,
	0x35, 0xf7, 0x8d, 0x66, 0x7e, 0x2f, 0xb8, 0xd5, 0xac, 0xe4, 0x60, 0xb3, 0x5c, 0xda, 0xcd, 0xab,
	0xcb, 0x5b, 0x1e, 0xd6, 0xea, 0xe9, 0xf6, 0xf3, 0xcc, 0xd6, 0x5e, 0x67, 0xb6, 0xfe, 0x33, 0xb3,
	0xb5, 0xe0, 0x7a, 0x5e, 0x02, 0x7d, 0x51, 0x02, 0xfd, 0xbb, 0x04, 0xfa, 0xcb, 0x0a, 0x68, 0x8b,
	0x15, 0xd0, 0x3e, 0x57, 0x40, 0xbb, 0x3b, 0x89, 0x12, 0x11, 0x8d, 0xf1, 0x90, 0x08, 0x8f, 0x15,
	0x14, 0xaa, 0x03, 0x08, 0x82, 0x32, 0x48, 0x99, 0xcb, 0x33, 0x54, 0x08, 0x37, 0x67, 0x31, 0x81,
	0x4f, 0xeb, 0xa3, 0xd5, 0x4b, 0x46, 0xad, 0xfa, 0x37, 0x8f, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x96, 0x67, 0xe9, 0x35, 0xd3, 0x01, 0x00, 0x00,
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NFTs) > 0 {
		for iNdEx := len(m.NFTs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NFTs[iNdEx])
			copy(dAtA[i:], m.NFTs[iNdEx])
			i = encodeVarintLegacy(dAtA, i, uint64(len(m.NFTs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Wallets) > 0 {
		for iNdEx := len(m.Wallets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Wallets[iNdEx])
			copy(dAtA[i:], m.Wallets[iNdEx])
			i = encodeVarintLegacy(dAtA, i, uint64(len(m.Wallets[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLegacy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.LegacyAddress) > 0 {
		i -= len(m.LegacyAddress)
		copy(dAtA[i:], m.LegacyAddress)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.LegacyAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLegacy(dAtA []byte, offset int, v uint64) int {
	offset -= sovLegacy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LegacyAddress)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovLegacy(uint64(l))
		}
	}
	if len(m.Wallets) > 0 {
		for _, s := range m.Wallets {
			l = len(s)
			n += 1 + l + sovLegacy(uint64(l))
		}
	}
	if len(m.NFTs) > 0 {
		for _, s := range m.NFTs {
			l = len(s)
			n += 1 + l + sovLegacy(uint64(l))
		}
	}
	return n
}

func sovLegacy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLegacy(x uint64) (n int) {
	return sovLegacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegacyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallets = append(m.Wallets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFTs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NFTs = append(m.NFTs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLegacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLegacy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLegacy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLegacy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLegacy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLegacy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLegacy = fmt.Errorf("proto: unexpected end of group")
)
