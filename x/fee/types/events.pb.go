// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/fee/v1/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventUpdateCoinPrices defines event emitted when coin prices are updated.
type EventUpdateCoinPrices struct {
	Oracle string      `protobuf:"bytes,1,opt,name=oracle,proto3" json:"oracle,omitempty"`
	Prices []CoinPrice `protobuf:"bytes,2,rep,name=prices,proto3" json:"prices"`
}

func (m *EventUpdateCoinPrices) Reset()         { *m = EventUpdateCoinPrices{} }
func (m *EventUpdateCoinPrices) String() string { return proto.CompactTextString(m) }
func (*EventUpdateCoinPrices) ProtoMessage()    {}
func (*EventUpdateCoinPrices) Descriptor() ([]byte, []int) {
	return fileDescriptor_b36d3d8d5370b62a, []int{0}
}
func (m *EventUpdateCoinPrices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateCoinPrices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateCoinPrices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateCoinPrices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateCoinPrices.Merge(m, src)
}
func (m *EventUpdateCoinPrices) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateCoinPrices) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateCoinPrices.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateCoinPrices proto.InternalMessageInfo

func (m *EventUpdateCoinPrices) GetOracle() string {
	if m != nil {
		return m.Oracle
	}
	return ""
}

func (m *EventUpdateCoinPrices) GetPrices() []CoinPrice {
	if m != nil {
		return m.Prices
	}
	return nil
}

// EventPayCommission defines event emitted when any commission for a transaction is payed.
type EventPayCommission struct {
	Payer       string                                   `protobuf:"bytes,1,opt,name=payer,proto3" json:"payer,omitempty"`
	Coins       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
	BurnedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=burned_coins,json=burnedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"burned_coins"`
}

func (m *EventPayCommission) Reset()         { *m = EventPayCommission{} }
func (m *EventPayCommission) String() string { return proto.CompactTextString(m) }
func (*EventPayCommission) ProtoMessage()    {}
func (*EventPayCommission) Descriptor() ([]byte, []int) {
	return fileDescriptor_b36d3d8d5370b62a, []int{1}
}
func (m *EventPayCommission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPayCommission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPayCommission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPayCommission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPayCommission.Merge(m, src)
}
func (m *EventPayCommission) XXX_Size() int {
	return m.Size()
}
func (m *EventPayCommission) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPayCommission.DiscardUnknown(m)
}

var xxx_messageInfo_EventPayCommission proto.InternalMessageInfo

func (m *EventPayCommission) GetPayer() string {
	if m != nil {
		return m.Payer
	}
	return ""
}

func (m *EventPayCommission) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *EventPayCommission) GetBurnedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.BurnedCoins
	}
	return nil
}

func init() {
	proto.RegisterType((*EventUpdateCoinPrices)(nil), "decimal.fee.v1.EventUpdateCoinPrices")
	proto.RegisterType((*EventPayCommission)(nil), "decimal.fee.v1.EventPayCommission")
}

func init() { proto.RegisterFile("decimal/fee/v1/events.proto", fileDescriptor_b36d3d8d5370b62a) }

var fileDescriptor_b36d3d8d5370b62a = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xb1, 0x8e, 0xda, 0x30,
	0x1c, 0xc6, 0x13, 0x28, 0x48, 0x35, 0x55, 0x87, 0x88, 0x4a, 0x81, 0x4a, 0x01, 0x31, 0xb1, 0xc4,
	0x86, 0x32, 0x74, 0x6e, 0x50, 0xc7, 0x4a, 0x88, 0xaa, 0x4b, 0x17, 0xe4, 0x24, 0x7f, 0x52, 0x0b,
	0x62, 0x47, 0xb6, 0x41, 0x65, 0xed, 0x13, 0x74, 0xeb, 0x3b, 0x74, 0xee, 0x43, 0x30, 0xa2, 0x4e,
	0x37, 0xdd, 0x9d, 0xe0, 0x45, 0x4e, 0xb1, 0xad, 0x3b, 0xdd, 0x2d, 0xb7, 0xdc, 0x94, 0xfc, 0xf5,
	0x7d, 0xfe, 0xff, 0x3e, 0x7f, 0x46, 0xef, 0x73, 0xc8, 0x58, 0x49, 0xb7, 0x64, 0x0d, 0x40, 0xf6,
	0x53, 0x02, 0x7b, 0xe0, 0x5a, 0xe1, 0x4a, 0x0a, 0x2d, 0x82, 0xb7, 0x4e, 0xc4, 0x6b, 0x00, 0xbc,
	0x9f, 0xf6, 0xbb, 0x85, 0x28, 0x84, 0x91, 0x48, 0xfd, 0x67, 0x5d, 0xfd, 0x5e, 0x26, 0x54, 0x29,
	0xd4, 0xca, 0x0a, 0x76, 0x70, 0x52, 0x64, 0x27, 0x92, 0x52, 0x55, 0x6f, 0x4f, 0x41, 0xd3, 0x29,
	0xc9, 0x04, 0xe3, 0x4e, 0x0f, 0x9f, 0xd0, 0x6b, 0x8e, 0x51, 0x46, 0xbf, 0x7c, 0xf4, 0xee, 0x73,
	0x9d, 0xe5, 0x5b, 0x95, 0x53, 0x0d, 0x73, 0xc1, 0xf8, 0x42, 0xb2, 0x0c, 0x54, 0x30, 0x41, 0x6d,
	0x21, 0x69, 0xb6, 0x85, 0xd0, 0x1f, 0xfa, 0xe3, 0xd7, 0x49, 0xf8, 0xff, 0x5f, 0xdc, 0x75, 0xd4,
	0x4f, 0x79, 0x2e, 0x41, 0xa9, 0xaf, 0x5a, 0x32, 0x5e, 0x2c, 0x9d, 0x2f, 0xf8, 0x88, 0xda, 0x95,
	0x39, 0x1b, 0x36, 0x86, 0xcd, 0x71, 0xe7, 0x43, 0x0f, 0x3f, 0xbe, 0x17, 0xbe, 0xdf, 0x9e, 0xbc,
	0x3a, 0x5e, 0x0f, 0xbc, 0xa5, 0xb3, 0x8f, 0xfe, 0x34, 0x50, 0x60, 0x42, 0x2c, 0xe8, 0x61, 0x2e,
	0xca, 0x92, 0x29, 0xc5, 0x04, 0x0f, 0x30, 0x6a, 0x55, 0xf4, 0x00, 0xf2, 0xd9, 0x00, 0xd6, 0x16,
	0x50, 0xd4, 0xaa, 0xef, 0xfc, 0x80, 0x77, 0xe6, 0xba, 0x15, 0xec, 0x5a, 0x31, 0x19, 0x92, 0x49,
	0x8d, 0xff, 0x7b, 0x33, 0x18, 0x17, 0x4c, 0xff, 0xd8, 0xa5, 0x38, 0x13, 0xa5, 0x2b, 0xd4, 0x7d,
	0x62, 0x95, 0x6f, 0x88, 0x3e, 0x54, 0xa0, 0xcc, 0x01, 0xb5, 0xb4, 0x9b, 0x03, 0x8e, 0xde, 0xa4,
	0x3b, 0xc9, 0x21, 0x5f, 0x59, 0x52, 0xf3, 0xe5, 0x49, 0x1d, 0x0b, 0x30, 0x43, 0xf2, 0xe5, 0x78,
	0x8e, 0xfc, 0xd3, 0x39, 0xf2, 0x6f, 0xcf, 0x91, 0xff, 0xfb, 0x12, 0x79, 0xa7, 0x4b, 0xe4, 0x5d,
	0x5d, 0x22, 0xef, 0xfb, 0x2c, 0x65, 0x3a, 0xdd, 0x65, 0x1b, 0xd0, 0x58, 0xc8, 0x82, 0xb8, 0xa6,
	0x35, 0xd0, 0x92, 0x14, 0x22, 0x56, 0x25, 0x95, 0x3a, 0xe6, 0x22, 0x07, 0xf2, 0xd3, 0x3c, 0xba,
	0x21, 0xa4, 0x6d, 0xf3, 0xe8, 0xb3, 0xbb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x76, 0xf6, 0x8b,
	0x8e, 0x02, 0x00, 0x00,
}

func (m *EventUpdateCoinPrices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateCoinPrices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateCoinPrices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Oracle) > 0 {
		i -= len(m.Oracle)
		copy(dAtA[i:], m.Oracle)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Oracle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPayCommission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPayCommission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPayCommission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BurnedCoins) > 0 {
		for iNdEx := len(m.BurnedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BurnedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Payer) > 0 {
		i -= len(m.Payer)
		copy(dAtA[i:], m.Payer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Payer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventUpdateCoinPrices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Oracle)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventPayCommission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.BurnedCoins) > 0 {
		for _, e := range m.BurnedCoins {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventUpdateCoinPrices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateCoinPrices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateCoinPrices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, CoinPrice{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPayCommission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPayCommission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPayCommission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnedCoins = append(m.BurnedCoins, types.Coin{})
			if err := m.BurnedCoins[len(m.BurnedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
