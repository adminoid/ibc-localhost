// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/fee/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines transaction fees calculation constants for the entire application.
type Params struct {
	// tx common fee depends on raw transaction size in bytes
	TxByteFee github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=tx_byte_fee,json=txByteFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tx_byte_fee"`
	// coin creation special fee depends on coin ticker length
	CoinCreateTicker3 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=coin_create_ticker_3,json=coinCreateTicker3,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_create_ticker_3"`
	CoinCreateTicker4 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=coin_create_ticker_4,json=coinCreateTicker4,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_create_ticker_4"`
	CoinCreateTicker5 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=coin_create_ticker_5,json=coinCreateTicker5,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_create_ticker_5"`
	CoinCreateTicker6 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=coin_create_ticker_6,json=coinCreateTicker6,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_create_ticker_6"`
	CoinCreateTicker7 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=coin_create_ticker_7,json=coinCreateTicker7,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_create_ticker_7"`
	// coin fees
	CoinCreate      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=coin_create,json=coinCreate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_create"`
	CoinUpdate      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=coin_update,json=coinUpdate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_update"`
	CoinSend        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=coin_send,json=coinSend,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_send"`
	CoinSendAdd     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=coin_send_add,json=coinSendAdd,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_send_add"`
	CoinBuy         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,15,opt,name=coin_buy,json=coinBuy,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_buy"`
	CoinSell        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,16,opt,name=coin_sell,json=coinSell,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_sell"`
	CoinRedeemCheck github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,17,opt,name=coin_redeem_check,json=coinRedeemCheck,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_redeem_check"`
	CoinBurn        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,18,opt,name=coin_burn,json=coinBurn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"coin_burn"`
	// multisig fees
	MultisigCreateWallet      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,21,opt,name=multisig_create_wallet,json=multisigCreateWallet,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"multisig_create_wallet"`
	MultisigCreateTransaction github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,22,opt,name=multisig_create_transaction,json=multisigCreateTransaction,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"multisig_create_transaction"`
	MultisigSignTransaction   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,23,opt,name=multisig_sign_transaction,json=multisigSignTransaction,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"multisig_sign_transaction"`
	// nft fees
	NftMintToken     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,31,opt,name=nft_mint_token,json=nftMintToken,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"nft_mint_token"`
	NftUpdateToken   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,32,opt,name=nft_update_token,json=nftUpdateToken,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"nft_update_token"`
	NftUpdateReserve github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,33,opt,name=nft_update_reserve,json=nftUpdateReserve,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"nft_update_reserve"`
	NftSendToken     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,34,opt,name=nft_send_token,json=nftSendToken,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"nft_send_token"`
	NftBurnToken     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,35,opt,name=nft_burn_token,json=nftBurnToken,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"nft_burn_token"`
	// swap fees
	SwapActivateChain   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,41,opt,name=swap_activate_chain,json=swapActivateChain,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"swap_activate_chain"`
	SwapDeactivateChain github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,42,opt,name=swap_deactivate_chain,json=swapDeactivateChain,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"swap_deactivate_chain"`
	SwapInitialize      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,43,opt,name=swap_initialize,json=swapInitialize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"swap_initialize"`
	SwapRedeem          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,44,opt,name=swap_redeem,json=swapRedeem,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"swap_redeem"`
	// validator fees
	ValidatorCreateValidator github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,51,opt,name=validator_create_validator,json=validatorCreateValidator,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_create_validator"`
	ValidatorEditValidator   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,52,opt,name=validator_edit_validator,json=validatorEditValidator,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_edit_validator"`
	ValidatorDelegate        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,53,opt,name=validator_delegate,json=validatorDelegate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_delegate"`
	ValidatorDelegateNFT     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,54,opt,name=validator_delegate_nft,json=validatorDelegateNft,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_delegate_nft"`
	ValidatorRedelegate      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,55,opt,name=validator_redelegate,json=validatorRedelegate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_redelegate"`
	ValidatorRedelegateNFT   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,56,opt,name=validator_redelegate_nft,json=validatorRedelegateNft,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_redelegate_nft"`
	ValidatorUndelegate      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,57,opt,name=validator_undelegate,json=validatorUndelegate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_undelegate"`
	ValidatorUndelegateNFT   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,58,opt,name=validator_undelegate_nft,json=validatorUndelegateNft,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_undelegate_nft"`
	ValidatorSetOnline       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,59,opt,name=validator_set_online,json=validatorSetOnline,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_set_online"`
	ValidatorSetOffline      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,60,opt,name=validator_set_offline,json=validatorSetOffline,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_set_offline"`
	// oracle defines address empowered to update coin prices.
	Oracle string `protobuf:"bytes,777,opt,name=oracle,proto3" json:"oracle,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d019b262529661a, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "decimal.fee.v1.Params")
}

func init() { proto.RegisterFile("decimal/fee/v1/params.proto", fileDescriptor_4d019b262529661a) }

var fileDescriptor_4d019b262529661a = []byte{
	// 997 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x98, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xc7, 0xbd, 0x02, 0x52, 0x32, 0x49, 0xf3, 0x32, 0xb8, 0xee, 0x34, 0x95, 0xec, 0x50, 0x24,
	0xc4, 0x9b, 0x6d, 0x45, 0xce, 0x0b, 0x94, 0x5e, 0xe2, 0x84, 0x4a, 0x1c, 0x5a, 0xc0, 0x71, 0x53,
	0x81, 0x40, 0xcb, 0x7a, 0xf7, 0xd9, 0xcd, 0xe0, 0xf5, 0x8c, 0xb5, 0x3b, 0xeb, 0xc6, 0x15, 0x27,
	0x4e, 0xc0, 0xa9, 0x47, 0x4e, 0x28, 0x1f, 0xa2, 0x1f, 0xa2, 0xc7, 0xaa, 0x27, 0xc4, 0x21, 0x42,
	0xc9, 0x85, 0x8f, 0x81, 0x66, 0x66, 0xbd, 0xeb, 0xd8, 0x98, 0x28, 0x62, 0x4e, 0x89, 0x3d, 0x9b,
	0xdf, 0xef, 0xff, 0x3c, 0x99, 0x79, 0xd6, 0x5e, 0x74, 0xdb, 0x03, 0x97, 0xf6, 0x9c, 0xb0, 0xee,
	0x03, 0xd4, 0x07, 0x1b, 0xf5, 0xbe, 0x13, 0x39, 0xbd, 0xb8, 0xd6, 0x8f, 0xb8, 0xe0, 0x78, 0x29,
	0x5d, 0xac, 0xf9, 0x00, 0xb5, 0xc1, 0xc6, 0x5a, 0x31, 0xe0, 0x01, 0x57, 0x4b, 0x75, 0xf9, 0x9b,
	0xbe, 0x6a, 0xed, 0x96, 0xcb, 0xe3, 0x1e, 0x8f, 0x6d, 0xbd, 0xa0, 0x5f, 0xe8, 0xa5, 0x3b, 0xbf,
	0xaf, 0xa3, 0xb9, 0x2f, 0x15, 0x11, 0x7f, 0x8b, 0x16, 0xc4, 0xb1, 0xdd, 0x19, 0x0a, 0xb0, 0x7d,
	0x00, 0x62, 0xad, 0x5b, 0xef, 0xcd, 0x37, 0xef, 0xbd, 0x38, 0xad, 0x14, 0xfe, 0x3c, 0xad, 0xbc,
	0x1b, 0x50, 0x71, 0x94, 0x74, 0x6a, 0x2e, 0xef, 0xa5, 0x80, 0xf4, 0x47, 0x35, 0xf6, 0xba, 0x75,
	0x31, 0xec, 0x43, 0x5c, 0xdb, 0x07, 0xf7, 0xd5, 0xf3, 0x2a, 0x4a, 0xf9, 0xfb, 0xe0, 0xb6, 0xe6,
	0xc5, 0x71, 0x73, 0x28, 0xe0, 0x3e, 0x00, 0xfe, 0xc9, 0x42, 0x45, 0x97, 0x53, 0x66, 0xbb, 0x11,
	0x38, 0x02, 0x6c, 0x41, 0xdd, 0x2e, 0x44, 0x76, 0x83, 0xbc, 0xa6, 0x3c, 0x5f, 0x5d, 0xcd, 0x73,
	0x76, 0x5a, 0x59, 0xdd, 0xe3, 0x94, 0xed, 0x29, 0x58, 0x5b, 0xb1, 0x1a, 0x13, 0xf2, 0x55, 0x77,
	0xf2, 0x82, 0x59, 0x21, 0x36, 0xc9, 0xeb, 0xa6, 0x42, 0x6c, 0x5e, 0x16, 0x62, 0x73, 0x56, 0x88,
	0x2d, 0xf2, 0x86, 0xa9, 0x10, 0x5b, 0x97, 0x85, 0xd8, 0x9a, 0x15, 0x62, 0x9b, 0xcc, 0x99, 0x0a,
	0xb1, 0x7d, 0x59, 0x88, 0xed, 0x59, 0x21, 0x76, 0xc8, 0x35, 0x53, 0x21, 0x76, 0x2e, 0x0b, 0xb1,
	0x83, 0xbf, 0x43, 0x0b, 0x63, 0x19, 0xc8, 0x82, 0x81, 0x6d, 0x8f, 0x72, 0x4b, 0x86, 0x4f, 0xfa,
	0x9e, 0xc4, 0x2f, 0x9a, 0xc2, 0x3f, 0x52, 0x3c, 0xfc, 0x35, 0x9a, 0x57, 0xf8, 0x18, 0x98, 0x47,
	0xae, 0x1b, 0x80, 0xbf, 0x29, 0x71, 0x07, 0xc0, 0x3c, 0xfc, 0x3d, 0xba, 0x9e, 0xa1, 0x6d, 0xc7,
	0xf3, 0xc8, 0x92, 0x01, 0xfc, 0xc2, 0x08, 0xbf, 0xeb, 0x79, 0xf8, 0x31, 0x52, 0x36, 0xbb, 0x93,
	0x0c, 0xc9, 0xb2, 0x01, 0xf8, 0x35, 0x49, 0x6b, 0x26, 0xc3, 0xb1, 0xae, 0x84, 0x21, 0x59, 0x31,
	0xd7, 0x95, 0x30, 0xc4, 0x47, 0x48, 0xed, 0x21, 0x3b, 0x02, 0x0f, 0xa0, 0x67, 0xbb, 0x47, 0xe0,
	0x76, 0xc9, 0xaa, 0x01, 0xc5, 0xb2, 0xc4, 0xb6, 0x14, 0x75, 0x4f, 0x42, 0xb3, 0x22, 0x3a, 0x49,
	0xc4, 0x08, 0x36, 0x55, 0x44, 0x33, 0x89, 0x18, 0x8e, 0x50, 0xa9, 0x97, 0x84, 0x82, 0xc6, 0x34,
	0x18, 0x9d, 0xbd, 0x27, 0x4e, 0x18, 0x82, 0x20, 0x37, 0x0c, 0x78, 0x8a, 0x23, 0xb6, 0x3e, 0x02,
	0x8f, 0x15, 0x19, 0xff, 0x88, 0x6e, 0x4f, 0x3a, 0x45, 0xe4, 0xb0, 0xd8, 0x71, 0x05, 0xe5, 0x8c,
	0x94, 0x0c, 0x88, 0x6f, 0x5d, 0x14, 0xb7, 0x73, 0x3c, 0x3e, 0x46, 0xd9, 0xa2, 0x1d, 0xd3, 0x80,
	0x5d, 0x70, 0xdf, 0x34, 0xe0, 0xbe, 0x39, 0xc2, 0x1f, 0xd0, 0x80, 0x8d, 0x9b, 0x3b, 0x68, 0x89,
	0xf9, 0xc2, 0xee, 0x51, 0x26, 0x6c, 0xc1, 0xbb, 0xc0, 0x48, 0xc5, 0x80, 0x6e, 0x91, 0xf9, 0xe2,
	0x01, 0x65, 0xa2, 0x2d, 0x89, 0xd8, 0x47, 0x2b, 0xd2, 0xa1, 0x67, 0x4c, 0x6a, 0x59, 0x37, 0x60,
	0x91, 0xc9, 0xf5, 0xa0, 0xd1, 0x9e, 0x1f, 0x10, 0x1e, 0xf3, 0x44, 0x10, 0x43, 0x34, 0x00, 0xf2,
	0xb6, 0x01, 0xd3, 0x4a, 0x66, 0x6a, 0x69, 0xea, 0xa8, 0x6f, 0x6a, 0xfa, 0xe8, 0x8a, 0xee, 0x18,
	0xea, 0x9b, 0x1c, 0x3f, 0xba, 0x9e, 0xd4, 0x21, 0x4f, 0x58, 0xea, 0x78, 0xc7, 0x90, 0x43, 0x1e,
	0x33, 0xed, 0x08, 0xd1, 0x5b, 0xf1, 0x13, 0xa7, 0x6f, 0xcb, 0xed, 0x30, 0x90, 0x6d, 0x73, 0x8f,
	0x1c, 0xca, 0xc8, 0xfb, 0x06, 0x44, 0xab, 0x12, 0xbc, 0x9b, 0x72, 0xf7, 0x24, 0x16, 0xf7, 0xd1,
	0x0d, 0x65, 0xf3, 0x60, 0xc2, 0xf7, 0x81, 0x01, 0x9f, 0x2a, 0x64, 0x3f, 0x23, 0x6b, 0x23, 0xa0,
	0x65, 0x65, 0xa4, 0x8c, 0x0a, 0xea, 0x84, 0xf4, 0x29, 0x90, 0x0f, 0x4d, 0x6c, 0x3d, 0x09, 0xfd,
	0x3c, 0x63, 0xca, 0xfb, 0xa8, 0xd2, 0xe8, 0xb9, 0x4b, 0x3e, 0x32, 0x71, 0x1f, 0x95, 0x40, 0x3d,
	0x71, 0xf1, 0x53, 0xb4, 0x36, 0x70, 0x42, 0xea, 0x39, 0x82, 0x47, 0xa3, 0xf1, 0x94, 0xbd, 0x41,
	0x1a, 0x06, 0x6c, 0x24, 0xc3, 0xe9, 0xe9, 0x74, 0x38, 0x7a, 0x89, 0x07, 0x28, 0x5f, 0xb3, 0xc1,
	0xa3, 0x62, 0xcc, 0xbc, 0x69, 0xc0, 0x5c, 0xca, 0x70, 0x9f, 0x79, 0x54, 0xe4, 0xde, 0x2e, 0xc2,
	0xb9, 0xd7, 0x83, 0x10, 0x02, 0xf9, 0x09, 0x65, 0xcb, 0xc4, 0xc6, 0xcc, 0xb8, 0xfb, 0x29, 0x16,
	0xff, 0x6a, 0xa1, 0xd2, 0xb4, 0xcd, 0x66, 0xbe, 0x20, 0xdb, 0xca, 0xd8, 0xbe, 0xf2, 0xa7, 0xbd,
	0xe2, 0xe1, 0xa4, 0xe5, 0xe1, 0xfd, 0xf6, 0xe4, 0xbd, 0x68, 0x2a, 0xc9, 0x43, 0x5f, 0x60, 0x8e,
	0xf2, 0xf7, 0xd5, 0x8e, 0x4a, 0x6b, 0xdf, 0x31, 0x71, 0x48, 0x32, 0x72, 0x2b, 0x03, 0xe3, 0x67,
	0xd6, 0xf8, 0xff, 0x38, 0x37, 0xaa, 0xfa, 0x3f, 0x56, 0xd6, 0xc3, 0x2b, 0xd7, 0x5f, 0x3a, 0x9c,
	0x36, 0x4d, 0x77, 0xa0, 0xf4, 0x2f, 0x79, 0xa6, 0x7a, 0x90, 0xb0, 0xac, 0x07, 0x9f, 0x18, 0xed,
	0xc1, 0x23, 0x36, 0xa3, 0x07, 0xb9, 0x51, 0xf5, 0xe0, 0xee, 0xff, 0xee, 0x41, 0x6e, 0xfa, 0xaf,
	0x1e, 0x8c, 0x5d, 0xe5, 0x0b, 0xcc, 0xc6, 0x7b, 0x10, 0x83, 0xb0, 0x39, 0x0b, 0x29, 0x03, 0xf2,
	0xa9, 0x81, 0x1e, 0xe4, 0x67, 0xeb, 0x00, 0xc4, 0x17, 0x8a, 0x2b, 0xa7, 0xf3, 0x84, 0xcf, 0xf7,
	0x95, 0xf0, 0x9e, 0xd1, 0xa6, 0x4b, 0xa1, 0x06, 0xe3, 0x0d, 0x34, 0xc7, 0x23, 0xc7, 0x0d, 0x81,
	0xfc, 0xa2, 0xbf, 0xd9, 0x91, 0x57, 0xcf, 0xab, 0xc5, 0xf4, 0xaf, 0x76, 0x3d, 0x2f, 0x82, 0x38,
	0x3e, 0x10, 0x11, 0x65, 0x41, 0x2b, 0xbd, 0xf0, 0xee, 0xe2, 0xcf, 0x27, 0x95, 0xc2, 0x6f, 0x27,
	0x15, 0xeb, 0xef, 0x93, 0x8a, 0xd5, 0x7c, 0xf0, 0xe2, 0xac, 0x6c, 0xbd, 0x3c, 0x2b, 0x5b, 0x7f,
	0x9d, 0x95, 0xad, 0x67, 0xe7, 0xe5, 0xc2, 0xcb, 0xf3, 0x72, 0xe1, 0x8f, 0xf3, 0x72, 0xe1, 0x9b,
	0x46, 0x87, 0x8a, 0x4e, 0xe2, 0x76, 0x41, 0xd4, 0x78, 0x14, 0xd4, 0xd3, 0x27, 0x11, 0x02, 0x9c,
	0x5e, 0x3d, 0xe0, 0xd5, 0xb8, 0xe7, 0x44, 0xa2, 0xca, 0xb8, 0x07, 0xf5, 0x63, 0xf5, 0xe8, 0x42,
	0xc5, 0xee, 0xcc, 0xa9, 0xc7, 0x0e, 0x8d, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x96, 0x82, 0xae,
	0xb4, 0xd6, 0x10, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TxByteFee.Equal(that1.TxByteFee) {
		return false
	}
	if !this.CoinCreateTicker3.Equal(that1.CoinCreateTicker3) {
		return false
	}
	if !this.CoinCreateTicker4.Equal(that1.CoinCreateTicker4) {
		return false
	}
	if !this.CoinCreateTicker5.Equal(that1.CoinCreateTicker5) {
		return false
	}
	if !this.CoinCreateTicker6.Equal(that1.CoinCreateTicker6) {
		return false
	}
	if !this.CoinCreateTicker7.Equal(that1.CoinCreateTicker7) {
		return false
	}
	if !this.CoinCreate.Equal(that1.CoinCreate) {
		return false
	}
	if !this.CoinUpdate.Equal(that1.CoinUpdate) {
		return false
	}
	if !this.CoinSend.Equal(that1.CoinSend) {
		return false
	}
	if !this.CoinSendAdd.Equal(that1.CoinSendAdd) {
		return false
	}
	if !this.CoinBuy.Equal(that1.CoinBuy) {
		return false
	}
	if !this.CoinSell.Equal(that1.CoinSell) {
		return false
	}
	if !this.CoinRedeemCheck.Equal(that1.CoinRedeemCheck) {
		return false
	}
	if !this.CoinBurn.Equal(that1.CoinBurn) {
		return false
	}
	if !this.MultisigCreateWallet.Equal(that1.MultisigCreateWallet) {
		return false
	}
	if !this.MultisigCreateTransaction.Equal(that1.MultisigCreateTransaction) {
		return false
	}
	if !this.MultisigSignTransaction.Equal(that1.MultisigSignTransaction) {
		return false
	}
	if !this.NftMintToken.Equal(that1.NftMintToken) {
		return false
	}
	if !this.NftUpdateToken.Equal(that1.NftUpdateToken) {
		return false
	}
	if !this.NftUpdateReserve.Equal(that1.NftUpdateReserve) {
		return false
	}
	if !this.NftSendToken.Equal(that1.NftSendToken) {
		return false
	}
	if !this.NftBurnToken.Equal(that1.NftBurnToken) {
		return false
	}
	if !this.SwapActivateChain.Equal(that1.SwapActivateChain) {
		return false
	}
	if !this.SwapDeactivateChain.Equal(that1.SwapDeactivateChain) {
		return false
	}
	if !this.SwapInitialize.Equal(that1.SwapInitialize) {
		return false
	}
	if !this.SwapRedeem.Equal(that1.SwapRedeem) {
		return false
	}
	if !this.ValidatorCreateValidator.Equal(that1.ValidatorCreateValidator) {
		return false
	}
	if !this.ValidatorEditValidator.Equal(that1.ValidatorEditValidator) {
		return false
	}
	if !this.ValidatorDelegate.Equal(that1.ValidatorDelegate) {
		return false
	}
	if !this.ValidatorDelegateNFT.Equal(that1.ValidatorDelegateNFT) {
		return false
	}
	if !this.ValidatorRedelegate.Equal(that1.ValidatorRedelegate) {
		return false
	}
	if !this.ValidatorRedelegateNFT.Equal(that1.ValidatorRedelegateNFT) {
		return false
	}
	if !this.ValidatorUndelegate.Equal(that1.ValidatorUndelegate) {
		return false
	}
	if !this.ValidatorUndelegateNFT.Equal(that1.ValidatorUndelegateNFT) {
		return false
	}
	if !this.ValidatorSetOnline.Equal(that1.ValidatorSetOnline) {
		return false
	}
	if !this.ValidatorSetOffline.Equal(that1.ValidatorSetOffline) {
		return false
	}
	if this.Oracle != that1.Oracle {
		return false
	}
	if !this.EvmGasPrice.Equal(that1.EvmGasPrice) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Oracle) > 0 {
		i -= len(m.Oracle)
		copy(dAtA[i:], m.Oracle)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Oracle)))
		i--
		dAtA[i] = 0x30
		i--
		dAtA[i] = 0xca
	}
	{
		size := m.ValidatorSetOffline.Size()
		i -= size
		if _, err := m.ValidatorSetOffline.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xe2
	{
		size := m.ValidatorSetOnline.Size()
		i -= size
		if _, err := m.ValidatorSetOnline.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xda
	{
		size := m.ValidatorUndelegateNFT.Size()
		i -= size
		if _, err := m.ValidatorUndelegateNFT.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xd2
	{
		size := m.ValidatorUndelegate.Size()
		i -= size
		if _, err := m.ValidatorUndelegate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xca
	{
		size := m.ValidatorRedelegateNFT.Size()
		i -= size
		if _, err := m.ValidatorRedelegateNFT.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xc2
	{
		size := m.ValidatorRedelegate.Size()
		i -= size
		if _, err := m.ValidatorRedelegate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xba
	{
		size := m.ValidatorDelegateNFT.Size()
		i -= size
		if _, err := m.ValidatorDelegateNFT.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xb2
	{
		size := m.ValidatorDelegate.Size()
		i -= size
		if _, err := m.ValidatorDelegate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xaa
	{
		size := m.ValidatorEditValidator.Size()
		i -= size
		if _, err := m.ValidatorEditValidator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xa2
	{
		size := m.ValidatorCreateValidator.Size()
		i -= size
		if _, err := m.ValidatorCreateValidator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x9a
	{
		size := m.SwapRedeem.Size()
		i -= size
		if _, err := m.SwapRedeem.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe2
	{
		size := m.SwapInitialize.Size()
		i -= size
		if _, err := m.SwapInitialize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xda
	{
		size := m.SwapDeactivateChain.Size()
		i -= size
		if _, err := m.SwapDeactivateChain.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xd2
	{
		size := m.SwapActivateChain.Size()
		i -= size
		if _, err := m.SwapActivateChain.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xca
	{
		size := m.NftBurnToken.Size()
		i -= size
		if _, err := m.NftBurnToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	{
		size := m.NftSendToken.Size()
		i -= size
		if _, err := m.NftSendToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x92
	{
		size := m.NftUpdateReserve.Size()
		i -= size
		if _, err := m.NftUpdateReserve.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x8a
	{
		size := m.NftUpdateToken.Size()
		i -= size
		if _, err := m.NftUpdateToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x82
	{
		size := m.NftMintToken.Size()
		i -= size
		if _, err := m.NftMintToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	{
		size := m.MultisigSignTransaction.Size()
		i -= size
		if _, err := m.MultisigSignTransaction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size := m.MultisigCreateTransaction.Size()
		i -= size
		if _, err := m.MultisigCreateTransaction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size := m.MultisigCreateWallet.Size()
		i -= size
		if _, err := m.MultisigCreateWallet.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	{
		size := m.CoinBurn.Size()
		i -= size
		if _, err := m.CoinBurn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size := m.CoinRedeemCheck.Size()
		i -= size
		if _, err := m.CoinRedeemCheck.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.CoinSell.Size()
		i -= size
		if _, err := m.CoinSell.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.CoinBuy.Size()
		i -= size
		if _, err := m.CoinBuy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.CoinSendAdd.Size()
		i -= size
		if _, err := m.CoinSendAdd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.CoinSend.Size()
		i -= size
		if _, err := m.CoinSend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.CoinUpdate.Size()
		i -= size
		if _, err := m.CoinUpdate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.CoinCreate.Size()
		i -= size
		if _, err := m.CoinCreate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.CoinCreateTicker7.Size()
		i -= size
		if _, err := m.CoinCreateTicker7.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.CoinCreateTicker6.Size()
		i -= size
		if _, err := m.CoinCreateTicker6.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.CoinCreateTicker5.Size()
		i -= size
		if _, err := m.CoinCreateTicker5.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.CoinCreateTicker4.Size()
		i -= size
		if _, err := m.CoinCreateTicker4.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CoinCreateTicker3.Size()
		i -= size
		if _, err := m.CoinCreateTicker3.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TxByteFee.Size()
		i -= size
		if _, err := m.TxByteFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TxByteFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CoinCreateTicker3.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CoinCreateTicker4.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CoinCreateTicker5.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CoinCreateTicker6.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CoinCreateTicker7.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CoinCreate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CoinUpdate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CoinSend.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CoinSendAdd.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CoinBuy.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.CoinSell.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.CoinRedeemCheck.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.CoinBurn.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.MultisigCreateWallet.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.MultisigCreateTransaction.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.MultisigSignTransaction.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.NftMintToken.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.NftUpdateToken.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.NftUpdateReserve.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.NftSendToken.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.NftBurnToken.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.SwapActivateChain.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.SwapDeactivateChain.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.SwapInitialize.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.SwapRedeem.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ValidatorCreateValidator.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ValidatorEditValidator.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ValidatorDelegate.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ValidatorDelegateNFT.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ValidatorRedelegate.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ValidatorRedelegateNFT.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ValidatorUndelegate.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ValidatorUndelegateNFT.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ValidatorSetOnline.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ValidatorSetOffline.Size()
	n += 2 + l + sovParams(uint64(l))
	l = len(m.Oracle)
	if l > 0 {
		n += 2 + l + sovParams(uint64(l))
	}
	l = m.EvmGasPrice.Size()
	n += 2 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxByteFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxByteFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreateTicker3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinCreateTicker3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreateTicker4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinCreateTicker4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreateTicker5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinCreateTicker5.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreateTicker6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinCreateTicker6.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreateTicker7", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinCreateTicker7.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinCreate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinUpdate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinSend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinSend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinSendAdd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinSendAdd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinBuy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinBuy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinSell", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinSell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinRedeemCheck", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinRedeemCheck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinBurn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinBurn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigCreateWallet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MultisigCreateWallet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigCreateTransaction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MultisigCreateTransaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigSignTransaction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MultisigSignTransaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftMintToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftMintToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftUpdateToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftUpdateToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftUpdateReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftUpdateReserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSendToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftSendToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftBurnToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftBurnToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapActivateChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapActivateChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapDeactivateChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapDeactivateChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapInitialize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapInitialize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapRedeem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapRedeem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCreateValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorCreateValidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorEditValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorEditValidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDelegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorDelegate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDelegateNFT", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorDelegateNFT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorRedelegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorRedelegate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorRedelegateNFT", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorRedelegateNFT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorUndelegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorUndelegate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorUndelegateNFT", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorUndelegateNFT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetOnline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorSetOnline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetOffline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorSetOffline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 777:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
