// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/fee/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines calculation constants for the module.
// Naming convention: <module_name><transaction_as_verb><something_additional>
type Params struct {
	// coin transactions fees
	CoinSend              uint64 `protobuf:"varint,1,opt,name=coinSend,proto3" json:"coin_send" yaml:"coin_send"`
	CoinSendMultiAddition uint64 `protobuf:"varint,2,opt,name=coinSendMultiAddition,proto3" json:"coin_send_multi_addition" yaml:"coin_send_multi_addition"`
	CoinBuy               uint64 `protobuf:"varint,3,opt,name=coinBuy,proto3" json:"coin_buy" yaml:"coin_buy"`
	CoinSell              uint64 `protobuf:"varint,4,opt,name=coinSell,proto3" json:"coin_sell" yaml:"coin_sell"`
	// common transaction commission
	CoinCreate uint64 `protobuf:"varint,5,opt,name=coinCreate,proto3" json:"coin_create" yaml:"coin_create"`
	// special commission depends on coin symbol length
	CoinCreateLength3     uint64 `protobuf:"varint,6,opt,name=coinCreateLength3,proto3" json:"coin_create_length_3" yaml:"coin_create_length_3"`
	CoinCreateLength4     uint64 `protobuf:"varint,7,opt,name=coinCreateLength4,proto3" json:"coin_create_length_4" yaml:"coin_create_length_4"`
	CoinCreateLength5     uint64 `protobuf:"varint,8,opt,name=coinCreateLength5,proto3" json:"coin_create_length_5" yaml:"coin_create_length_5"`
	CoinCreateLength6     uint64 `protobuf:"varint,9,opt,name=coinCreateLength6,proto3" json:"coin_create_length_6" yaml:"coin_create_length_6"`
	CoinCreateLengthOther uint64 `protobuf:"varint,10,opt,name=coinCreateLengthOther,proto3" json:"coin_create_length_other" yaml:"coin_create_length_other"`
	// multisignature wallets
	MultisigCreateWallet      uint64 `protobuf:"varint,11,opt,name=multisigCreateWallet,proto3" json:"multisig_create_wallet" yaml:"multisig_create_wallet"`
	MultisigCreateTransaction uint64 `protobuf:"varint,12,opt,name=multisigCreateTransaction,proto3" json:"multisig_create_transaction" yaml:"multisig_create_transaction"`
	MultisigSignTransaction   uint64 `protobuf:"varint,13,opt,name=multisigSignTransaction,proto3" json:"multisig_sign_transaction" yaml:"multisig_sign_transaction"`
	// validator operations
	ValidatorDeclareCandidate uint64 `protobuf:"varint,14,opt,name=validatorDeclareCandidate,proto3" json:"validator_declare_candidate" yaml:"validator_declare_candidate"`
	ValidatorEditCandidate    uint64 `protobuf:"varint,15,opt,name=validatorEditCandidate,proto3" json:"validator_edit_candidate" yaml:"validator_edit_candidate"`
	ValidatorDelegate         uint64 `protobuf:"varint,16,opt,name=validatorDelegate,proto3" json:"validator_delegate" yaml:"validator_delegate"`
	ValidatorUnbond           uint64 `protobuf:"varint,17,opt,name=validatorUnbond,proto3" json:"validator_unbond" yaml:"validator_unbond"`
	ValidatorSetOnline        uint64 `protobuf:"varint,18,opt,name=validatorSetOnline,proto3" json:"validator_set_online" yaml:"validator_set_online"`
	ValidatorSetOffline       uint64 `protobuf:"varint,19,opt,name=validatorSetOffline,proto3" json:"validator_set_offline" yaml:"validator_set_offline"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d019b262529661a, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "decimal.fee.v1.Params")
}

func init() { proto.RegisterFile("decimal/fee/v1/params.proto", fileDescriptor_4d019b262529661a) }

var fileDescriptor_4d019b262529661a = []byte{
	// 777 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x96, 0xcb, 0x4f, 0xdb, 0x4a,
	0x14, 0xc6, 0x93, 0x7b, 0xb9, 0x3c, 0x06, 0x2e, 0x81, 0xe1, 0x65, 0x4a, 0x9b, 0xa1, 0x23, 0x55,
	0xea, 0x86, 0x58, 0x28, 0x8f, 0x0a, 0xaa, 0xaa, 0x02, 0xca, 0xae, 0x88, 0xca, 0xb4, 0xaa, 0xda,
	0x8d, 0x35, 0x89, 0x27, 0xc6, 0x62, 0x62, 0x23, 0x7b, 0x02, 0x8d, 0xba, 0xec, 0xa6, 0xcb, 0x2e,
	0xbb, 0x64, 0xd7, 0x7f, 0xa5, 0x4b, 0x96, 0x5d, 0x8d, 0x2a, 0xd8, 0x54, 0x5e, 0xfa, 0x2f, 0xa8,
	0x3c, 0x4e, 0x6c, 0xc7, 0x71, 0xb2, 0x33, 0xe7, 0xfb, 0xe6, 0xfb, 0x9d, 0x33, 0x3a, 0xd8, 0x01,
	0x5b, 0x06, 0x6d, 0x59, 0x1d, 0xc2, 0xd4, 0x36, 0xa5, 0xea, 0xd5, 0xae, 0x7a, 0x49, 0x5c, 0xd2,
	0xf1, 0x2a, 0x97, 0xae, 0xc3, 0x1d, 0xb8, 0xd8, 0x17, 0x2b, 0x6d, 0x4a, 0x2b, 0x57, 0xbb, 0x0f,
	0x56, 0x4d, 0xc7, 0x74, 0xa4, 0xa4, 0x86, 0x4f, 0x91, 0x0b, 0xff, 0x28, 0x81, 0xe9, 0x37, 0xf2,
	0x18, 0x7c, 0x01, 0x66, 0x5b, 0x8e, 0x65, 0x9f, 0x51, 0xdb, 0x50, 0x8a, 0xdb, 0xc5, 0xa7, 0x53,
	0x87, 0x8f, 0x7d, 0x81, 0xe6, 0xc2, 0x9a, 0xee, 0x51, 0xdb, 0x08, 0x04, 0x5a, 0xea, 0x91, 0x0e,
	0xdb, 0xc7, 0x71, 0x09, 0x6b, 0xf1, 0x11, 0xd8, 0x05, 0x6b, 0x83, 0xe7, 0x93, 0x2e, 0xe3, 0xd6,
	0x81, 0x61, 0x58, 0xdc, 0x72, 0x6c, 0xe5, 0x1f, 0x99, 0xf5, 0xd2, 0x17, 0x48, 0x89, 0x0f, 0xea,
	0x9d, 0xd0, 0xa2, 0x93, 0xbe, 0x27, 0x10, 0x08, 0x65, 0xa2, 0x33, 0x0e, 0xac, 0xe5, 0xa7, 0xc3,
	0x3d, 0x30, 0x13, 0x0a, 0x87, 0xdd, 0x9e, 0xf2, 0xaf, 0x04, 0x21, 0x5f, 0x20, 0xd9, 0x95, 0xde,
	0xec, 0xf6, 0x02, 0x81, 0x4a, 0xa9, 0xe0, 0x66, 0xb7, 0x87, 0xb5, 0x81, 0x3f, 0x19, 0x98, 0x31,
	0x65, 0x6a, 0x64, 0x60, 0xc6, 0x46, 0x06, 0x66, 0x2c, 0x1e, 0x98, 0x31, 0x78, 0x0c, 0x40, 0xf8,
	0x7c, 0xe4, 0x52, 0xc2, 0xa9, 0xf2, 0x9f, 0x0c, 0x78, 0xe2, 0x0b, 0x34, 0x2f, 0xdd, 0x2d, 0x59,
	0x0e, 0x04, 0x82, 0xa9, 0x88, 0xa8, 0x88, 0xb5, 0xd4, 0x41, 0x48, 0xc1, 0x72, 0xf2, 0xd7, 0x6b,
	0x6a, 0x9b, 0xfc, 0xbc, 0xaa, 0x4c, 0xcb, 0xb4, 0x67, 0xbe, 0x40, 0xab, 0xa9, 0x83, 0x3a, 0x93,
	0xb2, 0x5e, 0x0d, 0x04, 0xda, 0x1a, 0x89, 0x8d, 0x55, 0xac, 0x8d, 0x26, 0xe6, 0x61, 0x6a, 0xca,
	0xcc, 0x44, 0x4c, 0x6d, 0x22, 0xa6, 0x96, 0x83, 0xa9, 0xe5, 0x61, 0xea, 0xca, 0xec, 0x44, 0x4c,
	0x7d, 0x22, 0xa6, 0x9e, 0x83, 0xa9, 0xe7, 0x61, 0x1a, 0xca, 0xdc, 0x44, 0x4c, 0x63, 0x22, 0xa6,
	0x91, 0x83, 0x69, 0x0c, 0x76, 0x3a, 0x5d, 0x3c, 0xe5, 0xe7, 0xd4, 0x55, 0x40, 0x66, 0xa7, 0x87,
	0xc3, 0x9c, 0xd0, 0x93, 0xd9, 0xe9, 0x1c, 0x47, 0x7f, 0xa7, 0x47, 0xd2, 0xa1, 0x03, 0x56, 0xe5,
	0xf6, 0x7b, 0x96, 0x19, 0x89, 0xef, 0x09, 0x63, 0x94, 0x2b, 0xf3, 0x92, 0xfa, 0xdc, 0x17, 0x68,
	0x7d, 0xa0, 0x0f, 0x72, 0xaf, 0xa5, 0x23, 0x10, 0xe8, 0x51, 0xc4, 0xcc, 0xd7, 0xb1, 0x96, 0x1b,
	0x0c, 0xbf, 0x14, 0xc1, 0xe6, 0xb0, 0xf0, 0xd6, 0x25, 0xb6, 0x47, 0x5a, 0xf2, 0x1f, 0x78, 0x41,
	0x62, 0x8f, 0x7d, 0x81, 0xb6, 0xb2, 0xb1, 0x3c, 0xb1, 0x05, 0x02, 0xe1, 0x7c, 0x76, 0xca, 0x84,
	0xb5, 0xf1, 0x1c, 0xf8, 0x19, 0x6c, 0x0c, 0xc4, 0x33, 0xcb, 0xb4, 0xd3, 0x2d, 0xfc, 0x2f, 0x5b,
	0x38, 0xf0, 0x05, 0x8a, 0xcf, 0xeb, 0x9e, 0x65, 0xda, 0x99, 0x06, 0xb6, 0x33, 0x0d, 0x64, 0x2d,
	0x58, 0x1b, 0x47, 0x90, 0x57, 0x70, 0x45, 0x98, 0x65, 0x10, 0xee, 0xb8, 0xaf, 0x68, 0x8b, 0x11,
	0x97, 0x1e, 0x11, 0xdb, 0x08, 0x0b, 0x54, 0x59, 0x4c, 0xae, 0x20, 0x36, 0xe9, 0x46, 0xe4, 0xd2,
	0x5b, 0x03, 0x5b, 0x72, 0x05, 0x13, 0x4c, 0x58, 0x1b, 0xcf, 0x81, 0xd7, 0x60, 0x3d, 0x16, 0x8f,
	0x0d, 0x8b, 0x27, 0x1d, 0x94, 0x92, 0x8d, 0x4b, 0xc2, 0xa9, 0x61, 0xf1, 0x21, 0x3c, 0xca, 0xe2,
	0x87, 0x1d, 0x58, 0x1b, 0x13, 0x0f, 0x09, 0x58, 0x4e, 0x75, 0xc5, 0xa8, 0x19, 0x32, 0x97, 0x24,
	0xb3, 0xea, 0x0b, 0x04, 0xd3, 0x03, 0x45, 0x6a, 0x20, 0xd0, 0xe6, 0xe8, 0xb0, 0x91, 0x86, 0xb5,
	0xd1, 0x34, 0xf8, 0x01, 0x94, 0xe2, 0xe2, 0x3b, 0xbb, 0xe9, 0xd8, 0x86, 0xb2, 0x2c, 0x01, 0xaa,
	0x2f, 0xd0, 0x52, 0x12, 0xd2, 0x95, 0x5a, 0x20, 0xd0, 0x46, 0x36, 0x3e, 0x52, 0xb0, 0x96, 0xcd,
	0x81, 0x26, 0x48, 0x1a, 0x3c, 0xa3, 0xfc, 0xd4, 0x66, 0x96, 0x4d, 0x15, 0x98, 0xbc, 0x0f, 0x92,
	0x0c, 0x8f, 0x72, 0xdd, 0x91, 0x7a, 0xf2, 0x3e, 0xc8, 0x53, 0xb1, 0x96, 0x13, 0x09, 0x2f, 0xc0,
	0xca, 0x50, 0xb5, 0xdd, 0x96, 0xa4, 0x15, 0x49, 0xda, 0xf3, 0x05, 0x5a, 0xcb, 0x64, 0x45, 0x86,
	0x40, 0xa0, 0x87, 0xb9, 0xa8, 0x48, 0xc6, 0x5a, 0x5e, 0xea, 0xfe, 0xc2, 0xd7, 0x1b, 0x54, 0xf8,
	0x7e, 0x83, 0x0a, 0x7f, 0x6e, 0x50, 0xf1, 0xf0, 0xe4, 0xe7, 0x5d, 0xb9, 0x78, 0x7b, 0x57, 0x2e,
	0xfe, 0xbe, 0x2b, 0x17, 0xbf, 0xdd, 0x97, 0x0b, 0xb7, 0xf7, 0xe5, 0xc2, 0xaf, 0xfb, 0x72, 0xe1,
	0x63, 0xb5, 0x69, 0xf1, 0x66, 0xb7, 0x75, 0x41, 0x79, 0xc5, 0x71, 0x4d, 0xb5, 0xff, 0xdd, 0xe7,
	0x94, 0x74, 0x54, 0xd3, 0xd9, 0xf1, 0x3a, 0xc4, 0xe5, 0x3b, 0xb6, 0x63, 0x50, 0xf5, 0x93, 0xfc,
	0xa1, 0xc0, 0x7b, 0x97, 0xd4, 0x6b, 0x4e, 0xcb, 0xef, 0x7f, 0xf5, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xaa, 0x4c, 0x94, 0xd0, 0x44, 0x08, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CoinSend != that1.CoinSend {
		return false
	}
	if this.CoinSendMultiAddition != that1.CoinSendMultiAddition {
		return false
	}
	if this.CoinBuy != that1.CoinBuy {
		return false
	}
	if this.CoinSell != that1.CoinSell {
		return false
	}
	if this.CoinCreate != that1.CoinCreate {
		return false
	}
	if this.CoinCreateLength3 != that1.CoinCreateLength3 {
		return false
	}
	if this.CoinCreateLength4 != that1.CoinCreateLength4 {
		return false
	}
	if this.CoinCreateLength5 != that1.CoinCreateLength5 {
		return false
	}
	if this.CoinCreateLength6 != that1.CoinCreateLength6 {
		return false
	}
	if this.CoinCreateLengthOther != that1.CoinCreateLengthOther {
		return false
	}
	if this.MultisigCreateWallet != that1.MultisigCreateWallet {
		return false
	}
	if this.MultisigCreateTransaction != that1.MultisigCreateTransaction {
		return false
	}
	if this.MultisigSignTransaction != that1.MultisigSignTransaction {
		return false
	}
	if this.ValidatorDeclareCandidate != that1.ValidatorDeclareCandidate {
		return false
	}
	if this.ValidatorEditCandidate != that1.ValidatorEditCandidate {
		return false
	}
	if this.ValidatorDelegate != that1.ValidatorDelegate {
		return false
	}
	if this.ValidatorUnbond != that1.ValidatorUnbond {
		return false
	}
	if this.ValidatorSetOnline != that1.ValidatorSetOnline {
		return false
	}
	if this.ValidatorSetOffline != that1.ValidatorSetOffline {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorSetOffline != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ValidatorSetOffline))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ValidatorSetOnline != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ValidatorSetOnline))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ValidatorUnbond != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ValidatorUnbond))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ValidatorDelegate != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ValidatorDelegate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ValidatorEditCandidate != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ValidatorEditCandidate))
		i--
		dAtA[i] = 0x78
	}
	if m.ValidatorDeclareCandidate != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ValidatorDeclareCandidate))
		i--
		dAtA[i] = 0x70
	}
	if m.MultisigSignTransaction != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MultisigSignTransaction))
		i--
		dAtA[i] = 0x68
	}
	if m.MultisigCreateTransaction != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MultisigCreateTransaction))
		i--
		dAtA[i] = 0x60
	}
	if m.MultisigCreateWallet != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MultisigCreateWallet))
		i--
		dAtA[i] = 0x58
	}
	if m.CoinCreateLengthOther != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CoinCreateLengthOther))
		i--
		dAtA[i] = 0x50
	}
	if m.CoinCreateLength6 != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CoinCreateLength6))
		i--
		dAtA[i] = 0x48
	}
	if m.CoinCreateLength5 != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CoinCreateLength5))
		i--
		dAtA[i] = 0x40
	}
	if m.CoinCreateLength4 != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CoinCreateLength4))
		i--
		dAtA[i] = 0x38
	}
	if m.CoinCreateLength3 != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CoinCreateLength3))
		i--
		dAtA[i] = 0x30
	}
	if m.CoinCreate != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CoinCreate))
		i--
		dAtA[i] = 0x28
	}
	if m.CoinSell != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CoinSell))
		i--
		dAtA[i] = 0x20
	}
	if m.CoinBuy != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CoinBuy))
		i--
		dAtA[i] = 0x18
	}
	if m.CoinSendMultiAddition != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CoinSendMultiAddition))
		i--
		dAtA[i] = 0x10
	}
	if m.CoinSend != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CoinSend))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoinSend != 0 {
		n += 1 + sovParams(uint64(m.CoinSend))
	}
	if m.CoinSendMultiAddition != 0 {
		n += 1 + sovParams(uint64(m.CoinSendMultiAddition))
	}
	if m.CoinBuy != 0 {
		n += 1 + sovParams(uint64(m.CoinBuy))
	}
	if m.CoinSell != 0 {
		n += 1 + sovParams(uint64(m.CoinSell))
	}
	if m.CoinCreate != 0 {
		n += 1 + sovParams(uint64(m.CoinCreate))
	}
	if m.CoinCreateLength3 != 0 {
		n += 1 + sovParams(uint64(m.CoinCreateLength3))
	}
	if m.CoinCreateLength4 != 0 {
		n += 1 + sovParams(uint64(m.CoinCreateLength4))
	}
	if m.CoinCreateLength5 != 0 {
		n += 1 + sovParams(uint64(m.CoinCreateLength5))
	}
	if m.CoinCreateLength6 != 0 {
		n += 1 + sovParams(uint64(m.CoinCreateLength6))
	}
	if m.CoinCreateLengthOther != 0 {
		n += 1 + sovParams(uint64(m.CoinCreateLengthOther))
	}
	if m.MultisigCreateWallet != 0 {
		n += 1 + sovParams(uint64(m.MultisigCreateWallet))
	}
	if m.MultisigCreateTransaction != 0 {
		n += 1 + sovParams(uint64(m.MultisigCreateTransaction))
	}
	if m.MultisigSignTransaction != 0 {
		n += 1 + sovParams(uint64(m.MultisigSignTransaction))
	}
	if m.ValidatorDeclareCandidate != 0 {
		n += 1 + sovParams(uint64(m.ValidatorDeclareCandidate))
	}
	if m.ValidatorEditCandidate != 0 {
		n += 1 + sovParams(uint64(m.ValidatorEditCandidate))
	}
	if m.ValidatorDelegate != 0 {
		n += 2 + sovParams(uint64(m.ValidatorDelegate))
	}
	if m.ValidatorUnbond != 0 {
		n += 2 + sovParams(uint64(m.ValidatorUnbond))
	}
	if m.ValidatorSetOnline != 0 {
		n += 2 + sovParams(uint64(m.ValidatorSetOnline))
	}
	if m.ValidatorSetOffline != 0 {
		n += 2 + sovParams(uint64(m.ValidatorSetOffline))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinSend", wireType)
			}
			m.CoinSend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinSend |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinSendMultiAddition", wireType)
			}
			m.CoinSendMultiAddition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinSendMultiAddition |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinBuy", wireType)
			}
			m.CoinBuy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinBuy |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinSell", wireType)
			}
			m.CoinSell = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinSell |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreate", wireType)
			}
			m.CoinCreate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinCreate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreateLength3", wireType)
			}
			m.CoinCreateLength3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinCreateLength3 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreateLength4", wireType)
			}
			m.CoinCreateLength4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinCreateLength4 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreateLength5", wireType)
			}
			m.CoinCreateLength5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinCreateLength5 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreateLength6", wireType)
			}
			m.CoinCreateLength6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinCreateLength6 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCreateLengthOther", wireType)
			}
			m.CoinCreateLengthOther = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinCreateLengthOther |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigCreateWallet", wireType)
			}
			m.MultisigCreateWallet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MultisigCreateWallet |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigCreateTransaction", wireType)
			}
			m.MultisigCreateTransaction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MultisigCreateTransaction |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigSignTransaction", wireType)
			}
			m.MultisigSignTransaction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MultisigSignTransaction |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDeclareCandidate", wireType)
			}
			m.ValidatorDeclareCandidate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorDeclareCandidate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorEditCandidate", wireType)
			}
			m.ValidatorEditCandidate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorEditCandidate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDelegate", wireType)
			}
			m.ValidatorDelegate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorDelegate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorUnbond", wireType)
			}
			m.ValidatorUnbond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorUnbond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetOnline", wireType)
			}
			m.ValidatorSetOnline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorSetOnline |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetOffline", wireType)
			}
			m.ValidatorSetOffline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorSetOffline |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
