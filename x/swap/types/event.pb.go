// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/swap/v1/event.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventSwapInitialize struct {
	Sender            string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	From              string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	DestChain         uint32 `protobuf:"varint,3,opt,name=dest_chain,json=destChain,proto3" json:"dest_chain,omitempty"`
	Recipient         string `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount            string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	TransactionNumber string `protobuf:"bytes,6,opt,name=transaction_number,json=transactionNumber,proto3" json:"transaction_number,omitempty"`
	TokenSymbol       string `protobuf:"bytes,7,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
}

func (m *EventSwapInitialize) Reset()         { *m = EventSwapInitialize{} }
func (m *EventSwapInitialize) String() string { return proto.CompactTextString(m) }
func (*EventSwapInitialize) ProtoMessage()    {}
func (*EventSwapInitialize) Descriptor() ([]byte, []int) {
	return fileDescriptor_e971f3cd47a371da, []int{0}
}
func (m *EventSwapInitialize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSwapInitialize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSwapInitialize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSwapInitialize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSwapInitialize.Merge(m, src)
}
func (m *EventSwapInitialize) XXX_Size() int {
	return m.Size()
}
func (m *EventSwapInitialize) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSwapInitialize.DiscardUnknown(m)
}

var xxx_messageInfo_EventSwapInitialize proto.InternalMessageInfo

func (m *EventSwapInitialize) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventSwapInitialize) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *EventSwapInitialize) GetDestChain() uint32 {
	if m != nil {
		return m.DestChain
	}
	return 0
}

func (m *EventSwapInitialize) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *EventSwapInitialize) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventSwapInitialize) GetTransactionNumber() string {
	if m != nil {
		return m.TransactionNumber
	}
	return ""
}

func (m *EventSwapInitialize) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

type EventSwapRedeem struct {
	Sender            string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	From              string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	DestChain         uint32 `protobuf:"varint,3,opt,name=dest_chain,json=destChain,proto3" json:"dest_chain,omitempty"`
	Recipient         string `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount            string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	TransactionNumber string `protobuf:"bytes,6,opt,name=transaction_number,json=transactionNumber,proto3" json:"transaction_number,omitempty"`
	TokenSymbol       string `protobuf:"bytes,7,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
}

func (m *EventSwapRedeem) Reset()         { *m = EventSwapRedeem{} }
func (m *EventSwapRedeem) String() string { return proto.CompactTextString(m) }
func (*EventSwapRedeem) ProtoMessage()    {}
func (*EventSwapRedeem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e971f3cd47a371da, []int{1}
}
func (m *EventSwapRedeem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSwapRedeem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSwapRedeem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSwapRedeem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSwapRedeem.Merge(m, src)
}
func (m *EventSwapRedeem) XXX_Size() int {
	return m.Size()
}
func (m *EventSwapRedeem) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSwapRedeem.DiscardUnknown(m)
}

var xxx_messageInfo_EventSwapRedeem proto.InternalMessageInfo

func (m *EventSwapRedeem) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventSwapRedeem) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *EventSwapRedeem) GetDestChain() uint32 {
	if m != nil {
		return m.DestChain
	}
	return 0
}

func (m *EventSwapRedeem) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *EventSwapRedeem) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventSwapRedeem) GetTransactionNumber() string {
	if m != nil {
		return m.TransactionNumber
	}
	return ""
}

func (m *EventSwapRedeem) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

type EventChainActivate struct {
	ChainName   string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	ChainNumber uint32 `protobuf:"varint,2,opt,name=chain_number,json=chainNumber,proto3" json:"chain_number,omitempty"`
}

func (m *EventChainActivate) Reset()         { *m = EventChainActivate{} }
func (m *EventChainActivate) String() string { return proto.CompactTextString(m) }
func (*EventChainActivate) ProtoMessage()    {}
func (*EventChainActivate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e971f3cd47a371da, []int{2}
}
func (m *EventChainActivate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChainActivate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChainActivate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChainActivate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChainActivate.Merge(m, src)
}
func (m *EventChainActivate) XXX_Size() int {
	return m.Size()
}
func (m *EventChainActivate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChainActivate.DiscardUnknown(m)
}

var xxx_messageInfo_EventChainActivate proto.InternalMessageInfo

func (m *EventChainActivate) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *EventChainActivate) GetChainNumber() uint32 {
	if m != nil {
		return m.ChainNumber
	}
	return 0
}

type EventChainDeactivate struct {
	ChainNumber uint32 `protobuf:"varint,1,opt,name=chain_number,json=chainNumber,proto3" json:"chain_number,omitempty"`
}

func (m *EventChainDeactivate) Reset()         { *m = EventChainDeactivate{} }
func (m *EventChainDeactivate) String() string { return proto.CompactTextString(m) }
func (*EventChainDeactivate) ProtoMessage()    {}
func (*EventChainDeactivate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e971f3cd47a371da, []int{3}
}
func (m *EventChainDeactivate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChainDeactivate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChainDeactivate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChainDeactivate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChainDeactivate.Merge(m, src)
}
func (m *EventChainDeactivate) XXX_Size() int {
	return m.Size()
}
func (m *EventChainDeactivate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChainDeactivate.DiscardUnknown(m)
}

var xxx_messageInfo_EventChainDeactivate proto.InternalMessageInfo

func (m *EventChainDeactivate) GetChainNumber() uint32 {
	if m != nil {
		return m.ChainNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*EventSwapInitialize)(nil), "decimal.swap.v1.EventSwapInitialize")
	proto.RegisterType((*EventSwapRedeem)(nil), "decimal.swap.v1.EventSwapRedeem")
	proto.RegisterType((*EventChainActivate)(nil), "decimal.swap.v1.EventChainActivate")
	proto.RegisterType((*EventChainDeactivate)(nil), "decimal.swap.v1.EventChainDeactivate")
}

func init() { proto.RegisterFile("decimal/swap/v1/event.proto", fileDescriptor_e971f3cd47a371da) }

var fileDescriptor_e971f3cd47a371da = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x92, 0xbd, 0x4e, 0xe3, 0x40,
	0x14, 0x85, 0x33, 0xd9, 0x6c, 0x56, 0x9e, 0xec, 0x2a, 0xda, 0xd9, 0xd5, 0xca, 0xd2, 0x82, 0x15,
	0x52, 0xa5, 0x89, 0xad, 0x08, 0x1a, 0x4a, 0xfe, 0x0a, 0x9a, 0x14, 0x89, 0x44, 0x41, 0x63, 0x8d,
	0xed, 0x4b, 0x18, 0x25, 0x33, 0x63, 0x8d, 0x6f, 0x1c, 0xc2, 0x53, 0xf0, 0x58, 0x94, 0x29, 0x29,
	0x51, 0x42, 0xc1, 0x63, 0x20, 0x8f, 0x0d, 0x41, 0xf0, 0x06, 0x74, 0x33, 0xdf, 0xb9, 0x3f, 0xe7,
	0x48, 0x97, 0xfe, 0x4f, 0x20, 0x16, 0x92, 0xcf, 0x82, 0x6c, 0xc1, 0xd3, 0x20, 0x1f, 0x04, 0x90,
	0x83, 0x42, 0x3f, 0x35, 0x1a, 0x35, 0x6b, 0x57, 0xa2, 0x5f, 0x88, 0x7e, 0x3e, 0xe8, 0x3e, 0x13,
	0xfa, 0xe7, 0xac, 0x28, 0x18, 0x2f, 0x78, 0x7a, 0xae, 0x04, 0x0a, 0x3e, 0x13, 0xb7, 0xc0, 0xfe,
	0xd1, 0x66, 0x06, 0x2a, 0x01, 0xe3, 0x92, 0x0e, 0xe9, 0x39, 0xa3, 0xea, 0xc7, 0x18, 0x6d, 0x5c,
	0x19, 0x2d, 0xdd, 0xba, 0xa5, 0xf6, 0xcd, 0x76, 0x29, 0x4d, 0x20, 0xc3, 0x30, 0xbe, 0xe6, 0x42,
	0xb9, 0xdf, 0x3a, 0xa4, 0xf7, 0x6b, 0xe4, 0x14, 0xe4, 0xa4, 0x00, 0x6c, 0x87, 0x3a, 0x06, 0x62,
	0x91, 0x0a, 0x50, 0xe8, 0x36, 0x6c, 0xdf, 0x16, 0x14, 0x8b, 0xb8, 0xd4, 0x73, 0x85, 0xee, 0xf7,
	0x72, 0x51, 0xf9, 0x63, 0x7d, 0xca, 0xd0, 0x70, 0x95, 0xf1, 0x18, 0x85, 0x56, 0xa1, 0x9a, 0xcb,
	0x08, 0x8c, 0xdb, 0xb4, 0x35, 0xbf, 0xdf, 0x29, 0x43, 0x2b, 0xb0, 0x3d, 0xfa, 0x13, 0xf5, 0x14,
	0x54, 0x98, 0x2d, 0x65, 0xa4, 0x67, 0xee, 0x0f, 0x5b, 0xd8, 0xb2, 0x6c, 0x6c, 0x51, 0xf7, 0x89,
	0xd0, 0xf6, 0x5b, 0xd4, 0x11, 0x24, 0x00, 0xf2, 0x2b, 0xc6, 0xbc, 0xa0, 0xcc, 0xa6, 0xb4, 0xae,
	0x8e, 0x62, 0x14, 0x39, 0x47, 0x28, 0xcc, 0x5b, 0xdf, 0xa1, 0xe2, 0x12, 0xaa, 0xb0, 0x8e, 0x25,
	0x43, 0x2e, 0xa1, 0x98, 0x5b, 0xc9, 0xa5, 0x81, 0xba, 0x4d, 0xd7, 0x2a, 0x0b, 0x2c, 0xea, 0x1e,
	0xd2, 0xbf, 0xdb, 0xb9, 0xa7, 0xc0, 0x5f, 0x27, 0x7f, 0x6c, 0x25, 0x9f, 0x5a, 0x8f, 0x87, 0xf7,
	0x6b, 0x8f, 0xac, 0xd6, 0x1e, 0x79, 0x5c, 0x7b, 0xe4, 0x6e, 0xe3, 0xd5, 0x56, 0x1b, 0xaf, 0xf6,
	0xb0, 0xf1, 0x6a, 0x97, 0x07, 0x91, 0xc0, 0x68, 0x1e, 0x4f, 0x01, 0x7d, 0x6d, 0x26, 0x41, 0x75,
	0x9d, 0x08, 0x5c, 0x06, 0x13, 0xdd, 0xcf, 0x24, 0x37, 0xd8, 0x57, 0x3a, 0x81, 0xe0, 0xa6, 0x3c,
	0x67, 0x5c, 0xa6, 0x90, 0x45, 0x4d, 0x7b, 0xcc, 0xfb, 0x2f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd8,
	0x05, 0x3f, 0xac, 0xeb, 0x02, 0x00, 0x00,
}

func (m *EventSwapInitialize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSwapInitialize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSwapInitialize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TransactionNumber) > 0 {
		i -= len(m.TransactionNumber)
		copy(dAtA[i:], m.TransactionNumber)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TransactionNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if m.DestChain != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.DestChain))
		i--
		dAtA[i] = 0x18
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSwapRedeem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSwapRedeem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSwapRedeem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TransactionNumber) > 0 {
		i -= len(m.TransactionNumber)
		copy(dAtA[i:], m.TransactionNumber)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TransactionNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if m.DestChain != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.DestChain))
		i--
		dAtA[i] = 0x18
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChainActivate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChainActivate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChainActivate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ChainNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChainDeactivate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChainDeactivate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChainDeactivate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ChainNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSwapInitialize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.DestChain != 0 {
		n += 1 + sovEvent(uint64(m.DestChain))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.TransactionNumber)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventSwapRedeem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.DestChain != 0 {
		n += 1 + sovEvent(uint64(m.DestChain))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.TransactionNumber)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventChainActivate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ChainNumber != 0 {
		n += 1 + sovEvent(uint64(m.ChainNumber))
	}
	return n
}

func (m *EventChainDeactivate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainNumber != 0 {
		n += 1 + sovEvent(uint64(m.ChainNumber))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSwapInitialize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSwapInitialize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSwapInitialize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChain", wireType)
			}
			m.DestChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSwapRedeem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSwapRedeem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSwapRedeem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChain", wireType)
			}
			m.DestChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChainActivate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChainActivate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChainActivate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNumber", wireType)
			}
			m.ChainNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChainDeactivate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChainDeactivate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChainDeactivate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNumber", wireType)
			}
			m.ChainNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
