// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/swap/v1/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventActivateChain defines event emitted when chain is activated for swaps.
type EventActivateChain struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ID     uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *EventActivateChain) Reset()         { *m = EventActivateChain{} }
func (m *EventActivateChain) String() string { return proto.CompactTextString(m) }
func (*EventActivateChain) ProtoMessage()    {}
func (*EventActivateChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_19a3a1b67d26ad2c, []int{0}
}
func (m *EventActivateChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventActivateChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventActivateChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventActivateChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventActivateChain.Merge(m, src)
}
func (m *EventActivateChain) XXX_Size() int {
	return m.Size()
}
func (m *EventActivateChain) XXX_DiscardUnknown() {
	xxx_messageInfo_EventActivateChain.DiscardUnknown(m)
}

var xxx_messageInfo_EventActivateChain proto.InternalMessageInfo

func (m *EventActivateChain) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventActivateChain) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *EventActivateChain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// EventDeactivateChain defines event emitted when chain is deactivated for swaps.
type EventDeactivateChain struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ID     uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *EventDeactivateChain) Reset()         { *m = EventDeactivateChain{} }
func (m *EventDeactivateChain) String() string { return proto.CompactTextString(m) }
func (*EventDeactivateChain) ProtoMessage()    {}
func (*EventDeactivateChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_19a3a1b67d26ad2c, []int{1}
}
func (m *EventDeactivateChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeactivateChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeactivateChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeactivateChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeactivateChain.Merge(m, src)
}
func (m *EventDeactivateChain) XXX_Size() int {
	return m.Size()
}
func (m *EventDeactivateChain) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeactivateChain.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeactivateChain proto.InternalMessageInfo

func (m *EventDeactivateChain) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventDeactivateChain) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

// EventInitializeSwap defines event emitted when cross-chain swap is initialized.
type EventInitializeSwap struct {
	Sender            string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient         string `protobuf:"bytes,5,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount            string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	TokenSymbol       string `protobuf:"bytes,8,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TransactionNumber string `protobuf:"bytes,7,opt,name=transaction_number,json=transactionNumber,proto3" json:"transaction_number,omitempty"`
	FromChain         uint32 `protobuf:"varint,3,opt,name=from_chain,json=fromChain,proto3" json:"from_chain,omitempty"`
	DestChain         uint32 `protobuf:"varint,4,opt,name=dest_chain,json=destChain,proto3" json:"dest_chain,omitempty"`
}

func (m *EventInitializeSwap) Reset()         { *m = EventInitializeSwap{} }
func (m *EventInitializeSwap) String() string { return proto.CompactTextString(m) }
func (*EventInitializeSwap) ProtoMessage()    {}
func (*EventInitializeSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_19a3a1b67d26ad2c, []int{2}
}
func (m *EventInitializeSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventInitializeSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventInitializeSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventInitializeSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInitializeSwap.Merge(m, src)
}
func (m *EventInitializeSwap) XXX_Size() int {
	return m.Size()
}
func (m *EventInitializeSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInitializeSwap.DiscardUnknown(m)
}

var xxx_messageInfo_EventInitializeSwap proto.InternalMessageInfo

func (m *EventInitializeSwap) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventInitializeSwap) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *EventInitializeSwap) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventInitializeSwap) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *EventInitializeSwap) GetTransactionNumber() string {
	if m != nil {
		return m.TransactionNumber
	}
	return ""
}

func (m *EventInitializeSwap) GetFromChain() uint32 {
	if m != nil {
		return m.FromChain
	}
	return 0
}

func (m *EventInitializeSwap) GetDestChain() uint32 {
	if m != nil {
		return m.DestChain
	}
	return 0
}

// EventRedeemSwap defines event emitted when cross-chain swap is redeemed.
type EventRedeemSwap struct {
	Sender            string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	From              string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Recipient         string `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount            string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TokenSymbol       string `protobuf:"bytes,5,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TransactionNumber string `protobuf:"bytes,6,opt,name=transaction_number,json=transactionNumber,proto3" json:"transaction_number,omitempty"`
	FromChain         uint32 `protobuf:"varint,7,opt,name=from_chain,json=fromChain,proto3" json:"from_chain,omitempty"`
	DestChain         uint32 `protobuf:"varint,8,opt,name=dest_chain,json=destChain,proto3" json:"dest_chain,omitempty"`
	HashRedeem        string `protobuf:"bytes,9,opt,name=hashRedeem,proto3" json:"hashRedeem,omitempty"`
	V                 string `protobuf:"bytes,10,opt,name=v,proto3" json:"v,omitempty"`
	R                 string `protobuf:"bytes,11,opt,name=r,proto3" json:"r,omitempty"`
	S                 string `protobuf:"bytes,12,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *EventRedeemSwap) Reset()         { *m = EventRedeemSwap{} }
func (m *EventRedeemSwap) String() string { return proto.CompactTextString(m) }
func (*EventRedeemSwap) ProtoMessage()    {}
func (*EventRedeemSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_19a3a1b67d26ad2c, []int{3}
}
func (m *EventRedeemSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRedeemSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRedeemSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRedeemSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRedeemSwap.Merge(m, src)
}
func (m *EventRedeemSwap) XXX_Size() int {
	return m.Size()
}
func (m *EventRedeemSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRedeemSwap.DiscardUnknown(m)
}

var xxx_messageInfo_EventRedeemSwap proto.InternalMessageInfo

func (m *EventRedeemSwap) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventRedeemSwap) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *EventRedeemSwap) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *EventRedeemSwap) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventRedeemSwap) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *EventRedeemSwap) GetTransactionNumber() string {
	if m != nil {
		return m.TransactionNumber
	}
	return ""
}

func (m *EventRedeemSwap) GetFromChain() uint32 {
	if m != nil {
		return m.FromChain
	}
	return 0
}

func (m *EventRedeemSwap) GetDestChain() uint32 {
	if m != nil {
		return m.DestChain
	}
	return 0
}

func (m *EventRedeemSwap) GetHashRedeem() string {
	if m != nil {
		return m.HashRedeem
	}
	return ""
}

func (m *EventRedeemSwap) GetV() string {
	if m != nil {
		return m.V
	}
	return ""
}

func (m *EventRedeemSwap) GetR() string {
	if m != nil {
		return m.R
	}
	return ""
}

func (m *EventRedeemSwap) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

func init() {
	proto.RegisterType((*EventActivateChain)(nil), "decimal.swap.v1.EventActivateChain")
	proto.RegisterType((*EventDeactivateChain)(nil), "decimal.swap.v1.EventDeactivateChain")
	proto.RegisterType((*EventInitializeSwap)(nil), "decimal.swap.v1.EventInitializeSwap")
	proto.RegisterType((*EventRedeemSwap)(nil), "decimal.swap.v1.EventRedeemSwap")
}

func init() { proto.RegisterFile("decimal/swap/v1/events.proto", fileDescriptor_19a3a1b67d26ad2c) }

var fileDescriptor_19a3a1b67d26ad2c = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x41, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x63, 0x37, 0x75, 0xeb, 0xd7, 0x54, 0x15, 0x43, 0x55, 0x0d, 0x55, 0x6b, 0x4a, 0x56,
	0xdd, 0x24, 0x56, 0x05, 0x17, 0xa0, 0x14, 0xa4, 0x6e, 0xba, 0x70, 0x37, 0x88, 0x4d, 0x34, 0xb6,
	0x1f, 0xc9, 0xa8, 0x99, 0x19, 0x6b, 0x66, 0xe2, 0x52, 0x4e, 0xc1, 0xb1, 0xd8, 0x20, 0x75, 0xc9,
	0x0a, 0xa1, 0xe4, 0x08, 0x5c, 0x00, 0xcd, 0x4c, 0x24, 0x0a, 0x52, 0xa3, 0x48, 0xec, 0xe6, 0xff,
	0xbf, 0xe7, 0xdf, 0x7a, 0xbf, 0xf4, 0xe0, 0xa8, 0xc6, 0x8a, 0x0b, 0x36, 0xcd, 0xcd, 0x2d, 0x6b,
	0xf2, 0xf6, 0x2c, 0xc7, 0x16, 0xa5, 0x35, 0xc3, 0x46, 0x2b, 0xab, 0xc8, 0xde, 0x92, 0x0e, 0x1d,
	0x1d, 0xb6, 0x67, 0x87, 0xfb, 0x63, 0x35, 0x56, 0x9e, 0xe5, 0xee, 0x15, 0xc6, 0x0e, 0x9f, 0x55,
	0xca, 0x08, 0x65, 0x46, 0x01, 0x04, 0x11, 0x50, 0xff, 0x3d, 0x90, 0xb7, 0x2e, 0xf1, 0x75, 0x65,
	0x79, 0xcb, 0x2c, 0xbe, 0x99, 0x30, 0x2e, 0xc9, 0x01, 0x24, 0x06, 0x65, 0x8d, 0x9a, 0x46, 0x27,
	0xd1, 0x69, 0x5a, 0x2c, 0x15, 0x39, 0x80, 0x98, 0xd7, 0x34, 0x3e, 0x89, 0x4e, 0x77, 0xcf, 0x93,
	0xf9, 0x8f, 0xe7, 0xf1, 0xe5, 0x45, 0x11, 0xf3, 0x9a, 0x10, 0xe8, 0x4a, 0x26, 0x90, 0x6e, 0xf8,
	0x69, 0xff, 0xee, 0xbf, 0x83, 0x7d, 0x9f, 0x7c, 0x81, 0xec, 0x7f, 0xb2, 0xfb, 0xbf, 0x22, 0x78,
	0xea, 0x83, 0x2e, 0x25, 0xb7, 0x9c, 0x4d, 0xf9, 0x67, 0xbc, 0xbe, 0x65, 0xcd, 0xa3, 0x39, 0x47,
	0x90, 0x6a, 0xac, 0x78, 0xc3, 0x51, 0x5a, 0xba, 0xe9, 0xd1, 0x1f, 0xc3, 0x7d, 0xc5, 0x84, 0x9a,
	0x49, 0x4b, 0x93, 0xf0, 0x55, 0x50, 0xe4, 0x05, 0xf4, 0xac, 0xba, 0x41, 0x39, 0x32, 0x77, 0xa2,
	0x54, 0x53, 0xba, 0xed, 0xe9, 0x8e, 0xf7, 0xae, 0xbd, 0x45, 0x06, 0x40, 0xac, 0x66, 0xd2, 0xb8,
	0x75, 0x94, 0x1c, 0xc9, 0x99, 0x28, 0x51, 0xd3, 0x2d, 0x3f, 0xf8, 0xe4, 0x01, 0xb9, 0xf2, 0x80,
	0x1c, 0x03, 0x7c, 0xd4, 0x4a, 0x8c, 0x2a, 0xb7, 0xb5, 0x6f, 0x66, 0xb7, 0x48, 0x9d, 0x13, 0x6a,
	0x38, 0x06, 0xa8, 0xd1, 0xd8, 0x25, 0xee, 0x06, 0xec, 0x1c, 0x8f, 0xfb, 0xdf, 0x62, 0xd8, 0xf3,
	0x5b, 0x17, 0x58, 0x23, 0x8a, 0x95, 0x1b, 0x13, 0xe8, 0xba, 0x5c, 0xdf, 0x5d, 0x5a, 0xf8, 0xf7,
	0xdf, 0x2d, 0x6c, 0x3c, 0xde, 0x42, 0x77, 0x65, 0x0b, 0x9b, 0xeb, 0xb6, 0x90, 0xac, 0xd7, 0xc2,
	0xd6, 0xea, 0x16, 0xb6, 0xff, 0x69, 0x81, 0x64, 0x00, 0x13, 0x66, 0x26, 0xa1, 0x03, 0x9a, 0xfa,
	0x9f, 0x3c, 0x70, 0x48, 0x0f, 0xa2, 0x96, 0x82, 0xb7, 0xa3, 0xd6, 0x29, 0x4d, 0x77, 0x82, 0xd2,
	0x4e, 0x19, 0xda, 0x0b, 0xca, 0x9c, 0x5f, 0x7d, 0x9d, 0x67, 0xd1, 0xfd, 0x3c, 0x8b, 0x7e, 0xce,
	0xb3, 0xe8, 0xcb, 0x22, 0xeb, 0xdc, 0x2f, 0xb2, 0xce, 0xf7, 0x45, 0xd6, 0xf9, 0xf0, 0xaa, 0xe4,
	0xb6, 0x9c, 0x55, 0x37, 0x68, 0x87, 0x4a, 0x8f, 0xf3, 0xe5, 0x45, 0x59, 0x64, 0x22, 0x1f, 0xab,
	0x81, 0x11, 0x4c, 0xdb, 0x81, 0x54, 0x35, 0xe6, 0x9f, 0xc2, 0x0d, 0xda, 0xbb, 0x06, 0x4d, 0x99,
	0xf8, 0xf3, 0x79, 0xf9, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x34, 0x76, 0xec, 0x5d, 0xa0, 0x03, 0x00,
	0x00,
}

func (m *EventActivateChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventActivateChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventActivateChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDeactivateChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeactivateChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeactivateChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventInitializeSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInitializeSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventInitializeSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TransactionNumber) > 0 {
		i -= len(m.TransactionNumber)
		copy(dAtA[i:], m.TransactionNumber)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TransactionNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DestChain != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestChain))
		i--
		dAtA[i] = 0x20
	}
	if m.FromChain != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.FromChain))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRedeemSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRedeemSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRedeemSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.S) > 0 {
		i -= len(m.S)
		copy(dAtA[i:], m.S)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.S)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.R) > 0 {
		i -= len(m.R)
		copy(dAtA[i:], m.R)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.R)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.V) > 0 {
		i -= len(m.V)
		copy(dAtA[i:], m.V)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.V)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.HashRedeem) > 0 {
		i -= len(m.HashRedeem)
		copy(dAtA[i:], m.HashRedeem)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.HashRedeem)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DestChain != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestChain))
		i--
		dAtA[i] = 0x40
	}
	if m.FromChain != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.FromChain))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TransactionNumber) > 0 {
		i -= len(m.TransactionNumber)
		copy(dAtA[i:], m.TransactionNumber)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TransactionNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventActivateChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovEvents(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDeactivateChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovEvents(uint64(m.ID))
	}
	return n
}

func (m *EventInitializeSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.FromChain != 0 {
		n += 1 + sovEvents(uint64(m.FromChain))
	}
	if m.DestChain != 0 {
		n += 1 + sovEvents(uint64(m.DestChain))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TransactionNumber)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRedeemSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TransactionNumber)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.FromChain != 0 {
		n += 1 + sovEvents(uint64(m.FromChain))
	}
	if m.DestChain != 0 {
		n += 1 + sovEvents(uint64(m.DestChain))
	}
	l = len(m.HashRedeem)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.V)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventActivateChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventActivateChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventActivateChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeactivateChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeactivateChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeactivateChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventInitializeSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInitializeSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInitializeSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChain", wireType)
			}
			m.FromChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromChain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChain", wireType)
			}
			m.DestChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRedeemSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRedeemSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRedeemSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChain", wireType)
			}
			m.FromChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromChain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChain", wireType)
			}
			m.DestChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashRedeem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashRedeem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
