// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/nft/v1/sub_token.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubToken struct {
	ID      uint64                                 `protobuf:"varint,1,opt,name=ID,proto3" json:"id" yaml:"id"`
	Reserve github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=reserve,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reserve" yaml:"reserve"`
}

func (m *SubToken) Reset()         { *m = SubToken{} }
func (m *SubToken) String() string { return proto.CompactTextString(m) }
func (*SubToken) ProtoMessage()    {}
func (*SubToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_575007536cbf0636, []int{0}
}
func (m *SubToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubToken.Merge(m, src)
}
func (m *SubToken) XXX_Size() int {
	return m.Size()
}
func (m *SubToken) XXX_DiscardUnknown() {
	xxx_messageInfo_SubToken.DiscardUnknown(m)
}

var xxx_messageInfo_SubToken proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SubToken)(nil), "decimal.nft.v1.SubToken")
}

func init() { proto.RegisterFile("decimal/nft/v1/sub_token.proto", fileDescriptor_575007536cbf0636) }

var fileDescriptor_575007536cbf0636 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0x49, 0x4d, 0xce,
	0xcc, 0x4d, 0xcc, 0xd1, 0xcf, 0x4b, 0x2b, 0xd1, 0x2f, 0x33, 0xd4, 0x2f, 0x2e, 0x4d, 0x8a, 0x2f,
	0xc9, 0xcf, 0x4e, 0xcd, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x83, 0xca, 0xeb, 0xe5,
	0xa5, 0x95, 0xe8, 0x95, 0x19, 0x4a, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83, 0xa5, 0xf4, 0x41, 0x2c,
	0x88, 0x2a, 0xa5, 0xa9, 0x8c, 0x5c, 0x1c, 0xc1, 0xa5, 0x49, 0x21, 0x20, 0x8d, 0x42, 0xca, 0x5c,
	0x4c, 0x9e, 0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x4e, 0xc2, 0xaf, 0xee, 0xc9, 0x33, 0x65,
	0xa6, 0x7c, 0xba, 0x27, 0xcf, 0x59, 0x99, 0x98, 0x9b, 0x63, 0xa5, 0x94, 0x99, 0xa2, 0x14, 0xc4,
	0xe4, 0xe9, 0x22, 0x14, 0xc5, 0xc5, 0x5e, 0x94, 0x5a, 0x9c, 0x5a, 0x54, 0x96, 0x2a, 0xc1, 0xa4,
	0xc0, 0xa8, 0xc1, 0xe9, 0xe4, 0x70, 0xe2, 0x9e, 0x3c, 0xc3, 0xad, 0x7b, 0xf2, 0x6a, 0xe9, 0x99,
	0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xc9, 0xf9, 0xc5, 0xb9, 0xf9, 0xc5, 0x50,
	0x4a, 0xb7, 0x38, 0x25, 0x5b, 0xbf, 0xa4, 0xb2, 0x20, 0xb5, 0x58, 0xcf, 0x33, 0xaf, 0xe4, 0xd3,
	0x3d, 0x79, 0x3e, 0x88, 0x89, 0x50, 0x63, 0x94, 0x82, 0x60, 0x06, 0x5a, 0x71, 0x74, 0x2c, 0x90,
	0x67, 0x78, 0xb1, 0x40, 0x9e, 0xc1, 0xc9, 0xf7, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18,
	0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5,
	0x18, 0xa2, 0x8c, 0x93, 0x32, 0x4b, 0x92, 0x4a, 0x93, 0xb3, 0x53, 0x4b, 0xf4, 0xf2, 0x8b, 0xd2,
	0xf5, 0xa1, 0xbe, 0x2c, 0x49, 0x4d, 0xcc, 0xd5, 0x4f, 0xcf, 0xd7, 0x2d, 0xce, 0x4d, 0x2c, 0x2a,
	0xd1, 0xcd, 0xcb, 0x4f, 0x49, 0xd5, 0xaf, 0x00, 0x87, 0x0c, 0xd8, 0xde, 0x24, 0x36, 0xb0, 0x6f,
	0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x94, 0x56, 0x64, 0x02, 0x35, 0x01, 0x00, 0x00,
}

func (m *SubToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Reserve.Size()
		i -= size
		if _, err := m.Reserve.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSubToken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ID != 0 {
		i = encodeVarintSubToken(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSubToken(uint64(m.ID))
	}
	l = m.Reserve.Size()
	n += 1 + l + sovSubToken(uint64(l))
	return n
}

func sovSubToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubToken(x uint64) (n int) {
	return sovSubToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubToken = fmt.Errorf("proto: unexpected end of group")
)
