// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/nft/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryCollectionSupplyRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryCollectionSupplyRequest) Reset()         { *m = QueryCollectionSupplyRequest{} }
func (m *QueryCollectionSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionSupplyRequest) ProtoMessage()    {}
func (*QueryCollectionSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffdcfd003322b28, []int{0}
}
func (m *QueryCollectionSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionSupplyRequest.Merge(m, src)
}
func (m *QueryCollectionSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionSupplyRequest proto.InternalMessageInfo

func (m *QueryCollectionSupplyRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryCollectionSupplyResponse struct {
	Supply int64 `protobuf:"varint,1,opt,name=supply,proto3" json:"supply,omitempty"`
}

func (m *QueryCollectionSupplyResponse) Reset()         { *m = QueryCollectionSupplyResponse{} }
func (m *QueryCollectionSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionSupplyResponse) ProtoMessage()    {}
func (*QueryCollectionSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffdcfd003322b28, []int{1}
}
func (m *QueryCollectionSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionSupplyResponse.Merge(m, src)
}
func (m *QueryCollectionSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionSupplyResponse proto.InternalMessageInfo

func (m *QueryCollectionSupplyResponse) GetSupply() int64 {
	if m != nil {
		return m.Supply
	}
	return 0
}

type QueryOwnerCollectionsRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryOwnerCollectionsRequest) Reset()         { *m = QueryOwnerCollectionsRequest{} }
func (m *QueryOwnerCollectionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerCollectionsRequest) ProtoMessage()    {}
func (*QueryOwnerCollectionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffdcfd003322b28, []int{2}
}
func (m *QueryOwnerCollectionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerCollectionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerCollectionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerCollectionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerCollectionsRequest.Merge(m, src)
}
func (m *QueryOwnerCollectionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerCollectionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerCollectionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerCollectionsRequest proto.InternalMessageInfo

func (m *QueryOwnerCollectionsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryOwnerCollectionsRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryOwnerCollectionsResponse struct {
	Owner Owner `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner"`
}

func (m *QueryOwnerCollectionsResponse) Reset()         { *m = QueryOwnerCollectionsResponse{} }
func (m *QueryOwnerCollectionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerCollectionsResponse) ProtoMessage()    {}
func (*QueryOwnerCollectionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffdcfd003322b28, []int{3}
}
func (m *QueryOwnerCollectionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerCollectionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerCollectionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerCollectionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerCollectionsResponse.Merge(m, src)
}
func (m *QueryOwnerCollectionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerCollectionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerCollectionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerCollectionsResponse proto.InternalMessageInfo

func (m *QueryOwnerCollectionsResponse) GetOwner() Owner {
	if m != nil {
		return m.Owner
	}
	return Owner{}
}

type QueryCollectionRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryCollectionRequest) Reset()         { *m = QueryCollectionRequest{} }
func (m *QueryCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionRequest) ProtoMessage()    {}
func (*QueryCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffdcfd003322b28, []int{4}
}
func (m *QueryCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionRequest.Merge(m, src)
}
func (m *QueryCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionRequest proto.InternalMessageInfo

func (m *QueryCollectionRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryCollectionResponse struct {
	Collection Collection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection"`
}

func (m *QueryCollectionResponse) Reset()         { *m = QueryCollectionResponse{} }
func (m *QueryCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionResponse) ProtoMessage()    {}
func (*QueryCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffdcfd003322b28, []int{5}
}
func (m *QueryCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionResponse.Merge(m, src)
}
func (m *QueryCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionResponse proto.InternalMessageInfo

func (m *QueryCollectionResponse) GetCollection() Collection {
	if m != nil {
		return m.Collection
	}
	return Collection{}
}

type QueryDenomsRequest struct {
}

func (m *QueryDenomsRequest) Reset()         { *m = QueryDenomsRequest{} }
func (m *QueryDenomsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDenomsRequest) ProtoMessage()    {}
func (*QueryDenomsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffdcfd003322b28, []int{6}
}
func (m *QueryDenomsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomsRequest.Merge(m, src)
}
func (m *QueryDenomsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomsRequest proto.InternalMessageInfo

type QueryDenomsResponse struct {
	Denoms []string `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *QueryDenomsResponse) Reset()         { *m = QueryDenomsResponse{} }
func (m *QueryDenomsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDenomsResponse) ProtoMessage()    {}
func (*QueryDenomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffdcfd003322b28, []int{7}
}
func (m *QueryDenomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomsResponse.Merge(m, src)
}
func (m *QueryDenomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomsResponse proto.InternalMessageInfo

func (m *QueryDenomsResponse) GetDenoms() []string {
	if m != nil {
		return m.Denoms
	}
	return nil
}

type QueryNFTRequest struct {
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	TokenID string `protobuf:"bytes,2,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
}

func (m *QueryNFTRequest) Reset()         { *m = QueryNFTRequest{} }
func (m *QueryNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNFTRequest) ProtoMessage()    {}
func (*QueryNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffdcfd003322b28, []int{8}
}
func (m *QueryNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNFTRequest.Merge(m, src)
}
func (m *QueryNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNFTRequest proto.InternalMessageInfo

func (m *QueryNFTRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryNFTRequest) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

type QueryNFTResponse struct {
	Nft BaseNFT `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft"`
}

func (m *QueryNFTResponse) Reset()         { *m = QueryNFTResponse{} }
func (m *QueryNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNFTResponse) ProtoMessage()    {}
func (*QueryNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffdcfd003322b28, []int{9}
}
func (m *QueryNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNFTResponse.Merge(m, src)
}
func (m *QueryNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNFTResponse proto.InternalMessageInfo

func (m *QueryNFTResponse) GetNft() BaseNFT {
	if m != nil {
		return m.Nft
	}
	return BaseNFT{}
}

type QuerySubTokensRequest struct {
	Denom       string   `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	TokenID     string   `protobuf:"bytes,2,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	SubTokenIDs []uint64 `protobuf:"varint,3,rep,packed,name=subTokenIDs,proto3" json:"subTokenIDs,omitempty"`
}

func (m *QuerySubTokensRequest) Reset()         { *m = QuerySubTokensRequest{} }
func (m *QuerySubTokensRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubTokensRequest) ProtoMessage()    {}
func (*QuerySubTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffdcfd003322b28, []int{10}
}
func (m *QuerySubTokensRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubTokensRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubTokensRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubTokensRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubTokensRequest.Merge(m, src)
}
func (m *QuerySubTokensRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubTokensRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubTokensRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubTokensRequest proto.InternalMessageInfo

func (m *QuerySubTokensRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QuerySubTokensRequest) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

func (m *QuerySubTokensRequest) GetSubTokenIDs() []uint64 {
	if m != nil {
		return m.SubTokenIDs
	}
	return nil
}

type QuerySubTokensResponse struct {
	SubTokens []SubToken `protobuf:"bytes,1,rep,name=subTokens,proto3" json:"subTokens"`
}

func (m *QuerySubTokensResponse) Reset()         { *m = QuerySubTokensResponse{} }
func (m *QuerySubTokensResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubTokensResponse) ProtoMessage()    {}
func (*QuerySubTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffdcfd003322b28, []int{11}
}
func (m *QuerySubTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubTokensResponse.Merge(m, src)
}
func (m *QuerySubTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubTokensResponse proto.InternalMessageInfo

func (m *QuerySubTokensResponse) GetSubTokens() []SubToken {
	if m != nil {
		return m.SubTokens
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryCollectionSupplyRequest)(nil), "decimal.nft.v1.QueryCollectionSupplyRequest")
	proto.RegisterType((*QueryCollectionSupplyResponse)(nil), "decimal.nft.v1.QueryCollectionSupplyResponse")
	proto.RegisterType((*QueryOwnerCollectionsRequest)(nil), "decimal.nft.v1.QueryOwnerCollectionsRequest")
	proto.RegisterType((*QueryOwnerCollectionsResponse)(nil), "decimal.nft.v1.QueryOwnerCollectionsResponse")
	proto.RegisterType((*QueryCollectionRequest)(nil), "decimal.nft.v1.QueryCollectionRequest")
	proto.RegisterType((*QueryCollectionResponse)(nil), "decimal.nft.v1.QueryCollectionResponse")
	proto.RegisterType((*QueryDenomsRequest)(nil), "decimal.nft.v1.QueryDenomsRequest")
	proto.RegisterType((*QueryDenomsResponse)(nil), "decimal.nft.v1.QueryDenomsResponse")
	proto.RegisterType((*QueryNFTRequest)(nil), "decimal.nft.v1.QueryNFTRequest")
	proto.RegisterType((*QueryNFTResponse)(nil), "decimal.nft.v1.QueryNFTResponse")
	proto.RegisterType((*QuerySubTokensRequest)(nil), "decimal.nft.v1.QuerySubTokensRequest")
	proto.RegisterType((*QuerySubTokensResponse)(nil), "decimal.nft.v1.QuerySubTokensResponse")
}

func init() { proto.RegisterFile("decimal/nft/v1/query.proto", fileDescriptor_4ffdcfd003322b28) }

var fileDescriptor_4ffdcfd003322b28 = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x4f, 0xd4, 0x4c,
	0x18, 0xdf, 0xb2, 0xb0, 0xef, 0xcb, 0x6c, 0x82, 0x64, 0x84, 0xa5, 0x69, 0x96, 0xb2, 0x0e, 0x11,
	0x31, 0x91, 0x4e, 0x00, 0x13, 0x2f, 0x1e, 0x14, 0x08, 0x09, 0x26, 0x62, 0x5c, 0x88, 0x07, 0x3d,
	0x98, 0xee, 0x32, 0x34, 0x1b, 0x76, 0x3b, 0x65, 0x67, 0x8a, 0x10, 0x42, 0x4c, 0x3c, 0x78, 0x36,
	0xc1, 0x0f, 0xe1, 0x47, 0xe1, 0x48, 0xe2, 0xc5, 0x93, 0x31, 0xe0, 0x07, 0x31, 0x9d, 0x3e, 0xa5,
	0xdd, 0x61, 0xbb, 0x6b, 0x3c, 0x6c, 0xba, 0x33, 0xcf, 0xf3, 0xfb, 0xf3, 0x4c, 0xfb, 0x6b, 0x91,
	0xb5, 0xc7, 0x9a, 0xad, 0x8e, 0xdb, 0xa6, 0xfe, 0xbe, 0xa4, 0x47, 0xcb, 0xf4, 0x30, 0x64, 0xdd,
	0x13, 0x27, 0xe8, 0x72, 0xc9, 0xf1, 0x04, 0xd4, 0x1c, 0x7f, 0x5f, 0x3a, 0x47, 0xcb, 0xd6, 0x94,
	0xc7, 0x3d, 0xae, 0x4a, 0x34, 0xfa, 0x17, 0x77, 0x59, 0x55, 0x8f, 0x73, 0xaf, 0xcd, 0xa8, 0x1b,
	0xb4, 0xa8, 0xeb, 0xfb, 0x5c, 0xba, 0xb2, 0xc5, 0x7d, 0x01, 0x55, 0x9d, 0x9f, 0x7f, 0xf0, 0x59,
	0x17, 0x6a, 0x73, 0x5a, 0xad, 0xc9, 0xdb, 0x6d, 0xd6, 0x8c, 0xd0, 0xd0, 0x60, 0x6a, 0x0d, 0x91,
	0x8f, 0xb8, 0x62, 0x6b, 0x15, 0x11, 0x36, 0xde, 0x4b, 0x7e, 0xc0, 0x00, 0x49, 0x1e, 0xa3, 0xea,
	0xeb, 0x68, 0x92, 0xf5, 0x1b, 0xca, 0x9d, 0x30, 0x08, 0xda, 0x27, 0x75, 0x76, 0x18, 0x32, 0x21,
	0xf1, 0x14, 0x1a, 0xdb, 0x63, 0x3e, 0xef, 0x98, 0x46, 0xcd, 0x58, 0x1c, 0xaf, 0xc7, 0x0b, 0xf2,
	0x04, 0xcd, 0xe6, 0xa0, 0x44, 0xc0, 0x7d, 0xc1, 0x70, 0x05, 0x95, 0x84, 0xda, 0x51, 0xb8, 0x62,
	0x1d, 0x56, 0xe4, 0x05, 0xc8, 0xbd, 0x8a, 0xa6, 0x4b, 0xd1, 0x22, 0x23, 0xa7, 0x06, 0x4f, 0xe4,
	0xd4, 0x22, 0x35, 0x31, 0x92, 0x35, 0x51, 0x07, 0x13, 0xb7, 0xb9, 0xc0, 0xc4, 0x72, 0x96, 0xac,
	0xbc, 0x32, 0xed, 0xf4, 0xde, 0x26, 0x47, 0x01, 0xd7, 0x46, 0x2f, 0x7e, 0xce, 0x15, 0x40, 0x89,
	0x38, 0xa8, 0xa2, 0x0d, 0x36, 0xf8, 0x20, 0xde, 0xa1, 0x99, 0x5b, 0xfd, 0xa0, 0xfe, 0x0c, 0xa1,
	0xf4, 0x3e, 0x81, 0x05, 0x4b, 0xb7, 0x90, 0xe2, 0xc0, 0x47, 0x06, 0x43, 0xa6, 0x10, 0x56, 0xe4,
	0x1b, 0x91, 0x54, 0x72, 0x44, 0x64, 0x15, 0xdd, 0xed, 0xd9, 0x05, 0xb9, 0x2a, 0x2a, 0x29, 0x4b,
	0xc2, 0x34, 0x6a, 0xc5, 0xc5, 0x71, 0xa0, 0x83, 0x3d, 0xf2, 0x1c, 0xdd, 0x51, 0xa0, 0xed, 0xcd,
	0xdd, 0x81, 0x03, 0x61, 0x13, 0xfd, 0xa7, 0x1e, 0x8f, 0xad, 0x0d, 0x38, 0xec, 0x64, 0x49, 0xd6,
	0xd1, 0x64, 0x4a, 0x01, 0xa2, 0x14, 0x15, 0xfd, 0x7d, 0x09, 0xc3, 0xcd, 0xe8, 0xc3, 0xad, 0xb9,
	0x82, 0x6d, 0x6f, 0xee, 0x82, 0x95, 0xa8, 0x93, 0xb4, 0xd0, 0xb4, 0x22, 0xd9, 0x09, 0x1b, 0xbb,
	0x11, 0xaf, 0xf8, 0x47, 0x37, 0xb8, 0x86, 0xca, 0x02, 0x38, 0xb6, 0x36, 0x84, 0x59, 0xac, 0x15,
	0x17, 0x47, 0xeb, 0xd9, 0x2d, 0xf2, 0x06, 0x6e, 0x65, 0x46, 0x0a, 0x5c, 0x3f, 0x45, 0xe3, 0x49,
	0x63, 0x7c, 0x5a, 0xe5, 0x15, 0x53, 0xf7, 0x9e, 0xa0, 0xc0, 0x7c, 0x0a, 0x58, 0xf9, 0x56, 0x42,
	0x63, 0x8a, 0x18, 0x7f, 0x35, 0x60, 0x1a, 0x3d, 0x06, 0xf8, 0x91, 0x4e, 0x37, 0x28, 0x63, 0xd6,
	0xd2, 0x5f, 0x76, 0xc7, 0xf6, 0x89, 0xfd, 0xe9, 0xfb, 0xef, 0xf3, 0x11, 0x13, 0x57, 0xd2, 0x4c,
	0x47, 0x75, 0x7a, 0xaa, 0xce, 0xec, 0x0c, 0x9f, 0x27, 0xb6, 0xf4, 0x60, 0xe4, 0xd8, 0xca, 0xc9,
	0x62, 0x8e, 0xad, 0xbc, 0xb4, 0x91, 0x59, 0x65, 0x6b, 0x06, 0x4f, 0xf7, 0xbc, 0xc1, 0xe8, 0xa9,
	0xba, 0x9c, 0xe1, 0xcf, 0x06, 0x3c, 0x82, 0x29, 0x16, 0x2f, 0x0c, 0x19, 0x3c, 0x71, 0xf2, 0x60,
	0x68, 0x1f, 0x78, 0x20, 0xca, 0x43, 0x15, 0x5b, 0xb7, 0xdf, 0x94, 0x37, 0xc7, 0xe3, 0xa3, 0x72,
	0x26, 0x3f, 0x98, 0xf4, 0xe5, 0xee, 0x89, 0x9c, 0x35, 0x3f, 0xb0, 0x07, 0xb4, 0x2b, 0x4a, 0x7b,
	0x12, 0x4f, 0x24, 0xda, 0x71, 0xf4, 0xf0, 0x31, 0xfa, 0x3f, 0xc9, 0x0d, 0x9e, 0xeb, 0x4b, 0x94,
	0x86, 0xd2, 0xaa, 0xe5, 0x37, 0x80, 0xcc, 0x43, 0x25, 0x33, 0x8f, 0xef, 0x65, 0xde, 0xf5, 0xea,
	0x07, 0xf3, 0xd1, 0x53, 0x88, 0xc8, 0x19, 0xfe, 0x88, 0x26, 0x7a, 0x13, 0x80, 0xef, 0xf7, 0xa5,
	0xd7, 0xc3, 0x68, 0x2d, 0x0c, 0x6b, 0xcb, 0x7b, 0x12, 0xa3, 0xcb, 0xcd, 0x17, 0x46, 0xac, 0xbd,
	0xbc, 0xb8, 0xb2, 0x8d, 0xcb, 0x2b, 0xdb, 0xf8, 0x75, 0x65, 0x1b, 0x5f, 0xae, 0xed, 0xc2, 0xe5,
	0xb5, 0x5d, 0xf8, 0x71, 0x6d, 0x17, 0xde, 0xae, 0x36, 0x5a, 0xb2, 0x11, 0x36, 0x0f, 0x98, 0x74,
	0x78, 0xd7, 0xa3, 0x20, 0x27, 0x99, 0xdb, 0xa1, 0x1e, 0x5f, 0x12, 0x1d, 0xb7, 0x2b, 0x97, 0x7c,
	0xbe, 0xc7, 0xe8, 0xb1, 0xe2, 0x94, 0x27, 0x01, 0x13, 0x8d, 0x92, 0xfa, 0x64, 0xad, 0xfe, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xf9, 0x39, 0xc1, 0x7c, 0x8b, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Retrieves existing coin by specific symbol.
	QueryCollectionSupply(ctx context.Context, in *QueryCollectionSupplyRequest, opts ...grpc.CallOption) (*QueryCollectionSupplyResponse, error)
	QueryOwnerCollections(ctx context.Context, in *QueryOwnerCollectionsRequest, opts ...grpc.CallOption) (*QueryOwnerCollectionsResponse, error)
	QueryCollection(ctx context.Context, in *QueryCollectionRequest, opts ...grpc.CallOption) (*QueryCollectionResponse, error)
	QueryDenoms(ctx context.Context, in *QueryDenomsRequest, opts ...grpc.CallOption) (*QueryDenomsResponse, error)
	QueryNFT(ctx context.Context, in *QueryNFTRequest, opts ...grpc.CallOption) (*QueryNFTResponse, error)
	QuerySubTokens(ctx context.Context, in *QuerySubTokensRequest, opts ...grpc.CallOption) (*QuerySubTokensResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryCollectionSupply(ctx context.Context, in *QueryCollectionSupplyRequest, opts ...grpc.CallOption) (*QueryCollectionSupplyResponse, error) {
	out := new(QueryCollectionSupplyResponse)
	err := c.cc.Invoke(ctx, "/decimal.nft.v1.Query/QueryCollectionSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOwnerCollections(ctx context.Context, in *QueryOwnerCollectionsRequest, opts ...grpc.CallOption) (*QueryOwnerCollectionsResponse, error) {
	out := new(QueryOwnerCollectionsResponse)
	err := c.cc.Invoke(ctx, "/decimal.nft.v1.Query/QueryOwnerCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCollection(ctx context.Context, in *QueryCollectionRequest, opts ...grpc.CallOption) (*QueryCollectionResponse, error) {
	out := new(QueryCollectionResponse)
	err := c.cc.Invoke(ctx, "/decimal.nft.v1.Query/QueryCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDenoms(ctx context.Context, in *QueryDenomsRequest, opts ...grpc.CallOption) (*QueryDenomsResponse, error) {
	out := new(QueryDenomsResponse)
	err := c.cc.Invoke(ctx, "/decimal.nft.v1.Query/QueryDenoms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryNFT(ctx context.Context, in *QueryNFTRequest, opts ...grpc.CallOption) (*QueryNFTResponse, error) {
	out := new(QueryNFTResponse)
	err := c.cc.Invoke(ctx, "/decimal.nft.v1.Query/QueryNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySubTokens(ctx context.Context, in *QuerySubTokensRequest, opts ...grpc.CallOption) (*QuerySubTokensResponse, error) {
	out := new(QuerySubTokensResponse)
	err := c.cc.Invoke(ctx, "/decimal.nft.v1.Query/QuerySubTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Retrieves existing coin by specific symbol.
	QueryCollectionSupply(context.Context, *QueryCollectionSupplyRequest) (*QueryCollectionSupplyResponse, error)
	QueryOwnerCollections(context.Context, *QueryOwnerCollectionsRequest) (*QueryOwnerCollectionsResponse, error)
	QueryCollection(context.Context, *QueryCollectionRequest) (*QueryCollectionResponse, error)
	QueryDenoms(context.Context, *QueryDenomsRequest) (*QueryDenomsResponse, error)
	QueryNFT(context.Context, *QueryNFTRequest) (*QueryNFTResponse, error)
	QuerySubTokens(context.Context, *QuerySubTokensRequest) (*QuerySubTokensResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryCollectionSupply(ctx context.Context, req *QueryCollectionSupplyRequest) (*QueryCollectionSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCollectionSupply not implemented")
}
func (*UnimplementedQueryServer) QueryOwnerCollections(ctx context.Context, req *QueryOwnerCollectionsRequest) (*QueryOwnerCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOwnerCollections not implemented")
}
func (*UnimplementedQueryServer) QueryCollection(ctx context.Context, req *QueryCollectionRequest) (*QueryCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCollection not implemented")
}
func (*UnimplementedQueryServer) QueryDenoms(ctx context.Context, req *QueryDenomsRequest) (*QueryDenomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDenoms not implemented")
}
func (*UnimplementedQueryServer) QueryNFT(ctx context.Context, req *QueryNFTRequest) (*QueryNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNFT not implemented")
}
func (*UnimplementedQueryServer) QuerySubTokens(ctx context.Context, req *QuerySubTokensRequest) (*QuerySubTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySubTokens not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryCollectionSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollectionSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCollectionSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.nft.v1.Query/QueryCollectionSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCollectionSupply(ctx, req.(*QueryCollectionSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOwnerCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwnerCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOwnerCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.nft.v1.Query/QueryOwnerCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOwnerCollections(ctx, req.(*QueryOwnerCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.nft.v1.Query/QueryCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCollection(ctx, req.(*QueryCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDenoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDenoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.nft.v1.Query/QueryDenoms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDenoms(ctx, req.(*QueryDenomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.nft.v1.Query/QueryNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNFT(ctx, req.(*QueryNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySubTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySubTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.nft.v1.Query/QuerySubTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySubTokens(ctx, req.(*QuerySubTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "decimal.nft.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCollectionSupply",
			Handler:    _Query_QueryCollectionSupply_Handler,
		},
		{
			MethodName: "QueryOwnerCollections",
			Handler:    _Query_QueryOwnerCollections_Handler,
		},
		{
			MethodName: "QueryCollection",
			Handler:    _Query_QueryCollection_Handler,
		},
		{
			MethodName: "QueryDenoms",
			Handler:    _Query_QueryDenoms_Handler,
		},
		{
			MethodName: "QueryNFT",
			Handler:    _Query_QueryNFT_Handler,
		},
		{
			MethodName: "QuerySubTokens",
			Handler:    _Query_QuerySubTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "decimal/nft/v1/query.proto",
}

func (m *QueryCollectionSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectionSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Supply != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Supply))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerCollectionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerCollectionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerCollectionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerCollectionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerCollectionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerCollectionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Collection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDenomsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDenomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySubTokensRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubTokensRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubTokensRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubTokenIDs) > 0 {
		dAtA5 := make([]byte, len(m.SubTokenIDs)*10)
		var j4 int
		for _, num := range m.SubTokenIDs {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintQuery(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubTokens) > 0 {
		for iNdEx := len(m.SubTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryCollectionSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollectionSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Supply != 0 {
		n += 1 + sovQuery(uint64(m.Supply))
	}
	return n
}

func (m *QueryOwnerCollectionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerCollectionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Collection.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDenomsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDenomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Nft.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySubTokensRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.SubTokenIDs) > 0 {
		l = 0
		for _, e := range m.SubTokenIDs {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QuerySubTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubTokens) > 0 {
		for _, e := range m.SubTokens {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryCollectionSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectionSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			m.Supply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Supply |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerCollectionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerCollectionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerCollectionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerCollectionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerCollectionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerCollectionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubTokensRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubTokensRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubTokensRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SubTokenIDs = append(m.SubTokenIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SubTokenIDs) == 0 {
					m.SubTokenIDs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SubTokenIDs = append(m.SubTokenIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTokenIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTokens = append(m.SubTokens, SubToken{})
			if err := m.SubTokens[len(m.SubTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
