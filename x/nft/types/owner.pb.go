// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/nft/v1/owner.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IDCollection struct {
	Denom string            `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	IDs   SortedStringArray `protobuf:"bytes,2,rep,name=IDs,proto3,castrepeated=SortedStringArray" json:"ids" yaml:"ids"`
}

func (m *IDCollection) Reset()         { *m = IDCollection{} }
func (m *IDCollection) String() string { return proto.CompactTextString(m) }
func (*IDCollection) ProtoMessage()    {}
func (*IDCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_015481122fa9d426, []int{0}
}
func (m *IDCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDCollection.Merge(m, src)
}
func (m *IDCollection) XXX_Size() int {
	return m.Size()
}
func (m *IDCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_IDCollection.DiscardUnknown(m)
}

var xxx_messageInfo_IDCollection proto.InternalMessageInfo

func (m *IDCollection) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *IDCollection) GetIDs() SortedStringArray {
	if m != nil {
		return m.IDs
	}
	return nil
}

type Owner struct {
	Address       string        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	IDCollections IDCollections `protobuf:"bytes,2,rep,name=IDCollections,proto3,castrepeated=IDCollections" json:"id_collections" yaml:"id_collections"`
}

func (m *Owner) Reset()         { *m = Owner{} }
func (m *Owner) String() string { return proto.CompactTextString(m) }
func (*Owner) ProtoMessage()    {}
func (*Owner) Descriptor() ([]byte, []int) {
	return fileDescriptor_015481122fa9d426, []int{1}
}
func (m *Owner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Owner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Owner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Owner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Owner.Merge(m, src)
}
func (m *Owner) XXX_Size() int {
	return m.Size()
}
func (m *Owner) XXX_DiscardUnknown() {
	xxx_messageInfo_Owner.DiscardUnknown(m)
}

var xxx_messageInfo_Owner proto.InternalMessageInfo

func (m *Owner) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Owner) GetIDCollections() IDCollections {
	if m != nil {
		return m.IDCollections
	}
	return nil
}

type TokenOwner struct {
	Address     string         `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	SubTokenIDs SortedIntArray `protobuf:"varint,2,rep,packed,name=SubTokenIDs,proto3,castrepeated=SortedIntArray" json:"sub_token_ids" yaml:"sub_token_ids"`
}

func (m *TokenOwner) Reset()         { *m = TokenOwner{} }
func (m *TokenOwner) String() string { return proto.CompactTextString(m) }
func (*TokenOwner) ProtoMessage()    {}
func (*TokenOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_015481122fa9d426, []int{2}
}
func (m *TokenOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenOwner.Merge(m, src)
}
func (m *TokenOwner) XXX_Size() int {
	return m.Size()
}
func (m *TokenOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenOwner.DiscardUnknown(m)
}

var xxx_messageInfo_TokenOwner proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IDCollection)(nil), "decimal.nft.v1.IDCollection")
	proto.RegisterType((*Owner)(nil), "decimal.nft.v1.Owner")
	proto.RegisterType((*TokenOwner)(nil), "decimal.nft.v1.TokenOwner")
}

func init() { proto.RegisterFile("decimal/nft/v1/owner.proto", fileDescriptor_015481122fa9d426) }

var fileDescriptor_015481122fa9d426 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0x61, 0x15, 0xe8, 0xb5, 0xb5, 0xc0, 0x2a, 0x52, 0x55, 0x21, 0x5f, 0xe5, 0x01, 0x55,
	0x88, 0xda, 0x2a, 0xdd, 0x02, 0x03, 0x98, 0x2c, 0x19, 0x10, 0x92, 0xc3, 0x84, 0x84, 0x22, 0xdb,
	0x77, 0xb1, 0xac, 0xd8, 0x77, 0xd1, 0xdd, 0x25, 0x90, 0x9d, 0x81, 0x91, 0x9f, 0x10, 0x89, 0x8d,
	0xdf, 0xc0, 0x0f, 0xc8, 0x98, 0x91, 0xe9, 0x40, 0xc9, 0x82, 0x32, 0xfa, 0x17, 0x20, 0xfb, 0x1c,
	0x61, 0xaf, 0xdd, 0xee, 0xbe, 0xef, 0x7b, 0xef, 0x7d, 0xef, 0xd3, 0x83, 0xe7, 0x98, 0x24, 0x59,
	0x11, 0xe5, 0x3e, 0x1d, 0x4b, 0x7f, 0x7e, 0xed, 0xb3, 0x4f, 0x94, 0x70, 0x6f, 0xca, 0x99, 0x64,
	0xb6, 0xd5, 0x70, 0x1e, 0x1d, 0x4b, 0x6f, 0x7e, 0x7d, 0x7e, 0x9a, 0xb2, 0x94, 0xd5, 0x94, 0x5f,
	0xbd, 0xb4, 0xca, 0x95, 0xf0, 0x78, 0xd0, 0x7f, 0xc3, 0xf2, 0x9c, 0x24, 0x32, 0x63, 0xd4, 0x7e,
	0x02, 0x0f, 0x30, 0xa1, 0xac, 0x38, 0x03, 0x17, 0xe0, 0xf2, 0x30, 0x78, 0x50, 0x2a, 0x74, 0xbc,
	0x88, 0x8a, 0xbc, 0xe7, 0xd6, 0xb0, 0x1b, 0x6a, 0xda, 0x7e, 0x09, 0xcd, 0x41, 0x5f, 0x9c, 0xdd,
	0xb9, 0x30, 0x2f, 0x0f, 0x83, 0xa7, 0x3b, 0x85, 0xcc, 0x0c, 0x8b, 0x52, 0x21, 0xa8, 0xc5, 0x19,
	0x16, 0xee, 0x8f, 0xdf, 0xe8, 0xe1, 0x90, 0x71, 0x49, 0xf0, 0x50, 0xf2, 0x8c, 0xa6, 0xaf, 0x39,
	0x8f, 0x16, 0x61, 0x55, 0xe6, 0xfe, 0x04, 0xf0, 0xe0, 0x5d, 0xe5, 0xd5, 0x7e, 0x06, 0xef, 0x45,
	0x18, 0x73, 0x22, 0x44, 0x33, 0xd1, 0x2e, 0x15, 0xb2, 0x74, 0x93, 0x86, 0x70, 0xc3, 0xbd, 0xc4,
	0xfe, 0x02, 0xe0, 0x49, 0xdb, 0xae, 0x36, 0x70, 0xf4, 0xfc, 0xb1, 0xd7, 0x5d, 0xd6, 0x6b, 0x8b,
	0x82, 0x57, 0x2b, 0x85, 0x8c, 0x9d, 0x42, 0x56, 0x86, 0x47, 0xc9, 0xff, 0xda, 0x52, 0xa1, 0x47,
	0x7b, 0xb7, 0x6d, 0xbc, 0x32, 0xde, 0x9d, 0x12, 0x76, 0xbf, 0xee, 0x77, 0x00, 0xe1, 0x7b, 0x36,
	0x21, 0xf4, 0x36, 0x3b, 0x7c, 0x84, 0x47, 0xc3, 0x59, 0x5c, 0x97, 0xef, 0x13, 0x34, 0x83, 0x17,
	0x3b, 0x85, 0x4e, 0xc4, 0x2c, 0x1e, 0xc9, 0x0a, 0x1f, 0xe9, 0x2c, 0x4f, 0x75, 0x8b, 0x0e, 0x5c,
	0x99, 0xb3, 0x74, 0xaa, 0x03, 0x2a, 0x75, 0xa4, 0xed, 0x7e, 0xbd, 0xfb, 0x5f, 0x97, 0xc8, 0xf8,
	0xbb, 0x44, 0x46, 0xf0, 0x76, 0xb5, 0x71, 0xc0, 0x7a, 0xe3, 0x80, 0x3f, 0x1b, 0x07, 0x7c, 0xdb,
	0x3a, 0xc6, 0x7a, 0xeb, 0x18, 0xbf, 0xb6, 0x8e, 0xf1, 0xe1, 0x26, 0xce, 0x64, 0x3c, 0x4b, 0x26,
	0x44, 0x7a, 0x8c, 0xa7, 0x7e, 0x93, 0x9d, 0x24, 0x51, 0xe1, 0xa7, 0xec, 0x4a, 0x14, 0x11, 0x97,
	0x57, 0x94, 0x61, 0xe2, 0x7f, 0xae, 0x0f, 0x4b, 0x2e, 0xa6, 0x44, 0xc4, 0x77, 0xeb, 0x83, 0xb9,
	0xf9, 0x17, 0x00, 0x00, 0xff, 0xff, 0xec, 0xa4, 0x76, 0xc2, 0x74, 0x02, 0x00, 0x00,
}

func (m *IDCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for iNdEx := len(m.IDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IDs[iNdEx])
			copy(dAtA[i:], m.IDs[iNdEx])
			i = encodeVarintOwner(dAtA, i, uint64(len(m.IDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintOwner(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Owner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Owner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Owner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IDCollections) > 0 {
		for iNdEx := len(m.IDCollections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IDCollections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOwner(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOwner(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubTokenIDs) > 0 {
		dAtA2 := make([]byte, len(m.SubTokenIDs)*10)
		var j1 int
		for _, num1 := range m.SubTokenIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintOwner(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOwner(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOwner(dAtA []byte, offset int, v uint64) int {
	offset -= sovOwner(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IDCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovOwner(uint64(l))
	}
	if len(m.IDs) > 0 {
		for _, s := range m.IDs {
			l = len(s)
			n += 1 + l + sovOwner(uint64(l))
		}
	}
	return n
}

func (m *Owner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOwner(uint64(l))
	}
	if len(m.IDCollections) > 0 {
		for _, e := range m.IDCollections {
			l = e.Size()
			n += 1 + l + sovOwner(uint64(l))
		}
	}
	return n
}

func (m *TokenOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOwner(uint64(l))
	}
	if len(m.SubTokenIDs) > 0 {
		l = 0
		for _, e := range m.SubTokenIDs {
			l += sovOwner(uint64(e))
		}
		n += 1 + sovOwner(uint64(l)) + l
	}
	return n
}

func sovOwner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOwner(x uint64) (n int) {
	return sovOwner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IDCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOwner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOwner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOwner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOwner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDs = append(m.IDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Owner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Owner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Owner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOwner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOwner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCollections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDCollections = append(m.IDCollections, IDCollection{})
			if err := m.IDCollections[len(m.IDCollections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOwner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOwner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOwner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SubTokenIDs = append(m.SubTokenIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOwner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOwner
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOwner
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SubTokenIDs) == 0 {
					m.SubTokenIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOwner
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SubTokenIDs = append(m.SubTokenIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTokenIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOwner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOwner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOwner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOwner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOwner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOwner
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOwner
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOwner
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOwner        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOwner          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOwner = fmt.Errorf("proto: unexpected end of group")
)
