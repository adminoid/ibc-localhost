// Code generated by MockGen. DO NOT EDIT.
// Source: ./x/fee/types/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	big "math/big"
	reflect "reflect"

	types "bitbucket.org/decimalteam/go-smart-node/x/fee/types"
	types0 "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/evmos/ethermint/x/feemarket/types"
	gomock "github.com/golang/mock/gomock"
)

// MockFeeKeeper is a mock of FeeKeeper interface.
type MockFeeKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockFeeKeeperMockRecorder
}

// MockFeeKeeperMockRecorder is the mock recorder for MockFeeKeeper.
type MockFeeKeeperMockRecorder struct {
	mock *MockFeeKeeper
}

// NewMockFeeKeeper creates a new mock instance.
func NewMockFeeKeeper(ctrl *gomock.Controller) *MockFeeKeeper {
	mock := &MockFeeKeeper{ctrl: ctrl}
	mock.recorder = &MockFeeKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeeKeeper) EXPECT() *MockFeeKeeperMockRecorder {
	return m.recorder
}

// AddTransientGasWanted mocks base method.
func (m *MockFeeKeeper) AddTransientGasWanted(ctx types0.Context, gasWanted uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransientGasWanted", ctx, gasWanted)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTransientGasWanted indicates an expected call of AddTransientGasWanted.
func (mr *MockFeeKeeperMockRecorder) AddTransientGasWanted(ctx, gasWanted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransientGasWanted", reflect.TypeOf((*MockFeeKeeper)(nil).AddTransientGasWanted), ctx, gasWanted)
}

// GetModuleParams mocks base method.
func (m *MockFeeKeeper) GetModuleParams(ctx types0.Context) types.Params {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleParams", ctx)
	ret0, _ := ret[0].(types.Params)
	return ret0
}

// GetModuleParams indicates an expected call of GetModuleParams.
func (mr *MockFeeKeeperMockRecorder) GetModuleParams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleParams", reflect.TypeOf((*MockFeeKeeper)(nil).GetModuleParams), ctx)
}

// GetPrice mocks base method.
func (m *MockFeeKeeper) GetPrice(ctx types0.Context, denom, quote string) (types.CoinPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", ctx, denom, quote)
	ret0, _ := ret[0].(types.CoinPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockFeeKeeperMockRecorder) GetPrice(ctx, denom, quote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockFeeKeeper)(nil).GetPrice), ctx, denom, quote)
}

// MockFeeMarketKeeper is a mock of FeeMarketKeeper interface.
type MockFeeMarketKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockFeeMarketKeeperMockRecorder
}

// MockFeeMarketKeeperMockRecorder is the mock recorder for MockFeeMarketKeeper.
type MockFeeMarketKeeperMockRecorder struct {
	mock *MockFeeMarketKeeper
}

// NewMockFeeMarketKeeper creates a new mock instance.
func NewMockFeeMarketKeeper(ctrl *gomock.Controller) *MockFeeMarketKeeper {
	mock := &MockFeeMarketKeeper{ctrl: ctrl}
	mock.recorder = &MockFeeMarketKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeeMarketKeeper) EXPECT() *MockFeeMarketKeeperMockRecorder {
	return m.recorder
}

// AddTransientGasWanted mocks base method.
func (m *MockFeeMarketKeeper) AddTransientGasWanted(ctx types0.Context, gasWanted uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransientGasWanted", ctx, gasWanted)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTransientGasWanted indicates an expected call of AddTransientGasWanted.
func (mr *MockFeeMarketKeeperMockRecorder) AddTransientGasWanted(ctx, gasWanted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransientGasWanted", reflect.TypeOf((*MockFeeMarketKeeper)(nil).AddTransientGasWanted), ctx, gasWanted)
}

// GetBaseFee mocks base method.
func (m *MockFeeMarketKeeper) GetBaseFee(ctx types0.Context) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseFee", ctx)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBaseFee indicates an expected call of GetBaseFee.
func (mr *MockFeeMarketKeeperMockRecorder) GetBaseFee(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseFee", reflect.TypeOf((*MockFeeMarketKeeper)(nil).GetBaseFee), ctx)
}

// GetModuleParams mocks base method.
func (m *MockFeeMarketKeeper) GetModuleParams(ctx types0.Context) types.Params {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleParams", ctx)
	ret0, _ := ret[0].(types.Params)
	return ret0
}

// GetModuleParams indicates an expected call of GetModuleParams.
func (mr *MockFeeMarketKeeperMockRecorder) GetModuleParams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleParams", reflect.TypeOf((*MockFeeMarketKeeper)(nil).GetModuleParams), ctx)
}

// GetParams mocks base method.
func (m *MockFeeMarketKeeper) GetParams(ctx types0.Context) types1.Params {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParams", ctx)
	ret0, _ := ret[0].(types1.Params)
	return ret0
}

// GetParams indicates an expected call of GetParams.
func (mr *MockFeeMarketKeeperMockRecorder) GetParams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParams", reflect.TypeOf((*MockFeeMarketKeeper)(nil).GetParams), ctx)
}

// GetPrice mocks base method.
func (m *MockFeeMarketKeeper) GetPrice(ctx types0.Context, denom, quote string) (types.CoinPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", ctx, denom, quote)
	ret0, _ := ret[0].(types.CoinPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockFeeMarketKeeperMockRecorder) GetPrice(ctx, denom, quote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockFeeMarketKeeper)(nil).GetPrice), ctx, denom, quote)
}
