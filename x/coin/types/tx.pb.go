// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/coin/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateCoin struct {
	Sender         string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender" yaml:"sender"`
	Title          string                                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title" yaml:"title"`
	Symbol         string                                 `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol" yaml:"symbol"`
	CRR            uint64                                 `protobuf:"varint,4,opt,name=crr,proto3" json:"constant_reserve_ratio" yaml:"constant_reserve_ratio"`
	InitialVolume  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=initial_volume,json=initialVolume,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_volume" yaml:"initial_volume"`
	InitialReserve github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=initial_reserve,json=initialReserve,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_reserve" yaml:"initial_reserve"`
	LimitVolume    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=limit_volume,json=limitVolume,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"limit_volume" yaml:"limit_volume"`
	Identity       string                                 `protobuf:"bytes,8,opt,name=identity,proto3" json:"identity" yaml:"identity"`
}

func (m *MsgCreateCoin) Reset()         { *m = MsgCreateCoin{} }
func (m *MsgCreateCoin) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCoin) ProtoMessage()    {}
func (*MsgCreateCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{0}
}
func (m *MsgCreateCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCoin.Merge(m, src)
}
func (m *MsgCreateCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCoin proto.InternalMessageInfo

type MsgCreateCoinResponse struct {
}

func (m *MsgCreateCoinResponse) Reset()         { *m = MsgCreateCoinResponse{} }
func (m *MsgCreateCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCoinResponse) ProtoMessage()    {}
func (*MsgCreateCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{1}
}
func (m *MsgCreateCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCoinResponse.Merge(m, src)
}
func (m *MsgCreateCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCoinResponse proto.InternalMessageInfo

type MsgUpdateCoin struct {
	Sender      string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender" yaml:"sender"`
	Symbol      string                                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol" yaml:"symbol"`
	LimitVolume github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=limit_volume,json=limitVolume,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"limit_volume" yaml:"limit_volume"`
	Identity    string                                 `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity" yaml:"identity"`
}

func (m *MsgUpdateCoin) Reset()         { *m = MsgUpdateCoin{} }
func (m *MsgUpdateCoin) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCoin) ProtoMessage()    {}
func (*MsgUpdateCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{2}
}
func (m *MsgUpdateCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCoin.Merge(m, src)
}
func (m *MsgUpdateCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCoin proto.InternalMessageInfo

type MsgUpdateCoinResponse struct {
}

func (m *MsgUpdateCoinResponse) Reset()         { *m = MsgUpdateCoinResponse{} }
func (m *MsgUpdateCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCoinResponse) ProtoMessage()    {}
func (*MsgUpdateCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{3}
}
func (m *MsgUpdateCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCoinResponse.Merge(m, src)
}
func (m *MsgUpdateCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCoinResponse proto.InternalMessageInfo

type Send struct {
	Coin     types.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin" yaml:"coin"`
	Receiver string     `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver" yaml:"receiver"`
}

func (m *Send) Reset()         { *m = Send{} }
func (m *Send) String() string { return proto.CompactTextString(m) }
func (*Send) ProtoMessage()    {}
func (*Send) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{4}
}
func (m *Send) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Send) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Send.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Send) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Send.Merge(m, src)
}
func (m *Send) XXX_Size() int {
	return m.Size()
}
func (m *Send) XXX_DiscardUnknown() {
	xxx_messageInfo_Send.DiscardUnknown(m)
}

var xxx_messageInfo_Send proto.InternalMessageInfo

type MsgMultiSendCoin struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender" yaml:"sender"`
	Sends  []Send `protobuf:"bytes,2,rep,name=sends,proto3" json:"sends" yaml:"sends"`
}

func (m *MsgMultiSendCoin) Reset()         { *m = MsgMultiSendCoin{} }
func (m *MsgMultiSendCoin) String() string { return proto.CompactTextString(m) }
func (*MsgMultiSendCoin) ProtoMessage()    {}
func (*MsgMultiSendCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{5}
}
func (m *MsgMultiSendCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMultiSendCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMultiSendCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMultiSendCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMultiSendCoin.Merge(m, src)
}
func (m *MsgMultiSendCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgMultiSendCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMultiSendCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMultiSendCoin proto.InternalMessageInfo

type MsgMultiSendCoinResponse struct {
}

func (m *MsgMultiSendCoinResponse) Reset()         { *m = MsgMultiSendCoinResponse{} }
func (m *MsgMultiSendCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMultiSendCoinResponse) ProtoMessage()    {}
func (*MsgMultiSendCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{6}
}
func (m *MsgMultiSendCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMultiSendCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMultiSendCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMultiSendCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMultiSendCoinResponse.Merge(m, src)
}
func (m *MsgMultiSendCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMultiSendCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMultiSendCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMultiSendCoinResponse proto.InternalMessageInfo

type MsgBuyCoin struct {
	Sender        string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender" yaml:"sender"`
	CoinToBuy     types.Coin `protobuf:"bytes,2,opt,name=coin_to_buy,json=coinToBuy,proto3" json:"coin_to_buy" yaml:"coin_to_buy"`
	MaxCoinToSell types.Coin `protobuf:"bytes,3,opt,name=max_coin_to_sell,json=maxCoinToSell,proto3" json:"max_coin_to_sell" yaml:"max_coin_to_sell"`
}

func (m *MsgBuyCoin) Reset()         { *m = MsgBuyCoin{} }
func (m *MsgBuyCoin) String() string { return proto.CompactTextString(m) }
func (*MsgBuyCoin) ProtoMessage()    {}
func (*MsgBuyCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{7}
}
func (m *MsgBuyCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyCoin.Merge(m, src)
}
func (m *MsgBuyCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyCoin proto.InternalMessageInfo

type MsgBuyCoinResponse struct {
}

func (m *MsgBuyCoinResponse) Reset()         { *m = MsgBuyCoinResponse{} }
func (m *MsgBuyCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyCoinResponse) ProtoMessage()    {}
func (*MsgBuyCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{8}
}
func (m *MsgBuyCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyCoinResponse.Merge(m, src)
}
func (m *MsgBuyCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyCoinResponse proto.InternalMessageInfo

type MsgSellCoin struct {
	Sender       string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender" yaml:"sender"`
	CoinToSell   types.Coin `protobuf:"bytes,2,opt,name=coin_to_sell,json=coinToSell,proto3" json:"coin_to_sell" yaml:"coin_to_sell"`
	MinCoinToBuy types.Coin `protobuf:"bytes,3,opt,name=min_coin_to_buy,json=minCoinToBuy,proto3" json:"min_coin_to_buy" yaml:"min_coin_to_buy"`
}

func (m *MsgSellCoin) Reset()         { *m = MsgSellCoin{} }
func (m *MsgSellCoin) String() string { return proto.CompactTextString(m) }
func (*MsgSellCoin) ProtoMessage()    {}
func (*MsgSellCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{9}
}
func (m *MsgSellCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellCoin.Merge(m, src)
}
func (m *MsgSellCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellCoin proto.InternalMessageInfo

type MsgSellCoinResponse struct {
}

func (m *MsgSellCoinResponse) Reset()         { *m = MsgSellCoinResponse{} }
func (m *MsgSellCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSellCoinResponse) ProtoMessage()    {}
func (*MsgSellCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{10}
}
func (m *MsgSellCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellCoinResponse.Merge(m, src)
}
func (m *MsgSellCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellCoinResponse proto.InternalMessageInfo

type MsgSellAllCoin struct {
	Sender       string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender" yaml:"sender"`
	CoinToSell   types.Coin `protobuf:"bytes,2,opt,name=coin_to_sell,json=coinToSell,proto3" json:"coin_to_sell" yaml:"coin_to_sell"`
	MinCoinToBuy types.Coin `protobuf:"bytes,3,opt,name=min_coin_to_buy,json=minCoinToBuy,proto3" json:"min_coin_to_buy" yaml:"min_coin_to_buy"`
}

func (m *MsgSellAllCoin) Reset()         { *m = MsgSellAllCoin{} }
func (m *MsgSellAllCoin) String() string { return proto.CompactTextString(m) }
func (*MsgSellAllCoin) ProtoMessage()    {}
func (*MsgSellAllCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{11}
}
func (m *MsgSellAllCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellAllCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellAllCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellAllCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellAllCoin.Merge(m, src)
}
func (m *MsgSellAllCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellAllCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellAllCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellAllCoin proto.InternalMessageInfo

type MsgSellAllCoinResponse struct {
}

func (m *MsgSellAllCoinResponse) Reset()         { *m = MsgSellAllCoinResponse{} }
func (m *MsgSellAllCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSellAllCoinResponse) ProtoMessage()    {}
func (*MsgSellAllCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{12}
}
func (m *MsgSellAllCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellAllCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellAllCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellAllCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellAllCoinResponse.Merge(m, src)
}
func (m *MsgSellAllCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellAllCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellAllCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellAllCoinResponse proto.InternalMessageInfo

type MsgSendCoin struct {
	Sender   string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender" yaml:"sender"`
	Receiver string     `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver" yaml:"receiver"`
	Coin     types.Coin `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin" yaml:"coin"`
}

func (m *MsgSendCoin) Reset()         { *m = MsgSendCoin{} }
func (m *MsgSendCoin) String() string { return proto.CompactTextString(m) }
func (*MsgSendCoin) ProtoMessage()    {}
func (*MsgSendCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{13}
}
func (m *MsgSendCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendCoin.Merge(m, src)
}
func (m *MsgSendCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendCoin proto.InternalMessageInfo

type MsgSendCoinResponse struct {
}

func (m *MsgSendCoinResponse) Reset()         { *m = MsgSendCoinResponse{} }
func (m *MsgSendCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendCoinResponse) ProtoMessage()    {}
func (*MsgSendCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{14}
}
func (m *MsgSendCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendCoinResponse.Merge(m, src)
}
func (m *MsgSendCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendCoinResponse proto.InternalMessageInfo

type MsgBurnCoin struct {
	Sender string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender" yaml:"sender"`
	Coin   types.Coin `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin" yaml:"coin"`
}

func (m *MsgBurnCoin) Reset()         { *m = MsgBurnCoin{} }
func (m *MsgBurnCoin) String() string { return proto.CompactTextString(m) }
func (*MsgBurnCoin) ProtoMessage()    {}
func (*MsgBurnCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{15}
}
func (m *MsgBurnCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnCoin.Merge(m, src)
}
func (m *MsgBurnCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnCoin proto.InternalMessageInfo

type MsgBurnCoinResponse struct {
}

func (m *MsgBurnCoinResponse) Reset()         { *m = MsgBurnCoinResponse{} }
func (m *MsgBurnCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnCoinResponse) ProtoMessage()    {}
func (*MsgBurnCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{16}
}
func (m *MsgBurnCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnCoinResponse.Merge(m, src)
}
func (m *MsgBurnCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnCoinResponse proto.InternalMessageInfo

type MsgRedeemCheck struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender" yaml:"sender"`
	Check  string `protobuf:"bytes,2,opt,name=check,proto3" json:"check" yaml:"check"`
	Proof  string `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof" yaml:"proof"`
}

func (m *MsgRedeemCheck) Reset()         { *m = MsgRedeemCheck{} }
func (m *MsgRedeemCheck) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemCheck) ProtoMessage()    {}
func (*MsgRedeemCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{17}
}
func (m *MsgRedeemCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemCheck.Merge(m, src)
}
func (m *MsgRedeemCheck) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemCheck.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemCheck proto.InternalMessageInfo

type MsgRedeemCheckResponse struct {
}

func (m *MsgRedeemCheckResponse) Reset()         { *m = MsgRedeemCheckResponse{} }
func (m *MsgRedeemCheckResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemCheckResponse) ProtoMessage()    {}
func (*MsgRedeemCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d51fdc6114423de8, []int{18}
}
func (m *MsgRedeemCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemCheckResponse.Merge(m, src)
}
func (m *MsgRedeemCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemCheckResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateCoin)(nil), "decimal.coin.v1.MsgCreateCoin")
	proto.RegisterType((*MsgCreateCoinResponse)(nil), "decimal.coin.v1.MsgCreateCoinResponse")
	proto.RegisterType((*MsgUpdateCoin)(nil), "decimal.coin.v1.MsgUpdateCoin")
	proto.RegisterType((*MsgUpdateCoinResponse)(nil), "decimal.coin.v1.MsgUpdateCoinResponse")
	proto.RegisterType((*Send)(nil), "decimal.coin.v1.Send")
	proto.RegisterType((*MsgMultiSendCoin)(nil), "decimal.coin.v1.MsgMultiSendCoin")
	proto.RegisterType((*MsgMultiSendCoinResponse)(nil), "decimal.coin.v1.MsgMultiSendCoinResponse")
	proto.RegisterType((*MsgBuyCoin)(nil), "decimal.coin.v1.MsgBuyCoin")
	proto.RegisterType((*MsgBuyCoinResponse)(nil), "decimal.coin.v1.MsgBuyCoinResponse")
	proto.RegisterType((*MsgSellCoin)(nil), "decimal.coin.v1.MsgSellCoin")
	proto.RegisterType((*MsgSellCoinResponse)(nil), "decimal.coin.v1.MsgSellCoinResponse")
	proto.RegisterType((*MsgSellAllCoin)(nil), "decimal.coin.v1.MsgSellAllCoin")
	proto.RegisterType((*MsgSellAllCoinResponse)(nil), "decimal.coin.v1.MsgSellAllCoinResponse")
	proto.RegisterType((*MsgSendCoin)(nil), "decimal.coin.v1.MsgSendCoin")
	proto.RegisterType((*MsgSendCoinResponse)(nil), "decimal.coin.v1.MsgSendCoinResponse")
	proto.RegisterType((*MsgBurnCoin)(nil), "decimal.coin.v1.MsgBurnCoin")
	proto.RegisterType((*MsgBurnCoinResponse)(nil), "decimal.coin.v1.MsgBurnCoinResponse")
	proto.RegisterType((*MsgRedeemCheck)(nil), "decimal.coin.v1.MsgRedeemCheck")
	proto.RegisterType((*MsgRedeemCheckResponse)(nil), "decimal.coin.v1.MsgRedeemCheckResponse")
}

func init() { proto.RegisterFile("decimal/coin/v1/tx.proto", fileDescriptor_d51fdc6114423de8) }

var fileDescriptor_d51fdc6114423de8 = []byte{
	// 1158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x93, 0x76, 0x7f, 0x4c, 0xd2, 0xed, 0xca, 0xdd, 0xb6, 0xde, 0x74, 0x37, 0x53, 0x0c,
	0x5a, 0xba, 0xa0, 0xda, 0x6a, 0xcb, 0xa9, 0x9c, 0x48, 0x4e, 0x2c, 0xca, 0x1e, 0xbc, 0x5d, 0x10,
	0x20, 0x14, 0x39, 0xce, 0xe0, 0x5a, 0xb5, 0x3d, 0x95, 0x67, 0x12, 0x9a, 0x1b, 0x42, 0x1c, 0x38,
	0x72, 0xe4, 0x00, 0x52, 0xff, 0x00, 0x0e, 0x5c, 0x41, 0x42, 0xe2, 0xb8, 0xdc, 0xf6, 0x88, 0xf6,
	0x60, 0xa1, 0x16, 0x09, 0x94, 0x63, 0xfe, 0x01, 0x90, 0x67, 0xc6, 0x8e, 0xed, 0x3a, 0x0d, 0x6d,
	0x57, 0xe2, 0xc2, 0xa9, 0x9e, 0xf7, 0xcd, 0xfb, 0xf1, 0x7d, 0x7e, 0xf3, 0x3c, 0x29, 0x50, 0x7a,
	0xc8, 0x72, 0x3c, 0xd3, 0xd5, 0x2d, 0xec, 0xf8, 0xfa, 0x60, 0x4b, 0xa7, 0x47, 0xda, 0x61, 0x80,
	0x29, 0x96, 0x17, 0x05, 0xa2, 0x45, 0x88, 0x36, 0xd8, 0xaa, 0xdf, 0xb1, 0xb1, 0x8d, 0x19, 0xa6,
	0x47, 0x4f, 0x7c, 0x5b, 0x7d, 0xd5, 0xc2, 0xc4, 0xc3, 0x44, 0xf7, 0x88, 0x1d, 0xb9, 0x7b, 0xc4,
	0x16, 0x40, 0x43, 0x00, 0x5d, 0x93, 0x20, 0x7d, 0xb0, 0xd5, 0x45, 0xd4, 0xdc, 0x62, 0x59, 0x38,
	0xae, 0xbe, 0x98, 0x07, 0x0b, 0x6d, 0x62, 0xb7, 0x02, 0x64, 0x52, 0xd4, 0xc2, 0x8e, 0x2f, 0xef,
	0x80, 0x6b, 0x04, 0xf9, 0x3d, 0x14, 0x28, 0xd2, 0xba, 0xb4, 0x71, 0xb3, 0xb9, 0x36, 0x0a, 0xa1,
	0xb0, 0x8c, 0x43, 0xb8, 0x30, 0x34, 0x3d, 0x77, 0x57, 0xe5, 0x6b, 0xd5, 0x10, 0x80, 0xac, 0x83,
	0x79, 0xea, 0x50, 0x17, 0x29, 0x65, 0xe6, 0x73, 0x77, 0x14, 0x42, 0x6e, 0x18, 0x87, 0xb0, 0xc6,
	0x5d, 0xd8, 0x52, 0x35, 0xb8, 0x99, 0x65, 0x19, 0x7a, 0x5d, 0xec, 0x2a, 0x95, 0x54, 0x16, 0x66,
	0x49, 0x65, 0x61, 0xeb, 0x28, 0x0b, 0x7b, 0x90, 0xf7, 0x40, 0xc5, 0x0a, 0x02, 0x65, 0x6e, 0x5d,
	0xda, 0x98, 0x6b, 0x36, 0x4f, 0x42, 0x58, 0x69, 0x19, 0xc6, 0x28, 0x84, 0x2b, 0x16, 0xf6, 0x09,
	0x35, 0x7d, 0xda, 0x09, 0x10, 0x41, 0xc1, 0x00, 0x75, 0x02, 0x93, 0x3a, 0x78, 0x1c, 0xc2, 0xfb,
	0x3c, 0x50, 0x31, 0xae, 0x1a, 0x51, 0x38, 0xf9, 0x73, 0x09, 0xdc, 0x72, 0x7c, 0x87, 0x3a, 0xa6,
	0xdb, 0x19, 0x60, 0xb7, 0xef, 0x21, 0x65, 0x7e, 0x5d, 0xda, 0xa8, 0x35, 0x3f, 0x7c, 0x16, 0xc2,
	0xd2, 0x8b, 0x10, 0x3e, 0xb0, 0x1d, 0xba, 0xdf, 0xef, 0x6a, 0x16, 0xf6, 0x74, 0x21, 0x27, 0xff,
	0xb3, 0x49, 0x7a, 0x07, 0x3a, 0x1d, 0x1e, 0x22, 0xa2, 0xbd, 0xeb, 0xd3, 0x51, 0x08, 0x73, 0x71,
	0xc6, 0x21, 0x5c, 0xe6, 0x05, 0x64, 0xed, 0xaa, 0xb1, 0x20, 0x0c, 0xef, 0xb3, 0xb5, 0xfc, 0xa5,
	0x04, 0x16, 0xe3, 0x2d, 0xa2, 0x44, 0xe5, 0x1a, 0xab, 0xe1, 0xe3, 0x0b, 0xd7, 0x90, 0x0f, 0x34,
	0x0e, 0xe1, 0x4a, 0xb6, 0x08, 0x01, 0xa8, 0x46, 0x5c, 0xae, 0xc1, 0x0d, 0xf2, 0x11, 0xa8, 0xb9,
	0x8e, 0xe7, 0xd0, 0x58, 0x86, 0xeb, 0xac, 0x84, 0xa7, 0x17, 0x2e, 0x21, 0x13, 0x65, 0x1c, 0xc2,
	0x25, 0x9e, 0x3f, 0x6d, 0x55, 0x8d, 0x2a, 0x5b, 0x0a, 0x01, 0xde, 0x06, 0x37, 0x9c, 0x1e, 0xf2,
	0xa9, 0x43, 0x87, 0xca, 0x0d, 0xd6, 0x10, 0x70, 0x14, 0xc2, 0xc4, 0x36, 0x0e, 0xe1, 0xa2, 0xe0,
	0x20, 0x2c, 0xaa, 0x91, 0x80, 0xbb, 0xab, 0x5f, 0x1d, 0xc3, 0xd2, 0x37, 0xc7, 0x50, 0xfa, 0xeb,
	0x18, 0x96, 0xbe, 0xf8, 0xf3, 0x87, 0x37, 0x44, 0x57, 0xaa, 0xab, 0x60, 0x39, 0xd3, 0xdb, 0x06,
	0x22, 0x87, 0xd8, 0x27, 0x48, 0xfd, 0xb5, 0xcc, 0xba, 0xfe, 0xe9, 0x61, 0xef, 0x4a, 0x5d, 0x3f,
	0x69, 0xe2, 0xf2, 0xbf, 0x6f, 0xe2, 0xbc, 0xc8, 0x95, 0xff, 0x44, 0xe4, 0xb9, 0x97, 0x2c, 0xf2,
	0x44, 0xca, 0x44, 0xe4, 0xef, 0x24, 0x30, 0xf7, 0x04, 0xf9, 0x3d, 0xf9, 0x11, 0x98, 0x8b, 0x26,
	0x0e, 0x53, 0xb6, 0xba, 0x7d, 0x57, 0xe3, 0x84, 0xb4, 0x68, 0x24, 0x69, 0x62, 0x24, 0x69, 0x91,
	0x67, 0x73, 0x2d, 0x12, 0x61, 0x14, 0x42, 0xb6, 0x7d, 0x1c, 0xc2, 0x6a, 0x7c, 0x7a, 0x1d, 0x5f,
	0x35, 0x98, 0x31, 0xe2, 0x10, 0x20, 0x0b, 0x39, 0x03, 0x14, 0x08, 0xd1, 0x19, 0x87, 0xd8, 0x36,
	0xe1, 0x10, 0x5b, 0x54, 0x23, 0x01, 0x77, 0x6b, 0x69, 0x0e, 0xea, 0xf7, 0x12, 0xb8, 0xdd, 0x26,
	0x76, 0xbb, 0xef, 0x52, 0x27, 0xaa, 0xf3, 0xf2, 0x7d, 0xf0, 0x08, 0xcc, 0x47, 0x4f, 0x44, 0x29,
	0xaf, 0x57, 0x36, 0xaa, 0xdb, 0xcb, 0x5a, 0x6e, 0x68, 0x6b, 0x51, 0xf8, 0xe6, 0x7d, 0xc1, 0x8e,
	0xef, 0x9d, 0x0c, 0x46, 0xb6, 0x54, 0x0d, 0x6e, 0x9e, 0xae, 0x73, 0x1d, 0x28, 0xf9, 0x6a, 0x13,
	0xa9, 0x7f, 0x2c, 0x03, 0xd0, 0x26, 0x76, 0xb3, 0x3f, 0xbc, 0x3c, 0x89, 0x1e, 0xa8, 0x46, 0xe5,
	0x76, 0x28, 0xee, 0x74, 0xfb, 0x43, 0x26, 0xee, 0xb9, 0x2f, 0xeb, 0xa1, 0xa0, 0x93, 0xf6, 0x1a,
	0x87, 0x50, 0x9e, 0xbc, 0x33, 0x61, 0x54, 0x8d, 0x9b, 0xd1, 0x6a, 0x0f, 0x37, 0xfb, 0x43, 0xf9,
	0x33, 0x70, 0xdb, 0x33, 0x8f, 0x3a, 0x31, 0x4c, 0x90, 0xcb, 0xbf, 0x00, 0xe7, 0xa6, 0xda, 0x11,
	0xa9, 0xce, 0xb8, 0x8e, 0x43, 0xb8, 0xca, 0xf3, 0xe5, 0x11, 0xd5, 0x58, 0xf0, 0xcc, 0xa3, 0x16,
	0xcb, 0xfb, 0x04, 0xb9, 0xee, 0x74, 0x5d, 0xef, 0x00, 0x79, 0x22, 0x5d, 0xa2, 0xe8, 0x4f, 0x65,
	0x50, 0x6d, 0x13, 0x3b, 0x72, 0xbd, 0xbc, 0xa4, 0xfb, 0xa0, 0x96, 0x21, 0x3a, 0x53, 0xd3, 0x37,
	0x05, 0xd1, 0x5a, 0x8e, 0xe4, 0x52, 0x56, 0x54, 0x4e, 0x10, 0x58, 0x09, 0x3b, 0x99, 0x80, 0x45,
	0xcf, 0xf1, 0x3b, 0xe9, 0x17, 0x38, 0x53, 0xd5, 0x2d, 0x91, 0x2c, 0xef, 0x39, 0xf9, 0x60, 0xe4,
	0x00, 0xd5, 0xa8, 0x79, 0x8e, 0xdf, 0x8a, 0xdf, 0xe5, 0x74, 0x49, 0x97, 0xc1, 0x52, 0x4a, 0xbb,
	0x44, 0xd3, 0x9f, 0xcb, 0xe0, 0x96, 0xb0, 0xbf, 0xf3, 0xbf, 0xac, 0x17, 0x97, 0x55, 0x01, 0x2b,
	0x59, 0xf9, 0x12, 0x65, 0xff, 0x90, 0x44, 0xb7, 0x5e, 0x65, 0x8a, 0x5d, 0x65, 0xb4, 0x26, 0x33,
	0xbe, 0x72, 0xf5, 0x19, 0x3f, 0xbb, 0xaf, 0x72, 0xd3, 0xef, 0x5b, 0xce, 0xbe, 0xd9, 0x0f, 0xfc,
	0xab, 0xcc, 0x70, 0x4e, 0xa0, 0xfc, 0x12, 0x08, 0x64, 0xbf, 0x33, 0xbc, 0xea, 0xb8, 0xba, 0xa4,
	0xea, 0x5f, 0x24, 0x76, 0x1a, 0x0c, 0xd4, 0x43, 0xc8, 0x6b, 0xed, 0x23, 0xeb, 0xe0, 0xd2, 0x57,
	0x6f, 0x2b, 0xf2, 0x4e, 0x5f, 0xbd, 0x99, 0x61, 0xf2, 0x85, 0x61, 0x4b, 0xd5, 0xe0, 0xe6, 0xc8,
	0xe1, 0x30, 0xc0, 0xf8, 0x53, 0x71, 0xf3, 0x66, 0x0e, 0xcc, 0x30, 0x71, 0x60, 0x4b, 0xd5, 0xe0,
	0xe6, 0x59, 0x0d, 0x99, 0x62, 0x10, 0x93, 0xdb, 0xfe, 0x7b, 0x1e, 0x54, 0xda, 0xc4, 0x96, 0xf7,
	0x00, 0x48, 0xfd, 0xb4, 0x68, 0x9c, 0xf9, 0x30, 0x66, 0xae, 0x67, 0xf5, 0x07, 0xe7, 0xe3, 0x71,
	0xf4, 0x28, 0x6a, 0xea, 0xea, 0x56, 0x18, 0x75, 0x82, 0x17, 0x47, 0x3d, 0x7b, 0x5f, 0x91, 0x1f,
	0x83, 0x1b, 0xc9, 0x01, 0xba, 0x57, 0xe4, 0x13, 0xa3, 0xf5, 0xd7, 0xce, 0x43, 0x93, 0x78, 0x9f,
	0x80, 0x85, 0xec, 0xdd, 0xe2, 0x95, 0x22, 0xb7, 0xcc, 0x96, 0xfa, 0xc3, 0x99, 0x5b, 0x92, 0xf0,
	0xef, 0x81, 0xeb, 0xf1, 0xf7, 0x7e, 0xad, 0xc8, 0x4b, 0x80, 0xf5, 0x57, 0xcf, 0x01, 0xb3, 0xdc,
	0xc5, 0x4c, 0x9e, 0xc2, 0x9d, 0xa3, 0xd3, 0xb8, 0x67, 0x07, 0x92, 0xfc, 0x01, 0xa8, 0xa6, 0xc7,
	0x3c, 0x9c, 0xe6, 0x24, 0x36, 0xd4, 0x5f, 0x9f, 0xb1, 0x21, 0x5d, 0x68, 0x72, 0xce, 0xef, 0x15,
	0x33, 0xe3, 0x68, 0x71, 0xa1, 0xf9, 0x53, 0x18, 0x15, 0x9a, 0x3e, 0x81, 0x85, 0x85, 0xa6, 0x36,
	0x14, 0x17, 0x5a, 0x70, 0x02, 0x9a, 0x8f, 0x9f, 0x9d, 0x34, 0xa4, 0xe7, 0x27, 0x0d, 0xe9, 0xf7,
	0x93, 0x86, 0xf4, 0xf5, 0x69, 0xa3, 0xf4, 0xfc, 0xb4, 0x51, 0xfa, 0xed, 0xb4, 0x51, 0xfa, 0xe8,
	0xad, 0xae, 0x43, 0xbb, 0x7d, 0xeb, 0x00, 0x51, 0x0d, 0x07, 0xb6, 0x2e, 0xe2, 0x51, 0x64, 0x7a,
	0xba, 0x8d, 0x37, 0x89, 0x67, 0x06, 0x74, 0xd3, 0xc7, 0x3d, 0xa4, 0x1f, 0xf1, 0x7f, 0x07, 0xb0,
	0x4b, 0x7f, 0xf7, 0x1a, 0xfb, 0xbd, 0xbe, 0xf3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x5a,
	0xbe, 0x7c, 0x2b, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateCoin defines message for new coin creation.
	CreateCoin(ctx context.Context, in *MsgCreateCoin, opts ...grpc.CallOption) (*MsgCreateCoinResponse, error)
	// UpdateCoin defines message for modifying existing coin.
	UpdateCoin(ctx context.Context, in *MsgUpdateCoin, opts ...grpc.CallOption) (*MsgUpdateCoinResponse, error)
	// SendCoin defines message for transfering specific coin.
	SendCoin(ctx context.Context, in *MsgSendCoin, opts ...grpc.CallOption) (*MsgSendCoinResponse, error)
	// MultiSendCoin defines message for transfering specific coins as a batch.
	MultiSendCoin(ctx context.Context, in *MsgMultiSendCoin, opts ...grpc.CallOption) (*MsgMultiSendCoinResponse, error)
	// BuyCoin defines message for buying specific coin.
	BuyCoin(ctx context.Context, in *MsgBuyCoin, opts ...grpc.CallOption) (*MsgBuyCoinResponse, error)
	// SellCoin defines message for selling specific coin.
	SellCoin(ctx context.Context, in *MsgSellCoin, opts ...grpc.CallOption) (*MsgSellCoinResponse, error)
	// SellAllCoin defines message for selling all specific coin.
	SellAllCoin(ctx context.Context, in *MsgSellAllCoin, opts ...grpc.CallOption) (*MsgSellAllCoinResponse, error)
	// BurnCoin defines message for burning specific coin amount.
	BurnCoin(ctx context.Context, in *MsgBurnCoin, opts ...grpc.CallOption) (*MsgBurnCoinResponse, error)
	// RedeemCheck defines message for redeeming checks.
	RedeemCheck(ctx context.Context, in *MsgRedeemCheck, opts ...grpc.CallOption) (*MsgRedeemCheckResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCoin(ctx context.Context, in *MsgCreateCoin, opts ...grpc.CallOption) (*MsgCreateCoinResponse, error) {
	out := new(MsgCreateCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/CreateCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCoin(ctx context.Context, in *MsgUpdateCoin, opts ...grpc.CallOption) (*MsgUpdateCoinResponse, error) {
	out := new(MsgUpdateCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/UpdateCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendCoin(ctx context.Context, in *MsgSendCoin, opts ...grpc.CallOption) (*MsgSendCoinResponse, error) {
	out := new(MsgSendCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/SendCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MultiSendCoin(ctx context.Context, in *MsgMultiSendCoin, opts ...grpc.CallOption) (*MsgMultiSendCoinResponse, error) {
	out := new(MsgMultiSendCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/MultiSendCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BuyCoin(ctx context.Context, in *MsgBuyCoin, opts ...grpc.CallOption) (*MsgBuyCoinResponse, error) {
	out := new(MsgBuyCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/BuyCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellCoin(ctx context.Context, in *MsgSellCoin, opts ...grpc.CallOption) (*MsgSellCoinResponse, error) {
	out := new(MsgSellCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/SellCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellAllCoin(ctx context.Context, in *MsgSellAllCoin, opts ...grpc.CallOption) (*MsgSellAllCoinResponse, error) {
	out := new(MsgSellAllCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/SellAllCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnCoin(ctx context.Context, in *MsgBurnCoin, opts ...grpc.CallOption) (*MsgBurnCoinResponse, error) {
	out := new(MsgBurnCoinResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/BurnCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RedeemCheck(ctx context.Context, in *MsgRedeemCheck, opts ...grpc.CallOption) (*MsgRedeemCheckResponse, error) {
	out := new(MsgRedeemCheckResponse)
	err := c.cc.Invoke(ctx, "/decimal.coin.v1.Msg/RedeemCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateCoin defines message for new coin creation.
	CreateCoin(context.Context, *MsgCreateCoin) (*MsgCreateCoinResponse, error)
	// UpdateCoin defines message for modifying existing coin.
	UpdateCoin(context.Context, *MsgUpdateCoin) (*MsgUpdateCoinResponse, error)
	// SendCoin defines message for transfering specific coin.
	SendCoin(context.Context, *MsgSendCoin) (*MsgSendCoinResponse, error)
	// MultiSendCoin defines message for transfering specific coins as a batch.
	MultiSendCoin(context.Context, *MsgMultiSendCoin) (*MsgMultiSendCoinResponse, error)
	// BuyCoin defines message for buying specific coin.
	BuyCoin(context.Context, *MsgBuyCoin) (*MsgBuyCoinResponse, error)
	// SellCoin defines message for selling specific coin.
	SellCoin(context.Context, *MsgSellCoin) (*MsgSellCoinResponse, error)
	// SellAllCoin defines message for selling all specific coin.
	SellAllCoin(context.Context, *MsgSellAllCoin) (*MsgSellAllCoinResponse, error)
	// BurnCoin defines message for burning specific coin amount.
	BurnCoin(context.Context, *MsgBurnCoin) (*MsgBurnCoinResponse, error)
	// RedeemCheck defines message for redeeming checks.
	RedeemCheck(context.Context, *MsgRedeemCheck) (*MsgRedeemCheckResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateCoin(ctx context.Context, req *MsgCreateCoin) (*MsgCreateCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoin not implemented")
}
func (*UnimplementedMsgServer) UpdateCoin(ctx context.Context, req *MsgUpdateCoin) (*MsgUpdateCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoin not implemented")
}
func (*UnimplementedMsgServer) SendCoin(ctx context.Context, req *MsgSendCoin) (*MsgSendCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCoin not implemented")
}
func (*UnimplementedMsgServer) MultiSendCoin(ctx context.Context, req *MsgMultiSendCoin) (*MsgMultiSendCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiSendCoin not implemented")
}
func (*UnimplementedMsgServer) BuyCoin(ctx context.Context, req *MsgBuyCoin) (*MsgBuyCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyCoin not implemented")
}
func (*UnimplementedMsgServer) SellCoin(ctx context.Context, req *MsgSellCoin) (*MsgSellCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellCoin not implemented")
}
func (*UnimplementedMsgServer) SellAllCoin(ctx context.Context, req *MsgSellAllCoin) (*MsgSellAllCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellAllCoin not implemented")
}
func (*UnimplementedMsgServer) BurnCoin(ctx context.Context, req *MsgBurnCoin) (*MsgBurnCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnCoin not implemented")
}
func (*UnimplementedMsgServer) RedeemCheck(ctx context.Context, req *MsgRedeemCheck) (*MsgRedeemCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemCheck not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/CreateCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCoin(ctx, req.(*MsgCreateCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/UpdateCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCoin(ctx, req.(*MsgUpdateCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/SendCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendCoin(ctx, req.(*MsgSendCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MultiSendCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMultiSendCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MultiSendCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/MultiSendCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MultiSendCoin(ctx, req.(*MsgMultiSendCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BuyCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/BuyCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyCoin(ctx, req.(*MsgBuyCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/SellCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellCoin(ctx, req.(*MsgSellCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellAllCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellAllCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellAllCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/SellAllCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellAllCoin(ctx, req.(*MsgSellAllCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/BurnCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnCoin(ctx, req.(*MsgBurnCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RedeemCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRedeemCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RedeemCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/decimal.coin.v1.Msg/RedeemCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RedeemCheck(ctx, req.(*MsgRedeemCheck))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "decimal.coin.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCoin",
			Handler:    _Msg_CreateCoin_Handler,
		},
		{
			MethodName: "UpdateCoin",
			Handler:    _Msg_UpdateCoin_Handler,
		},
		{
			MethodName: "SendCoin",
			Handler:    _Msg_SendCoin_Handler,
		},
		{
			MethodName: "MultiSendCoin",
			Handler:    _Msg_MultiSendCoin_Handler,
		},
		{
			MethodName: "BuyCoin",
			Handler:    _Msg_BuyCoin_Handler,
		},
		{
			MethodName: "SellCoin",
			Handler:    _Msg_SellCoin_Handler,
		},
		{
			MethodName: "SellAllCoin",
			Handler:    _Msg_SellAllCoin_Handler,
		},
		{
			MethodName: "BurnCoin",
			Handler:    _Msg_BurnCoin_Handler,
		},
		{
			MethodName: "RedeemCheck",
			Handler:    _Msg_RedeemCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "decimal/coin/v1/tx.proto",
}

func (m *MsgCreateCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.LimitVolume.Size()
		i -= size
		if _, err := m.LimitVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.InitialReserve.Size()
		i -= size
		if _, err := m.InitialReserve.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.InitialVolume.Size()
		i -= size
		if _, err := m.InitialVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.CRR != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CRR))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.LimitVolume.Size()
		i -= size
		if _, err := m.LimitVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Send) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Send) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Send) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgMultiSendCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMultiSendCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMultiSendCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sends) > 0 {
		for iNdEx := len(m.Sends) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sends[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMultiSendCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMultiSendCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMultiSendCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBuyCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MaxCoinToSell.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CoinToBuy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSellCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinCoinToBuy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CoinToSell.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSellAllCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellAllCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellAllCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinCoinToBuy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CoinToSell.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellAllCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellAllCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellAllCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurnCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRedeemCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Check) > 0 {
		i -= len(m.Check)
		copy(dAtA[i:], m.Check)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Check)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedeemCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemCheckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CRR != 0 {
		n += 1 + sovTx(uint64(m.CRR))
	}
	l = m.InitialVolume.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.InitialReserve.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.LimitVolume.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.LimitVolume.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Send) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMultiSendCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Sends) > 0 {
		for _, e := range m.Sends {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMultiSendCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBuyCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.CoinToBuy.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxCoinToSell.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBuyCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSellCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.CoinToSell.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MinCoinToBuy.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSellCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSellAllCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.CoinToSell.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MinCoinToBuy.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSellAllCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSendCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurnCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBurnCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRedeemCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Check)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRedeemCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CRR", wireType)
			}
			m.CRR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CRR |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialVolume", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialReserve", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialReserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVolume", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVolume", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Send) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Send: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Send: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMultiSendCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMultiSendCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMultiSendCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sends = append(m.Sends, Send{})
			if err := m.Sends[len(m.Sends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMultiSendCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMultiSendCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMultiSendCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinToBuy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinToBuy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCoinToSell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxCoinToSell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinToSell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinToSell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCoinToBuy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinCoinToBuy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellAllCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellAllCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellAllCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinToSell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinToSell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCoinToBuy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinCoinToBuy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellAllCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellAllCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellAllCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Check = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
