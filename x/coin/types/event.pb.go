// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decimal/coin/v1/event.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventCreateCoin struct {
	Sender               string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Symbol               string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Title                string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Crr                  uint64 `protobuf:"varint,4,opt,name=crr,proto3" json:"crr,omitempty"`
	InitialVolume        string `protobuf:"bytes,5,opt,name=initial_volume,json=initialVolume,proto3" json:"initial_volume,omitempty"`
	InitialReserve       string `protobuf:"bytes,6,opt,name=initial_reserve,json=initialReserve,proto3" json:"initial_reserve,omitempty"`
	LimitVolume          string `protobuf:"bytes,7,opt,name=limit_volume,json=limitVolume,proto3" json:"limit_volume,omitempty"`
	Identity             string `protobuf:"bytes,8,opt,name=identity,proto3" json:"identity,omitempty"`
	CommissionCreateCoin string `protobuf:"bytes,9,opt,name=commission_create_coin,json=commissionCreateCoin,proto3" json:"commission_create_coin,omitempty"`
}

func (m *EventCreateCoin) Reset()         { *m = EventCreateCoin{} }
func (m *EventCreateCoin) String() string { return proto.CompactTextString(m) }
func (*EventCreateCoin) ProtoMessage()    {}
func (*EventCreateCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0b19d64b7f80d48, []int{0}
}
func (m *EventCreateCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateCoin.Merge(m, src)
}
func (m *EventCreateCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateCoin proto.InternalMessageInfo

func (m *EventCreateCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventCreateCoin) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *EventCreateCoin) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EventCreateCoin) GetCrr() uint64 {
	if m != nil {
		return m.Crr
	}
	return 0
}

func (m *EventCreateCoin) GetInitialVolume() string {
	if m != nil {
		return m.InitialVolume
	}
	return ""
}

func (m *EventCreateCoin) GetInitialReserve() string {
	if m != nil {
		return m.InitialReserve
	}
	return ""
}

func (m *EventCreateCoin) GetLimitVolume() string {
	if m != nil {
		return m.LimitVolume
	}
	return ""
}

func (m *EventCreateCoin) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *EventCreateCoin) GetCommissionCreateCoin() string {
	if m != nil {
		return m.CommissionCreateCoin
	}
	return ""
}

type EventUpdateCoin struct {
	Sender      string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Symbol      string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	LimitVolume string `protobuf:"bytes,3,opt,name=limit_volume,json=limitVolume,proto3" json:"limit_volume,omitempty"`
	Identity    string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *EventUpdateCoin) Reset()         { *m = EventUpdateCoin{} }
func (m *EventUpdateCoin) String() string { return proto.CompactTextString(m) }
func (*EventUpdateCoin) ProtoMessage()    {}
func (*EventUpdateCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0b19d64b7f80d48, []int{1}
}
func (m *EventUpdateCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateCoin.Merge(m, src)
}
func (m *EventUpdateCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateCoin proto.InternalMessageInfo

func (m *EventUpdateCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventUpdateCoin) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *EventUpdateCoin) GetLimitVolume() string {
	if m != nil {
		return m.LimitVolume
	}
	return ""
}

func (m *EventUpdateCoin) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type EventSendCoin struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Coin     string `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *EventSendCoin) Reset()         { *m = EventSendCoin{} }
func (m *EventSendCoin) String() string { return proto.CompactTextString(m) }
func (*EventSendCoin) ProtoMessage()    {}
func (*EventSendCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0b19d64b7f80d48, []int{2}
}
func (m *EventSendCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSendCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSendCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSendCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendCoin.Merge(m, src)
}
func (m *EventSendCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventSendCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendCoin proto.InternalMessageInfo

func (m *EventSendCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventSendCoin) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventSendCoin) GetCoin() string {
	if m != nil {
		return m.Coin
	}
	return ""
}

type EventBuySellCoin struct {
	Sender           string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	CoinToBuy        string `protobuf:"bytes,2,opt,name=coin_to_buy,json=coinToBuy,proto3" json:"coin_to_buy,omitempty"`
	CoinToSell       string `protobuf:"bytes,3,opt,name=coin_to_sell,json=coinToSell,proto3" json:"coin_to_sell,omitempty"`
	AmountInBaseCoin string `protobuf:"bytes,4,opt,name=amount_in_base_coin,json=amountInBaseCoin,proto3" json:"amount_in_base_coin,omitempty"`
}

func (m *EventBuySellCoin) Reset()         { *m = EventBuySellCoin{} }
func (m *EventBuySellCoin) String() string { return proto.CompactTextString(m) }
func (*EventBuySellCoin) ProtoMessage()    {}
func (*EventBuySellCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0b19d64b7f80d48, []int{3}
}
func (m *EventBuySellCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBuySellCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBuySellCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBuySellCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBuySellCoin.Merge(m, src)
}
func (m *EventBuySellCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventBuySellCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBuySellCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventBuySellCoin proto.InternalMessageInfo

func (m *EventBuySellCoin) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventBuySellCoin) GetCoinToBuy() string {
	if m != nil {
		return m.CoinToBuy
	}
	return ""
}

func (m *EventBuySellCoin) GetCoinToSell() string {
	if m != nil {
		return m.CoinToSell
	}
	return ""
}

func (m *EventBuySellCoin) GetAmountInBaseCoin() string {
	if m != nil {
		return m.AmountInBaseCoin
	}
	return ""
}

type EventEditCoin struct {
	Symbol  string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Volume  string `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	Reserve string `protobuf:"bytes,3,opt,name=reserve,proto3" json:"reserve,omitempty"`
}

func (m *EventEditCoin) Reset()         { *m = EventEditCoin{} }
func (m *EventEditCoin) String() string { return proto.CompactTextString(m) }
func (*EventEditCoin) ProtoMessage()    {}
func (*EventEditCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0b19d64b7f80d48, []int{4}
}
func (m *EventEditCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventEditCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventEditCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventEditCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventEditCoin.Merge(m, src)
}
func (m *EventEditCoin) XXX_Size() int {
	return m.Size()
}
func (m *EventEditCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_EventEditCoin.DiscardUnknown(m)
}

var xxx_messageInfo_EventEditCoin proto.InternalMessageInfo

func (m *EventEditCoin) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *EventEditCoin) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *EventEditCoin) GetReserve() string {
	if m != nil {
		return m.Reserve
	}
	return ""
}

type EventRedeemCheck struct {
	Sender                string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Issuer                string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Coin                  string `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`
	Nonce                 string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	DueBlock              string `protobuf:"bytes,5,opt,name=due_block,json=dueBlock,proto3" json:"due_block,omitempty"`
	CommissionRedeemCheck string `protobuf:"bytes,6,opt,name=commission_redeem_check,json=commissionRedeemCheck,proto3" json:"commission_redeem_check,omitempty"`
}

func (m *EventRedeemCheck) Reset()         { *m = EventRedeemCheck{} }
func (m *EventRedeemCheck) String() string { return proto.CompactTextString(m) }
func (*EventRedeemCheck) ProtoMessage()    {}
func (*EventRedeemCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0b19d64b7f80d48, []int{5}
}
func (m *EventRedeemCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRedeemCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRedeemCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRedeemCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRedeemCheck.Merge(m, src)
}
func (m *EventRedeemCheck) XXX_Size() int {
	return m.Size()
}
func (m *EventRedeemCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRedeemCheck.DiscardUnknown(m)
}

var xxx_messageInfo_EventRedeemCheck proto.InternalMessageInfo

func (m *EventRedeemCheck) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventRedeemCheck) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *EventRedeemCheck) GetCoin() string {
	if m != nil {
		return m.Coin
	}
	return ""
}

func (m *EventRedeemCheck) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *EventRedeemCheck) GetDueBlock() string {
	if m != nil {
		return m.DueBlock
	}
	return ""
}

func (m *EventRedeemCheck) GetCommissionRedeemCheck() string {
	if m != nil {
		return m.CommissionRedeemCheck
	}
	return ""
}

func init() {
	proto.RegisterType((*EventCreateCoin)(nil), "decimal.coin.v1.EventCreateCoin")
	proto.RegisterType((*EventUpdateCoin)(nil), "decimal.coin.v1.EventUpdateCoin")
	proto.RegisterType((*EventSendCoin)(nil), "decimal.coin.v1.EventSendCoin")
	proto.RegisterType((*EventBuySellCoin)(nil), "decimal.coin.v1.EventBuySellCoin")
	proto.RegisterType((*EventEditCoin)(nil), "decimal.coin.v1.EventEditCoin")
	proto.RegisterType((*EventRedeemCheck)(nil), "decimal.coin.v1.EventRedeemCheck")
}

func init() { proto.RegisterFile("decimal/coin/v1/event.proto", fileDescriptor_c0b19d64b7f80d48) }

var fileDescriptor_c0b19d64b7f80d48 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0xdb, 0x34, 0x4d, 0x6e, 0xdb, 0x2f, 0xd1, 0x7c, 0x21, 0x58, 0xa9, 0x64, 0x85, 0x48,
	0x88, 0x6e, 0x12, 0xab, 0xa2, 0xe2, 0x01, 0x12, 0x75, 0xc1, 0x86, 0x45, 0xca, 0x8f, 0x60, 0x63,
	0xf9, 0xe7, 0x2a, 0x8c, 0x62, 0xcf, 0x44, 0xe3, 0xb1, 0x85, 0x77, 0x3c, 0x02, 0x7b, 0xde, 0x81,
	0x77, 0x60, 0xc7, 0xb2, 0x4b, 0x96, 0x28, 0x79, 0x11, 0x34, 0x3f, 0x4e, 0x5a, 0x84, 0xb2, 0x60,
	0x37, 0xe7, 0x9c, 0x3b, 0x77, 0xce, 0x3d, 0xf6, 0x0c, 0x5c, 0x24, 0x18, 0xd3, 0x2c, 0x4c, 0xfd,
	0x98, 0x53, 0xe6, 0x97, 0x57, 0x3e, 0x96, 0xc8, 0xe4, 0x64, 0x25, 0xb8, 0xe4, 0xa4, 0x63, 0xc5,
	0x89, 0x12, 0x27, 0xe5, 0xd5, 0xa0, 0xb7, 0xe0, 0x0b, 0xae, 0x35, 0x5f, 0xad, 0x4c, 0xd9, 0xe8,
	0xdb, 0x21, 0x74, 0x6e, 0xd4, 0xb6, 0x99, 0xc0, 0x50, 0xe2, 0x8c, 0x53, 0x46, 0xfa, 0xd0, 0xcc,
	0x91, 0x25, 0x28, 0x5c, 0x67, 0xe8, 0x5c, 0xb6, 0xe7, 0x16, 0x69, 0xbe, 0xca, 0x22, 0x9e, 0xba,
	0x87, 0x96, 0xd7, 0x88, 0xf4, 0xe0, 0x58, 0x52, 0x99, 0xa2, 0x7b, 0xa4, 0x69, 0x03, 0x48, 0x17,
	0x8e, 0x62, 0x21, 0xdc, 0xc6, 0xd0, 0xb9, 0x6c, 0xcc, 0xd5, 0x92, 0x3c, 0x85, 0xff, 0x28, 0xa3,
	0x92, 0x86, 0x69, 0x50, 0xf2, 0xb4, 0xc8, 0xd0, 0x3d, 0xd6, 0x1b, 0xce, 0x2d, 0xfb, 0x56, 0x93,
	0xe4, 0x19, 0x74, 0xea, 0x32, 0x81, 0x39, 0x8a, 0x12, 0xdd, 0xa6, 0xae, 0xab, 0x77, 0xcf, 0x0d,
	0x4b, 0x9e, 0xc0, 0x59, 0x4a, 0x33, 0x2a, 0xeb, 0x6e, 0x27, 0xba, 0xea, 0x54, 0x73, 0xb6, 0xd7,
	0x00, 0x5a, 0x34, 0x41, 0x26, 0xa9, 0xac, 0xdc, 0x96, 0x96, 0xb7, 0x98, 0x5c, 0x43, 0x3f, 0xe6,
	0x59, 0x46, 0xf3, 0x9c, 0x72, 0x16, 0xc4, 0x7a, 0xfe, 0x40, 0xa5, 0xe5, 0xb6, 0x75, 0x65, 0x6f,
	0xa7, 0xee, 0xc2, 0x19, 0x7d, 0x76, 0x6c, 0x60, 0x6f, 0x56, 0xc9, 0xbf, 0x06, 0xf6, 0xa7, 0xf1,
	0xa3, 0xfd, 0xc6, 0x1b, 0x0f, 0x8d, 0x8f, 0xde, 0xc1, 0xb9, 0x76, 0x70, 0x8b, 0x2c, 0xd9, 0x7b,
	0xfe, 0x00, 0x5a, 0x02, 0x63, 0xa4, 0x25, 0x0a, 0xeb, 0x60, 0x8b, 0x09, 0x81, 0x86, 0x9e, 0xd5,
	0x9c, 0xad, 0xd7, 0xa3, 0xaf, 0x0e, 0x74, 0x75, 0xe7, 0x69, 0x51, 0xdd, 0x62, 0x9a, 0xee, 0x6d,
	0xee, 0xc1, 0xa9, 0xda, 0x14, 0x48, 0x1e, 0x44, 0x45, 0x65, 0xfb, 0xb7, 0x15, 0xf5, 0x9a, 0x4f,
	0x8b, 0x8a, 0x0c, 0xe1, 0xac, 0xd6, 0x73, 0x4c, 0x53, 0x7b, 0x10, 0x98, 0x02, 0xd5, 0x9d, 0x8c,
	0xe1, 0xff, 0x30, 0xe3, 0x05, 0x93, 0x01, 0x65, 0x41, 0x14, 0xe6, 0x36, 0x7d, 0x33, 0x6e, 0xd7,
	0x48, 0x2f, 0xd9, 0x34, 0xcc, 0x4d, 0xf2, 0xef, 0xed, 0xd8, 0x37, 0x09, 0x95, 0x5b, 0x67, 0x26,
	0x5e, 0xe7, 0x41, 0xbc, 0x7d, 0x68, 0xda, 0x60, 0x6d, 0xec, 0x06, 0x11, 0x17, 0x4e, 0xea, 0x1f,
	0xca, 0x98, 0xa9, 0xe1, 0xe8, 0x7b, 0x3d, 0xf8, 0x1c, 0x13, 0xc4, 0x6c, 0xf6, 0x11, 0xe3, 0xe5,
	0xbe, 0xaf, 0x4a, 0xf3, 0xbc, 0xd8, 0x66, 0x6a, 0xd1, 0xdf, 0x12, 0x55, 0x57, 0x83, 0x71, 0x16,
	0xa3, 0x1d, 0xca, 0x00, 0x72, 0x01, 0xed, 0xa4, 0xc0, 0x20, 0x4a, 0x79, 0xbc, 0xb4, 0x77, 0xa0,
	0x95, 0x14, 0x38, 0x55, 0x98, 0xbc, 0x80, 0xc7, 0xf7, 0x7e, 0x4b, 0xa1, 0x0d, 0x05, 0xb1, 0x72,
	0x64, 0xaf, 0xc1, 0xa3, 0x9d, 0x7c, 0xcf, 0xee, 0xf4, 0xd5, 0x8f, 0xb5, 0xe7, 0xdc, 0xad, 0x3d,
	0xe7, 0xd7, 0xda, 0x73, 0xbe, 0x6c, 0xbc, 0x83, 0xbb, 0x8d, 0x77, 0xf0, 0x73, 0xe3, 0x1d, 0x7c,
	0xb8, 0x8e, 0xa8, 0x8c, 0x8a, 0x78, 0x89, 0x72, 0xc2, 0xc5, 0xc2, 0xb7, 0x0f, 0x83, 0xc4, 0x30,
	0xf3, 0x17, 0x7c, 0x9c, 0x67, 0xa1, 0x90, 0x63, 0xc6, 0x13, 0xf4, 0x3f, 0x99, 0x97, 0x44, 0x56,
	0x2b, 0xcc, 0xa3, 0xa6, 0x7e, 0x20, 0x9e, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xf9, 0xc4,
	0xe7, 0x66, 0x04, 0x00, 0x00,
}

func (m *EventCreateCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommissionCreateCoin) > 0 {
		i -= len(m.CommissionCreateCoin)
		copy(dAtA[i:], m.CommissionCreateCoin)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CommissionCreateCoin)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LimitVolume) > 0 {
		i -= len(m.LimitVolume)
		copy(dAtA[i:], m.LimitVolume)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.LimitVolume)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InitialReserve) > 0 {
		i -= len(m.InitialReserve)
		copy(dAtA[i:], m.InitialReserve)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.InitialReserve)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InitialVolume) > 0 {
		i -= len(m.InitialVolume)
		copy(dAtA[i:], m.InitialVolume)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.InitialVolume)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Crr != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Crr))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LimitVolume) > 0 {
		i -= len(m.LimitVolume)
		copy(dAtA[i:], m.LimitVolume)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.LimitVolume)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSendCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSendCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSendCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coin) > 0 {
		i -= len(m.Coin)
		copy(dAtA[i:], m.Coin)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Coin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBuySellCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBuySellCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBuySellCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AmountInBaseCoin) > 0 {
		i -= len(m.AmountInBaseCoin)
		copy(dAtA[i:], m.AmountInBaseCoin)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.AmountInBaseCoin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoinToSell) > 0 {
		i -= len(m.CoinToSell)
		copy(dAtA[i:], m.CoinToSell)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CoinToSell)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoinToBuy) > 0 {
		i -= len(m.CoinToBuy)
		copy(dAtA[i:], m.CoinToBuy)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CoinToBuy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventEditCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventEditCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventEditCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reserve) > 0 {
		i -= len(m.Reserve)
		copy(dAtA[i:], m.Reserve)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Reserve)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Volume) > 0 {
		i -= len(m.Volume)
		copy(dAtA[i:], m.Volume)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Volume)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRedeemCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRedeemCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRedeemCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommissionRedeemCheck) > 0 {
		i -= len(m.CommissionRedeemCheck)
		copy(dAtA[i:], m.CommissionRedeemCheck)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CommissionRedeemCheck)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DueBlock) > 0 {
		i -= len(m.DueBlock)
		copy(dAtA[i:], m.DueBlock)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DueBlock)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Coin) > 0 {
		i -= len(m.Coin)
		copy(dAtA[i:], m.Coin)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Coin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Crr != 0 {
		n += 1 + sovEvent(uint64(m.Crr))
	}
	l = len(m.InitialVolume)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.InitialReserve)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.LimitVolume)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CommissionCreateCoin)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventUpdateCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.LimitVolume)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventSendCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Coin)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventBuySellCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CoinToBuy)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CoinToSell)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.AmountInBaseCoin)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventEditCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Volume)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Reserve)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventRedeemCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Coin)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DueBlock)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CommissionRedeemCheck)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crr", wireType)
			}
			m.Crr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialReserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionCreateCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionCreateCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSendCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSendCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSendCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBuySellCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBuySellCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBuySellCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinToBuy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinToBuy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinToSell", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinToSell = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountInBaseCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountInBaseCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventEditCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventEditCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventEditCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRedeemCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRedeemCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRedeemCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DueBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRedeemCheck", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionRedeemCheck = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
