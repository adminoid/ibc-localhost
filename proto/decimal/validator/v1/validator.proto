syntax = "proto3";
package decimal.validator.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "cosmos_proto/cosmos.proto";

option go_package = "bitbucket.org/decimalteam/go-smart-node/x/validator/types";

enum BondStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // UNSPECIFIED defines an invalid validator status.
  BOND_STATUS_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "Unspecified"];
  // UNBONDED defines a validator that is not bonded.
  BOND_STATUS_UNBONDED = 1 [(gogoproto.enumvalue_customname) = "Unbonded"];
  // UNBONDING defines a validator that is unbonding.
  BOND_STATUS_UNBONDING = 2 [(gogoproto.enumvalue_customname) = "Unbonding"];
  // BONDED defines a validator that is bonded.
  BOND_STATUS_BONDED = 3 [(gogoproto.enumvalue_customname) = "Bonded"];
}

message Params {
  option (gogoproto.equal)            = true;

  // unbonding_time is the time duration of unbonding.
  google.protobuf.Duration unbonding_time = 1
  [(gogoproto.nullable) = false, (gogoproto.stdduration) = true, (gogoproto.moretags) = "yaml:\"unbonding_time\""];
  // max_validators is the maximum number of validators.
  uint32 max_validators = 2 [(gogoproto.moretags) = "yaml:\"max_validators\""];
  // max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
  uint32 max_entries = 3 [(gogoproto.moretags) = "yaml:\"max_entries\""];
  // historical_entries is the number of historical entries to persist.
  uint32 historical_entries = 4 [(gogoproto.moretags) = "yaml:\"historical_entries\""];
  // max_delegations is the number of max delegations count of validator
  uint32 max_delegations = 5 [(gogoproto.moretags) = "yaml:\"max_delegations\""];
  // bond_denom defines the bondable coin denomination.
  string bond_denom = 6 [(gogoproto.moretags) = "yaml:\"bond_denom\""];
}

message Validator {
  option (gogoproto.equal) = false;
  option (cosmos_proto.implements_interface) = "ValidatorI";

  // operator_address defines the address of the validator's operator; bech encoded in JSON.
  string val_address = 1 [(gogoproto.moretags) = "yaml:\"val_address\""];

  // consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
  google.protobuf.Any pub_key = 2 [
    (cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey",
    (gogoproto.moretags) = "yaml:\"pub_key\""
  ];

  // tokens define the delegated tokens (incl. self-delegation).
  string tokens = 3
  [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];

  // status is the validator status (bonded/unbonding/unbonded).
  BondStatus status = 4;

  // commission defines the commission parameters.
  string commission = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"comission\""
  ];

  // jailed defined whether the validator has been jailed from bonded status or not.
  bool jailed = 6;

  // unbonding_completion_time defines, if unbonding, the min time for the validator to complete unbonding.
  google.protobuf.Timestamp unbonding_completion_time = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true,
    (gogoproto.moretags) = "yaml:\"unbonding_completion_time\""
  ];

  // unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
  int64 unbonding_height = 8 [(gogoproto.moretags) = "yaml:\"unbonding_height\""];

  // description defines the description terms for the validator.
  Description description = 9
  [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"description\""];

  // accum_rewards is a pool of all collected rewards
  string accum_rewards = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"accum_rewards\""
  ];

  // reward_address is the account for withdrawing rewards
  string reward_address = 11 [(gogoproto.moretags) = "yaml:\"reward_address\""];

  // whether the validator participates in the consensus
  bool online = 12 [(gogoproto.moretags) = "yaml:\"online\""];
}

message Description {
  option (gogoproto.equal)            = true;

  // moniker defines a human-readable name for the validator.
  string moniker = 1 [(gogoproto.moretags) = "yaml:\"moniker\""];;
  // identity defines an optional identity signature (ex. UPort or Keybase).
  string identity = 2 [(gogoproto.moretags) = "yaml:\"identity\""];;
  // website defines an optional website link.
  string website = 3 [(gogoproto.moretags) = "yaml:\"website\""];;
  // security_contact defines an optional email for security contact.
  string security_contact = 4 [(gogoproto.moretags) = "yaml:\"security_contact\""];
  // details define other optional details.
  string details = 5 [(gogoproto.moretags) = "yaml:\"details\""];;
}