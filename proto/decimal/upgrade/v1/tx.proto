syntax = "proto3";
package decimal.upgrade.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

import "decimal/upgrade/v1/upgrade.proto";

option go_package = "bitbucket.org/decimalteam/go-smart-node/x/upgrade/types";

// Msg defines the upgrade Msg service.
service Msg {
  // SoftwareUpgrade is a governance operation for initiating a software upgrade.
  rpc SoftwareUpgrade(MsgSoftwareUpgrade) returns (MsgSoftwareUpgradeResponse);
  // CancelUpgrade is a governance operation for cancelling a previously
  // approvid software upgrade.
  rpc CancelUpgrade(MsgCancelUpgrade) returns (MsgCancelUpgradeResponse);
}

// MsgSoftwareUpgrade is the Msg/SoftwareUpgrade request type.
message MsgSoftwareUpgrade {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // plan is the upgrade plan.
  Plan plan = 2 [(gogoproto.nullable) = false];
}

// MsgSoftwareUpgradeResponse is the Msg/SoftwareUpgrade response type.
message MsgSoftwareUpgradeResponse {}

// MsgCancelUpgrade is the Msg/CancelUpgrade request type.
message MsgCancelUpgrade {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgCancelUpgradeResponse is the Msg/CancelUpgrade response type.
message MsgCancelUpgradeResponse {}
