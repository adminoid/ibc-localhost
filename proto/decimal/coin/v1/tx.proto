syntax = "proto3";
package decimal.coin.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "bitbucket.org/decimalteam/go-smart-node/x/coin/types";

// Msg defines the coin Msg service.
service Msg {

  // CreateCoin defines message for new coin creation.
  rpc CreateCoin(MsgCreateCoin) returns (MsgCreateCoinResponse);

  // UpdateCoin defines message for modifying existing coin.
  rpc UpdateCoin(MsgUpdateCoin) returns (MsgUpdateCoinResponse);

  // SendCoin defines message for transfering specific coin.
  rpc SendCoin(MsgSendCoin) returns (MsgSendCoinResponse);

  // MultiSendCoin defines message for transfering specific coins as a batch.
  rpc MultiSendCoin(MsgMultiSendCoin) returns (MsgMultiSendCoinResponse);

  // BuyCoin defines message for buying specific coin.
  rpc BuyCoin(MsgBuyCoin) returns (MsgBuyCoinResponse);

  // SellCoin defines message for selling specific coin.
  rpc SellCoin(MsgSellCoin) returns (MsgSellCoinResponse);

  // SellAllCoin defines message for selling all specific coin.
  rpc SellAllCoin(MsgSellAllCoin) returns (MsgSellAllCoinResponse);

  // RedeemCheck defines message for redeeming checks.
  rpc RedeemCheck(MsgRedeemCheck) returns (MsgRedeemCheckResponse);

  // MsgReturnLegacyBalance defines message for legacy balance returns.
  rpc ReturnLegacyBalance(MsgReturnLegacyBalance) returns (MsgReturnLegacyBalanceResponse);
}

////////////////////////////////////////////////////////////////

message MsgCreateCoin {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string sender = 1 [
    (gogoproto.jsontag) = "sender",
    (gogoproto.moretags) = "yaml:\"sender\""
  ];
  string title = 2 [
    (gogoproto.jsontag) = "title",
    (gogoproto.moretags) = "yaml:\"title\""
  ];
  string symbol = 3 [
    (gogoproto.jsontag) = "symbol",
    (gogoproto.moretags) = "yaml:\"symbol\""
  ];
  uint64 crr = 4 [
    (gogoproto.customname) = "CRR",
    (gogoproto.jsontag) = "constant_reserve_ratio",
    (gogoproto.moretags) = "yaml:\"constant_reserve_ratio\""
  ];
  bytes initial_volume = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.jsontag) = "initial_volume",
    (gogoproto.moretags) = "yaml:\"initial_volume\"",
    (gogoproto.nullable) = false
  ];
  bytes initial_reserve = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.jsontag) = "initial_reserve",
    (gogoproto.moretags) = "yaml:\"initial_reserve\"",
    (gogoproto.nullable) = false
  ];
  bytes limit_volume = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.jsontag) = "limit_volume",
    (gogoproto.moretags) = "yaml:\"limit_volume\"",
    (gogoproto.nullable) = false
  ];
  string identity = 8 [
    (gogoproto.jsontag) = "identity",
    (gogoproto.moretags) = "yaml:\"identity\""
  ];
}

message MsgCreateCoinResponse {}

////////////////////////////////////////////////////////////////

message MsgUpdateCoin {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string sender = 1 [
    (gogoproto.jsontag) = "sender",
    (gogoproto.moretags) = "yaml:\"sender\""
  ];
  string symbol = 2 [
    (gogoproto.jsontag) = "symbol",
    (gogoproto.moretags) = "yaml:\"symbol\""
  ];
  bytes limit_volume = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.jsontag) = "limit_volume",
    (gogoproto.moretags) = "yaml:\"limit_volume\"",
    (gogoproto.nullable) = false
  ];
  string identity = 4 [
    (gogoproto.jsontag) = "identity",
    (gogoproto.moretags) = "yaml:\"identity\""
  ];
}

message MsgUpdateCoinResponse {}

////////////////////////////////////////////////////////////////

message Send {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  cosmos.base.v1beta1.Coin coin = 1 [
    (gogoproto.jsontag) = "coin",
    (gogoproto.moretags) = "yaml:\"coin\"",
    (gogoproto.nullable) = false
  ];
  string receiver = 2 [
    (gogoproto.jsontag) = "receiver",
    (gogoproto.moretags) = "yaml:\"receiver\""
  ];
}

message MsgMultiSendCoin {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string sender = 1 [
    (gogoproto.jsontag) = "sender",
    (gogoproto.moretags) = "yaml:\"sender\""
  ];
  repeated Send sends = 2 [
    (gogoproto.jsontag) = "sends",
    (gogoproto.moretags) = "yaml:\"sends\"",
    (gogoproto.nullable) = false
  ];
}

message MsgMultiSendCoinResponse {}

////////////////////////////////////////////////////////////////

message MsgBuyCoin {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string sender = 1 [
    (gogoproto.jsontag) = "sender",
    (gogoproto.moretags) = "yaml:\"sender\""
  ];
  cosmos.base.v1beta1.Coin coin_to_buy = 2 [
    (gogoproto.jsontag) = "coin_to_buy",
    (gogoproto.moretags) = "yaml:\"coin_to_buy\"",
    (gogoproto.nullable) = false
  ];
  cosmos.base.v1beta1.Coin max_coin_to_sell = 3 [
    (gogoproto.jsontag) = "max_coin_to_sell",
    (gogoproto.moretags) = "yaml:\"max_coin_to_sell\"",
    (gogoproto.nullable) = false
  ];
}

message MsgBuyCoinResponse {}

////////////////////////////////////////////////////////////////

message MsgSellCoin {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string sender = 1 [
    (gogoproto.jsontag) = "sender",
    (gogoproto.moretags) = "yaml:\"sender\""
  ];
  cosmos.base.v1beta1.Coin coin_to_sell = 2 [
    (gogoproto.jsontag) = "coin_to_sell",
    (gogoproto.moretags) = "yaml:\"coin_to_sell\"",
    (gogoproto.nullable) = false
  ];
  cosmos.base.v1beta1.Coin min_coin_to_buy = 3 [
    (gogoproto.jsontag) = "min_coin_to_buy",
    (gogoproto.moretags) = "yaml:\"min_coin_to_buy\"",
    (gogoproto.nullable) = false
  ];
}

message MsgSellCoinResponse {}

////////////////////////////////////////////////////////////////

message MsgSellAllCoin {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string sender = 1 [
    (gogoproto.jsontag) = "sender",
    (gogoproto.moretags) = "yaml:\"sender\""
  ];
  cosmos.base.v1beta1.Coin coin_to_sell = 2 [
    (gogoproto.jsontag) = "coin_to_sell",
    (gogoproto.moretags) = "yaml:\"coin_to_sell\"",
    (gogoproto.nullable) = false
  ];
  cosmos.base.v1beta1.Coin min_coin_to_buy = 3 [
    (gogoproto.jsontag) = "min_coin_to_buy",
    (gogoproto.moretags) = "yaml:\"min_coin_to_buy\"",
    (gogoproto.nullable) = false
  ];
}

message MsgSellAllCoinResponse {}

////////////////////////////////////////////////////////////////

message MsgSendCoin {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string sender = 1 [
    (gogoproto.jsontag) = "sender",
    (gogoproto.moretags) = "yaml:\"sender\""
  ];
  string receiver = 2 [
    (gogoproto.jsontag) = "receiver",
    (gogoproto.moretags) = "yaml:\"receiver\""
  ];
  cosmos.base.v1beta1.Coin coin = 3 [
    (gogoproto.jsontag) = "coin",
    (gogoproto.moretags) = "yaml:\"coin\"",
    (gogoproto.nullable) = false
  ];
}

message MsgSendCoinResponse {}

////////////////////////////////////////////////////////////////

message MsgRedeemCheck {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string sender = 1 [
    (gogoproto.jsontag) = "sender",
    (gogoproto.moretags) = "yaml:\"sender\""
  ];
  string check = 2 [
    (gogoproto.jsontag) = "check",
    (gogoproto.moretags) = "yaml:\"check\""
  ];
  string proof = 3 [
    (gogoproto.jsontag) = "proof",
    (gogoproto.moretags) = "yaml:\"proof\""
  ];
}

message MsgRedeemCheckResponse {}

////////////////////////////////////////////////////////////////

message MsgReturnLegacyBalance {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string sender = 1 [
    (gogoproto.jsontag) = "sender",
    (gogoproto.moretags) = "yaml:\"sender\""
  ];
  string receiver = 2 [
    (gogoproto.jsontag) = "receiver",
    (gogoproto.moretags) = "yaml:\"receiver\""
  ];
  bytes publicKeyBytes = 3 [
    (gogoproto.jsontag) = "public_key_bytes",
    (gogoproto.moretags) = "yaml:\"public_key_bytes\""
  ];
}

message MsgReturnLegacyBalanceResponse {}